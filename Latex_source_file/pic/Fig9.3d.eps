%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Kmeans_Iter4.pdf
%%Creator: Adobe Acrobat 9.0.0
%%For: ZHANG Min-Ling
%%CreationDate: 2016/11/30, 18:59:11
%%BoundingBox: 0 0 512 410
%%HiResBoundingBox: 0 0 511.2023 409.7473
%%CropBox: 0 0 511.2023 409.7473
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1080 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c041 52.342996, 2008/05/07-20:48:00        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   dc:format="application/pdf"
   xmp:CreateDate="2016-11-30T18:58:09+08:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2016-11-30T18:59:03+08:00"
   xmp:MetadataDate="2016-11-30T18:59:03+08:00"
   pdf:Producer="Acrobat Distiller 9.0.0 (Windows)"
   xmpMM:DocumentID="uuid:b0bd23f5-8b68-4e79-9a67-f7b9bedd4ef0"
   xmpMM:InstanceID="uuid:25b113ef-7ff0-424c-a231-2010085a59ea">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">MATLAB</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>ZHANG Min-Ling</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -409.747 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
7.62939e-6 0 mo
7.62939e-6 409.747 li
511.202 409.747 li
511.202 0 li
cp
clp
[1 0 0 1 -39.9274 0 ]ct
18 407.241 mo
594 407.241 li
594 -24.7593 li
18 -24.7593 li
cp
false sop
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
92.88 359.721 mo
539.28 359.721 li
539.28 7.64069 li
92.88 7.64069 li
cp
f
1.98 lw
0 lc
1 lj
10 ml
[] 0 dsh
false sadj
92.88 359.721 mo
92.88 7.64069 li
539.28 7.64069 li
539.28 359.721 li
92.88 359.721 li
@
92.88 7.64069 mo
539.28 7.64069 li
1 /0 /CSD get_res sepcs
1 sep
@
539.28 7.70068 mo
539.34 7.70068 li
539.34 7.64063 li
539.28 7.64063 li
cp
f
92.88 359.721 mo
539.28 359.721 li
@
539.28 359.781 mo
539.34 359.781 li
539.34 359.721 li
539.28 359.721 li
cp
f
539.28 359.721 mo
539.28 7.64069 li
@
539.28 7.70068 mo
539.34 7.70068 li
539.34 7.64063 li
539.28 7.64063 li
cp
f
92.88 359.721 mo
92.88 7.64069 li
@
92.88 7.70068 mo
92.94 7.70068 li
92.94 7.64063 li
92.88 7.64063 li
cp
f
92.88 359.721 mo
539.28 359.721 li
@
539.28 359.781 mo
539.34 359.781 li
539.34 359.721 li
539.28 359.721 li
cp
f
92.88 359.721 mo
92.88 7.64069 li
@
92.88 7.70068 mo
92.94 7.70068 li
92.94 7.64063 li
92.88 7.64063 li
cp
f
92.88 359.721 mo
92.88 355.221 li
@
92.88 355.281 mo
92.94 355.281 li
92.94 355.221 li
92.88 355.221 li
cp
f
92.88 7.64069 mo
92.88 12.0807 li
@
92.88 12.1407 mo
92.94 12.1407 li
92.94 12.0807 li
92.88 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT Initial
ct_T42Dict begin
-0.555 -0.324 2 1.055
 256 array 0 1 255 {1 index exch /.notdef put} for  /PBAAAA+TimesNewRomanPS-BoldMT
Type42DictBegin
[<00010000000c000c000c000c4f532f321a635a9e000000cc000000606376
742074e2f99d0000012c0000082c6670676d379e7810000009580000063f
676c7966dc3a6f030000ac0400000dcc68656164e7b872a300000f980000
0036686865611304185600000fd000000024686d7478cab0761e00000ff4
000040146c6f636100dbcc5800005008000040186d617870194e065d0000
9020000000206e616d65c761a768000090400000085970726570025f6028
0000989c00001368676469720000000000000000000000000003036a02bc
00050008059a053300000125059a0533000003a000660212010502020803
070505020304e0002effc00078430000000900000000544d432000200020
fffc056bfe460133072101bb400001ffffff000003a7054c000000200015
058e001f054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000001240000012400000000000000000025
0084002400e8009600bf005d00cb02030045012e00580004011800190002
0139004b011000170005010a00280023004b00500015004a00e5010d00af
003100ea014600810125004f009c0022004e00160041009100a00147ffe9
008100d3016900ab001700a801400027004c0148ffdf00510050ffb7012e
0000003b0097009a010e001f004c010a0123ffde00220073008700ba00d6
00ff005a009805a0ffe900500052006effb7005c00d1015a015bff1c0049
006e007e009800a100bd00e4018801c00405ff6000350062007201070113
01280382ffa8003805d809b5ffc4ffd00010006e00a100ba00ec022b0446
ffee004000e80401ff680003001300330033006e00a200b600dc01180135
0343000e0034005c005d007c00af0328003b00480089009c00ba017b01af
030effa4001700370063007f00e0017801c0022105d805f0ff7a00120027
00340052008a00a400c100c300eb011801460154036dfe3fff4e00010008
002b0045006e0084008600ae00af00c200c200c4010f01210149017b01c1
01de01e1036e03e6006300a700ed00f600f801280169017e023f02820532
fd81ffb5002600350040004500490057006c00ac01260140015b017b019c
0277027e027f03b603dc042804efff38ffc30006002f0040008200aa00b6
00ce00d300d700e50146014d01d6027e03b30586ff7b0012002f0068007f
008400a500b900f501050109010c01140120013301370178017b01c001e1
021d02230258036203af058cff79ff8d00210024005d00650068006a0083
008500b700cf00e200eb00ed011a0120012f0137013f0150018d018f01c4
02cf0357035c03960440049604ab04c204fc051105c2fed1fee000130021
00240030004d004d005d0066007a007c00b800b800c300da0103011b011e
012f013d014a0150015f0166017c0190019501a301a601b601c701d001e9
01ef01f90218028c029402bb02c502cf02d0031d032a0344039f03cc0421
04da04fb0761fd1dfebffeefff0bff2bff33ff90ff9cffdbffed00010008
001c0025003f0043005a006b0080008400900095009d00a700b400cd00d5
00d600df00df00df00e400f000f600fb010601130119011b012201230127
012c013f015701580177018a019301a401c601e101e401fc0200020c0222
0222022a0236024a025c028202ec02fc030a032303410378039703d203fa
04790532053205ab05b505f006e4072508ccfc9bfddefe00fe69fe96fe9b
ff3500030006000e00130019003400420048004a00570064007100710072
00760077007a007a0083009c00af00af00b200bb00c800cc00cf00cf00db
00dc00df00e400e400e400e900eb00f400fd00fe01020105010501080108
011b01220123013001370143015b016001650178017801780178017b0182
018901980198019b019e01a101a601d101d201d301df01e301f502000200
022d02410247024a0250025b025d025d025f02630281028b02b402b402ce
02d602db02e202fa03100311031f0327034503670388038a03b003b403d4
03d5042604410448046b04c704d1053205480549055f0563058b05a105a3
05c205ca05e405ff069306a206b806e8070a073607500754078907a907bb
07dc07ff08270120014d011b0129000000000000000000000093015b042f
029001ff02b800db00be027403cb029401ab000000000000000000000000
058a038a0364005f02b803bd029d7c9003e203ac02820000044400000000
003d010a00cc00bc00cc05d3041505e800c7021a00ee00000194036102be
029902180136033b048504cc0050007905a305a302df020702af000001eb
0064005f0055011900f2045600ef00c800cf058a0143014602de01ab02c6
024a005d00d800a402bb009900a0006501370274036400b500fa009101b9
032001b60025007f00d000ec00e000000000000000000000042ffd42023f
06180276063a013701b90151ffc70229ffeb023f02e1018500db03fa0190
0156014e012f00a600e300bb00d50134011f04fe041b00d100e4011e009b
00cd00e700b300e200ca042400b800f500b90334005a04e00123012ffdc9
fe440574038301f602410002001700500015004f001700a8005100980052
0049006e000e00af017b017b019c006a008300eb00cd0122000005d306da
009a008f00ba0315002503a5028002ff03c80420009200e0034c009b007d
00f8011c013400a8006d006900000420ffe6fea4006a006a003800380162
015a0044006d0048001eff6d00a600a600400040ff5cff990559052b00ce
014c011500bf0140011800c800960509feed004800b4009500db0048018b
00b3fe6400c000ea01180125013203b003ed0576059005aa05b405be05cd
063100780084009b00cc00e200f4010a0120016300d100ea00f701080142
0019002c00340041003800480058006c025903bd0043011a007000d30028
003700420050005a0064007300780082008c009c00a500bd00ce00f00110
015c00be00d801020117012c016300ea01080041004b0055005f007300a6
0109018301b300410064001e002a00eb00fa010e01380274002c00400082
009600b600c000cc00dc00e600f000ff010a0120012c013b014401560163
00f70057006401100136005001b10000ffb60039004e004403cc00e50024
01100042012201a400f0006000e0000e001d003905e30102002cfe4eff38
026903bd011600ff000e00a00054001b003d01710041000f005000fd0015
014f0035fe47003900ab0080005005a50016002b00ac0115021504570555
007300da005c00ce0072ff58019a074403d703f0047040425554403f3e3d
3c3b3a3938373534333231302f2e2d2c2b2a292827262524232221201f1e
1d1c1b1a191817161514131211100f0e0d0c0b0a09080706050403020100
2c4523466020b02660b004262348482d2c452346236120b02661b0042623
48482d2c45234660b0206120b04660b004262348482d2c4523462361b020
6020b02661b02061b004262348482d2c45234660b0406120b06660b00426
2348482d2c4523462361b0406020b02661b04061b004262348482d2c0110
203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920b0ed
51582320b04d44235920b09051582320b00d44235921212d2c2020451868
4420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c00b1
0a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab10200
080d2d2c45b01a234445b01923442d2c2045b00325456164b05051584544
1b2121592d2cb00143632362b0002342b00f2b2d2c2045b0004360442d2c
01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb810006260
2b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d2c45
b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b038a45
186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21b017
7ae45959182d2c2d2cb0022546608a46b040618c482d2c4b53205c58b002
855958b00185592d2c20b0032545b019234445b01a23444565234520b003
25606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0
001a45208a54582321b03f1b235961441cb114008a5279b3194020194520
8a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b
2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d
2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349b0
4060b0206320b000525823b002253823b002256538008a63381b21212121
2159012d2c4bb06451584569b00943608a103a1b212121592d2c01b00525
1023208af500b0016023edec2d2c01b005251023208af500b0016123edec
2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0016101
10203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d
2c352d2c76b8029f23701020b8029f4520b0005058b00161593a2f182d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2c4b53234b515a5820
458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a
58381b2121592d2c4b5458381b2121592d2cb0134358031b02592d2cb013
4358021b03592d2c4b54b012435c5a58381b2121592d2cb012435c580cb0
0425b00425060c6423646164b807085158b00425b00425012046b0106048
2046b0106048590a21211b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b8fff060482046b8fff060
48590a21211b2121592d2c4b53234b515a58b03a2b1b2121592d2c4b5323
4b515a58b03b2b1b2121592d2c4b53234b515ab012435c5a58381b212159
2d2c0c8a034b54b00426024b545a8a8a0ab012435c5a58381b2121592d2c
462346608a8a462320468a608a61b8ff8062232010238ab9032703278a70
456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2cb10200
42b123018851b1400188535a58b910000020885458b202010243604259b1
2401885158b920000040885458b2020202436042b12401885458b2022002
436042004b014b5258b2020802436042591bb940000080885458b2020402
43604259b94000008063b80100885458b202080243604259b94000010063
b80200885458b202100243604259b12601885158b94000020063b8040088
5458b202400243604259b94000040063b80800885458b202800243604259
b12801885158b94000080063b81000885458ba0002010000024360425959
59595959592d2cb0024354584b53234b515a58381b2121591b2121212159
2d00000100000006e148af27e97b5f0f3cf50819080000000000a2e33546
00000000d2191143fb89fd61100008720000000900010001000000000001
00000721fe4500571000fb89fa0b10000001000000000000000000000000
000010050639011c00000000020000000200000002aa00af047100b00400
00280400004f0800008e06aa00520239008c02aa005202aa001904000072
048f00280200004202aa00320200005a023900020400004a040000870400
00320400002104000033040000450400004c04000045040000480400003f
02aa00af02aa0098048f0029048f0028048f00290400007d0771005c05c7
00100556002b05c7005105c7001b0556002904e3002e063900530639002b
031d0029040000160639002e05560026078d002905c7001d0639005004e3
00340639005005c700260473006a0556004a05c7003005c7001008000012
05c7000e05c700120556002102aa00d60239000202aa004304a600930400
ffed02aa00260400005c0473002b038d004e0473004f038d004f02aa0042
0400004d047300460239002a02aaffc7047300440239002b06aa004c0473
00460400004a047300270473004e038d004b031d005102aa00260473003f
0400001305c700110400002f04000011038d0015032700a501c3009f0327
005b0429000c05c7001005c7001105c700510556002905c7001d06390050
05c700470400005c0400005c0400005c0400005c0400005c0400005c038d
004e038d004f038d004f038d004f038d004f0239002b0239fff10239ffdd
0239ffe30473004604000049040000490400004904000049040000490473
003f0473003f0473003f0473003f040000630333003b0400008004000023
0400005c02cd004d045200010473003a05fa003b05fa003b0800fffd02aa
00e402aa00160464000f0800ffe90639005105b400350464000f0464000e
0464000e04000000049c004f03f4004e05b4002b0696002e046400340231
00000266002e02a400380625000905c7005a040000440400007302aa00af
048f0029046400540400ffff0464000d04e5001a04000024040000260800
00af05c7001005c70010063900500800004a05c700460400ffef0800ffec
040000510400005302aa009802aa00980464001003f4002f0400001205c7
00110156fe870400ffe902aa005d02aa005f0473003b047300360400006e
0200005902aa0098040000530800003b05c700100556002905c700100556
002905560029031d0029031d0029031d0029031d00280639005006390050
0639005005c7004705c7004705c700470239002a02aa001502aa001402aa
001402aa002702aa00c302aa008402aa009102aa007002aa005802aa0015
0556002a023900260473006b031d004505560022038d001501c3009f05c7
00230400004a05c700110400001104e3002904730027048f0028048f009a
0266004a026600180266000f06000048060000480600000d040000150639
00530400004d031d00290473006a031d005105c70051038d004e05c70051
038d004e0473004f0400ffed02ab00d105c700100400005c05c700100400
005c05c7001b05de005305c7002305560029038d004f05560029038d004f
055600260239002b0556002603c0002a05560026032a002b05c7001d0473
004605c7001d04730046063900500400004a05c70026038d004b05c70026
038d004b0473006a031d00510556004a02aa00260556004a042b002505c7
00300473003f05c700300473003f05560021038d001505560021038d0015
051700290639004d06a2004e047700570427004a036b0041045a004903b0
000204fe00500400ffed04d500ae02c8002b07c000260800004f04000099
0800004f040000990800004f040000980400009807d5016a05c000b6048f
002504cd0099048f002304d5022204d5010505abffe905ab027e05ab027e
05abffe905ab027e05abffe905ab027e05abffe905abffe905abffe905ab
ffe905abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe9
05abffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab
027e05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff
04d500920800000007eb013007eb012007eb013007eb012004d500b204d5
008004d5002a082b0198086b01b807550010060000f40600006f0440003a
0540003704c0003f04150040040000250600005506950028046b002705d5
fffd024000c6046b00c606aa00370300001a04d5009202d6005c02d6005c
04d500b202d6004d05c700100400005c05c70051038d004e05c70051038d
004e05560029038d004f05560029038d004f05560029038d004f06390053
0400004d063900530400004d063900530400004d0639002b047300460639
002b04730046031d00290239ffda031d00290239ffdb031d00290239ffee
031d00290239002a0400001602aaffc70639002e04730044047300480556
00260239002b05c7001d047300460627002c0473004b063900500400004a
063900500400004a05c70026038d004b0473006a031d004e0556004a02aa
002505c700300473003f05c700300473003f05c700300473003f05c70030
0473003f0800001205c7001105c70012040000110239000705c700110400
005c0800ffe905c7005a063900510400004402aa00af0800001205c70011
0800001205c700110800001205c7001105c700120400001102aa009702aa
ffd80400002304cd005a060000480600001f0600002b0600002c02aa0079
02aa009102aa00e402aaff8405c700100664ff750746ff75042dff750639
ff8806ebff750668ff76027bff6d05c700100556002b0504003105560029
055600210639002b031d00290639002e05bc0009078d002905c7001d056b
0073063900500639002904e30034053b000c0556004a05c7001205c7000e
063d001f0668004b031d002905c7001604770057036b0041048b0012027b
002c0427000a0437006603be0003034e0042048b0012042d0053027b002c
0471002403ee001c0489006b0393ffec0391003d0400004a044800650360
00390427000a03b2000f0581002105d9004f027bfff00427000a04000049
0427000a05d9004f055600290666004105170029056d004c0473006a031d
0029031d002c040000160806000c080400270666004105cd002a05df0012
0639002905c70010054a00220556002b05170029058100000556002907e9
001f04390029063900200639002005cd002a05f6000c078d00290639002b
063900500639002904e3003405c700510556004a05df001206df004b05c7
000e0639002905df000c08c9005608c90056061f004a07db0023054a0022
056d00600902002805c7ffe80400005c040000490452004903a20048040c
0000038d004f05cd000c0337001b049c0046049c0046049c0047047d000c
05730049049c00460400004a049c004604730027038d004e03ee00250400
0011058900520400002f049c00460483003406c1004706c1004704aa0024
063f004e043b004d0375001c061d004c04540023038d004b044c004903a2
004803750049031d00510239002a0239ffdd02aaffc7063d000c06600047
0473004b049c004704000011049c004604290029031d004908000041080a
000d0462000f000000000000000000000000000000000000000000000000
0000000000000000000000000000ffad00000000000001020000ffce02e8
00590000ff3b02aa00ee000002af0000ff6b02aa00af0437002c03ac0027
02ef002103b7003d0419003d02630038028a003804090043043c0038027c
003803a9003803920027037bffdf0417004f04440038029b003802870021
03d30048040f002703f1003803a8002c04840038041e003803dd004303b6
0038058200380425001604c6003804df003804f80038020b008c03ae008c
061000850263003803a9003803a90038037bff19037bff18040f00270582
00380582003805820038058200380437002c0437002c0437002c03ac0027
02ef002103b7003d0419003d0263003802a7001d043c0038027c003803a9
003803920027037bffdf044400380287002103d3004803f1003803a8002c
041e003803dd004303b6003805820038042500160263003803ac00270392
002703a8002c0437ffdf0000ffdc0000ff250000ffdc0000fe51028d00ab
028d00a002da004303c0007e0196ffba0000004600000046000000460000
004600000048000000460000004600000046047e0188047e0150047e0104
047e009e047e012d047e00ea047e00d5047e009c047e00bc047e00ee0435
0085028d00c0043500b3060001000600010002be005806000100047e00a5
047e00bd047e00de06000100060001000600010006000100060001000000
004606000100060001000600010006000100060001000600010006000100
0600010004e6ffba0600010006000100060001000532003905320039022c
ffba022cffba06000100060001000600010006000100049e003404780030
0430ffba0430ffba0376000a0376000a060e00290708002902e2ffba0456
ffba060e00290708002902e2ffba0456ffba05280097046f001e03520003
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
000000300000004600000046000000400000004606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010004000015080000000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
0100028dffcd028d002f0600010005a0002e03c0007e01e800060207ffcf
01bc005e01e0fffa039c0006039c000601bc005e01e0001a05280097049e
0011022cffba022cffba01bc008801e0001a0532003905320039022cffba
022cffba02be0036035200030532003905320039022cffba022cffba0532
003c0532003c022cffba022cffba049e0034047800300430ffba0430ffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba02be006902be006902be006902be00690376000a0376000a0376000a
0376000a073200400732004004deffba04deffba073200400732004004de
ffba04deffba0880004008800040062cffba062cffba0880004008800040
062cffba062cffba0430ffba0430ffba0430ffba0430ffba0430ffba0430
ffba0430ffba0430ffba0454003403c000460454ffba02e2ffba04540034
03c000460454ffba02e2ffba0610002f0610002f0270ffba0298ffba04e6
002704e600270270ffba0298ffba045400290454002902e2ffba02e2ffba
039c0023039c002301e0ffba01e0ffba02e2002102e200210352ffba0352
ffba0454003e0454003e022cffba022cffba02be00580352000303c0ffba
039cffba039c0006039c000605280097046f001e05280097049e0011022c
ffba022cffba0454001004c4001003e400220454001a03e400220454001a
03e400220454001a06000100060001000000004600000046060001000600
010006000100000000460000004606000100060001000000004800000046
060001000600010006000100000000460000004600000046000000460000
004000000030060001000000004600000046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100028d00ca028d
00c7028d00c6060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010002be00690100ffba0800ffba1000ffba06390050046e
004a065e003004cd003f0000fd7f0000fbbf0000fcc00000fdfc0000fcd0
0000fda00000fe1a0000fdb50000fd2f0000fc960000fd430000fc180000
fcd10000fef70000ff030000fe66041a009706000048060000180000fe4f
0000fd8e0000fdb80000fcd00000fe160000fd2d0000fbeb0000fba30000
fb890000fce50000fc660000fc200000fcb80000fc4a0000fc4a0000fc72
0000fbdc0000fdb80000fe770000fd880000fbfa0000fd760000fdcb0000
fe520000fc7d0000fdac0000fd5c0000fcee0000fcf80000fc9e0000fc2f
0000fc200000fbcb0000fbb70239002a05c700100400005c05c700100400
005c05c700100400005c05c700100400005c05c700100400005c05c70010
0400005c05c700100400005c05c700100400005c05c700100400005c05c7
00100400005c05c700100400005c05c700100400005c05560029038d004f
05560029038d004f05560029038d004f05560029038d004f05560029038d
004f05560029038d004f05560029038d004f05560029038d004f031d0029
0239002a031d00290239002a063900500400004a063900500400004a0639
00500400004a063900500400004a063900500400004a063900500400004a
063900500400004a06390050046e004a06390050046e004a06390050046e
004a06390050046e004a06390050046e004a05c700300473003f05c70030
0473003f065e003004cd003f065e003004cd003f065e003004cd003f065e
003004cd003f065e003004cd003f05c700120400001105c7001204000011
05c700120400001105c700100400005c031d00290239ffe8063900500400
004a05c700300473003f05c700300473003f05c700300473003f05c70030
0473003f05c700300473003f0000ff090000ff090000ff090000ff090517
002303a2002207e9001f05cd000c05cd002a049c004705cd002a049c0047
0639002b049c004605c700120400001305c700120400001305c7000e0400
002f05df000c0483003405df002b0473004605e90050038d003806390050
0400004a05320039022cffba0270ffba0298ffba04e60027022c0065022c
0016022c0016022c0011022c0043022cffd20000fef00000000f01a8fff5
02aa009002aa00900000000601bc005e0000005e0000ffcb01bc000f01e0
ffbf01bcfff501e0ffcd01bc001d01e0000901bc008801e0001a039c0006
039c0006039c0006039c000605280097046f001e0532003905320039022c
ffba022cffba0532003905320039022cffba022cffba0532003905320039
022cffba022cffba0532003905320039022cffba022cffba053200390532
0039022cffba022cffba0532003905320039022cffba022cffba05320039
05320039022cffba022cffba049e0034047800300430ffba0430ffba049e
0034047800300430ffba0430ffba049e0034047800300430ffba0430ffba
049e0034047800300430ffba0430ffba049e0034047800300430ffba0430
ffba049e0034047800300430ffba0430ffba02be004f02be004f02be0069
02be006902be006902be006902be004f02be004f02be006602be006602be
006902be006902be006902be006902be002f02be002f02be002202be0022
0376000a0376000a0376000a0376000a0376000a0376000a0376000a0376
000a0376000a0376000a0376000a0376000a0376000a0376000a0376000a
0376000a073200400732004004deffba04deffba073200400732004004de
ffba04deffba073200400732004004deffba04deffba0880004008800040
062cffba062cffba0880004008800040062cffba062cffba0430ffba0430
ffba0454003403c000460454ffba02e2ffba0610002f0610002f0610002f
0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610002f0610
002f0270ffba0298ffba0610002f0610002f0270ffba0298ffba0610002f
0610002f0270ffba0298ffba04e6002704e6002704e6002704e60027093e
0032093e00320740ffba0740ffba060e00290708002902e2ffba0456ffba
045400290454002902e2ffba02e2ffba045400290454002902e2ffba02e2
ffba045400290454002902e2ffba02e2ffba060e00290708002902e2ffba
0456ffba060e00290708002902e2ffba0456ffba060e00290708002902e2
ffba0456ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba039c0023039c002301e0ffba01e0ffba039c0023039c
002301e0ffb101e0ffb1039c0023039c002301e0ffba01e0ffba039c0023
039c002301e0ffba01e0ffba0454003e0454003e022cffba022cffba0454
003e0454003e0454003e0454003e0454003e0454003e022cffba022cffba
0454003e0454003e049e0034047800300430ffba0430ffba02be00580352
0003031a001a031a001a031a001a039c0006039c0006039c0006039c0006
039c0006039c0006039c0006039c0006039c0006039c0006039c0006039c
0006039c0006039c0006039c0006039c000605280042046fffd905280097
046f001e022cffba022cffba039c0006039c000605280097046f000a022c
ffba022cffba05280097046f000a067f0044067f0045067f0044067f0045
01a800280000fe290000fe8c0000fec80000ff230000fefa0000ff7a0000
fe5908fc003208ad00320000ff880000ffaf0000ff3f0000ff590000fe59
0000ff1501b4000002f700000000fe850000ff0704cd00320000ff580000
ff580000ff59073200400732004004deffba04deffba0880004008800040
062cffba062cffba0454003403c000460454ffba02e2ffba03c0007e02e2
002102be0058022cffba0290ffba01f4002f01f4003b01f4001201f400b1
01f4006d060e002907080029027c00380000fee202bc000004f8003803e4
fff50454fff503e400220454001a03e400220454001a03e400220454001a
03e400220454001a03e400220454001a03e400220454001a047e0072047e
00bd03e4000f0454000f0473002b060a0000054a00220473009a054a0022
0473000a05c7007005c70051038d004e05c7002306880000054a00420473
004f042700540556005c0439004704e3ffc70639005305c7001006410046
0274002b031d00290639002e047300440239001703ee001c0786006105c7
ff5f047300460639005008730051062a004a058e00000473002704e30029
04730052031d0049053b000c041a000002aa00260556000002aa00260556
004a0668004b053700300653001a0400001105560021038d001504a70029
04a7004703ab003803a0001b04000032040900290314003502aa002604c5
004601c3009f029800a0023c001402aa00af0b1d001b0954001b0800004f
095600260800002604e3002b09c7001d0871001d071d0046038d003805c7
00100400005c0000ff0905c700100400005c0800ffe905c7005a06390053
0400001b063900530400004d0639002e04730044063900500400004a0639
00500400004a04a7002903ab001b02aaffc70b1d001b0954001b0800004f
063900530400004d07c3002b052a003405c7001d0473004605c700100400
005c05c700100400005c05560029038d003c05560029038d004f031dffec
0239ff88031d00290239ffea063900500400004a063900500400004a05c7
0026038d004605c70026038d004b05c700300473003f05c700300473003f
0473006a031d00510556004a02aa0026046e007002fe001b0639002b0473
004605df002b056900470403004905560021038d001505c700100400005c
05560029038d004f063900500400004a0000feec063900500400004a0639
00500400004a063900500400004a05c7001204000011040000220499005c
049900220473009a038d002e038d00480473004f0473004f038d00300504
004f036b0041036b002f04be002f03a8004a02aaff680469005c0469005c
04bb004a04000013042400130473003b047300460473004602390017027b
002c024d002a0239ffde0239fffe0239002b04db002b06aa003506aa0035
06aa004c0473ff85047300460430002a0400004a0613004a05d9004f05c7
0049038d001f038d001f038d001f038d004b038d004b0335002b0335001f
0499002a0499002a031d0051026bff8502aaff6802cfff9a028eff8502aa
001402aa00260473003f04f000700430002c0400001205c7001504000013
04440013038d0015041b001503ab001b03ab0060038d004a038d004e038d
004a03fb004e063900500452004903a8004904bb004a049c004602aaff75
0473ffed040e00460473004e038d004a038d004e06e3004f06fa004f0771
004f052f0026044b002605a9002606cb004204f9002b04c4002b04190014
03d9003c029a001e029a001e0172ffe20209001e0209000a0221000a02c9
001e0375000a0264000a024000c603f800c602aa009802aa009802aa0098
02aa00ec02aa00ec0203001e0203001e048f0029048f0029048f0062048f
006202aa012102aa00e402aa002602aa012102aa001402aa002602aa00e4
023900a2023900a202aa00ec02aa00ec02aa009902aa009902aa009902aa
001402aaffec030e002d0265000a016b001e01bd001e024a000a0203001e
031000960310009603100096031000960310009602aa006202aa006202aa
001502aa0014040000530457009604570096045700960457009604570043
04570043045700430457004304570043031000430457002f0457002f0457
002f0457002f0457002f0310002f04570025045700250457002504570025
045700250310002f0457001a0457001a0457001a0457001a0457001a0310
001a04570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
0042031000420457002f0457002f0457002f0457002f0457002f0310002f
0457002f0457002f0457002f0457002f0457002f0310002f045700260457
002604570026045700260457002603100026045700420457004204570042
045700420457004203100042045700960457009604570096045700960457
004204570042045700420457004204570042031000420457002604570026
045700260457002604570026031000260457002304570023045700230457
002304570023031000230457002f0457002f0457002f0457002f0457002f
0310002f0457004b0457004b0457004b0457004b0457004b0310004b0457
009604570096045700960457009604570042045700420457004204570042
04570042031000420457001a0457001a0457001a0457001a0457001a0310
001a0457002404570024045700240457002404570024031000240457002f
0457002f0457002f0457002f0457002f0310002f0457004e0457004e0457
004e0457004e0457004e0310004e04570096045700960457009604570096
0000febd0000fec20000fdef0000fed20000ff6f0000febf0000ff310000
fec00000febd0000ffce0000ff660000fec00000fed20000fed20000ff41
0000ff430000ff43000000000000ff2f0000ff300000ff440000ff440000
fe87000000000000ff940000ff440000ff440000ff440000febf0000feda
000000000000febf0000ff310000ff7a0000ff540000ff3c0000ffce0000
fe870000febb0000febd0000febd0000fed20000fed20000febd0000fec2
0000fdef0000febf0000febd0000fec20000fdef0000fe160000fee00000
ff940000fe870000ff440000feba0000ff230000ff860000fdef0000fe5f
000000000000feb90000ff430000fe2e0000ff640000fe870000fddf0000
ff660000ff440000feb90000feb90000feb90000ff030000ff440000fd1f
0000ffb70000ffcb0000ff530256001e0212001e016b001e024b001e029a
001e0213001e029c001e029a001e03ef001e0209001e01b2001e0265000a
024a000a02aa00e402aa002602aa00bd0437006404cb003d05c700120763
000005c7001204fe005005d9000004a3001e063900500400004a05c70075
0360001b04e3002e045f004604c3001403b0001e0603000a046f000a06f6
003206aa003705cd005004b0004a05eb0036038d00130500004b04b1004b
0574001e04d8001e05cc0049042000490452001e039a001e04a3001e0400
0049038d004e02aaffc706390050035e0049035e00490556002906390020
038d004f049c00460a01005304f30011061c004a04cd0025080f0029054f
002a05c7000b0400000908c900290630002a07e9001f05cd000c0ae10029
07fd002a0439000903370000063d000b05810021063900500400004a0686
002d04d7003b0686002d04d7003b091e0050075c004a0697002104af0021
09e40049067600490000fe150a01005304f3001105c70051038d004e02b4
000a0000fea60000febc0000ff7a0000ff900000fc2b0000fc4c06390020
049c0046054a0022043b002b04e300340473002705c60029049d00480439
00290337001b05cd0023049c004506a1004a050b0024075f002b05560046
08eb002906c0004605d6003d0445003005c70051038d004e0556004a03ee
002506f0004a04df002405df000c04830034070b000004830000070b0000
04830000031d002907e9001f05cd000c05e6002a04bf004705f6000c047d
000c0639002b049c00460639002b049c004605df000c04830034078d0029
0573004902aafff905c700100400005c05c700100400005c0800ffe905c7
005a05560029038d004f05e90050038d003807e9001f05cd000c04390029
0337001b0439002903ab001b06390020049c004606390020049c00460639
00500400004a063900500400004a056d00610375001c05df001204000011
05df00120400001105df00120400001105df000c0483003407db0023063f
004e054a00420473004f06d100420640004f0660006b056d004c04c2006b
03af004c077c000c063c000c07c3002b065900460639005304bb004a05ba
004a04f100250000ff430000ff300000ff6d0000ffad0000ff460000ff56
0000ff730000fed70000fe5c000000630000ff460000ff56000000500000
fef90000fe4f0000ff3e0000ff560000ff7c0000ff690000ff560000fef9
0000ff780000ff560000ff3e0000ff430000ff690000ff7c000000500000
fddd0000ff750000ffad0000ff090000ff090000fee00000fee00000ff78
0000ff210000ff0905c700100400005c0556002b0473002b0556002b0473
002b0556002b0473002b05c70051038d004e05c7001b0473004f05c7001b
0473004f05c7001b0473004f05c7001b0473004f05c7001b0473004f0556
0029038d004f05560029038d004f05560029038d004f05560029038d004f
05560029038d004f04e3002e02aa0042063900530400004d0639002b0473
00460639002b047300460639002b047300460639002b047300460639002b
04730046031d00290239ffe2031d00290239ffe20639002e047300440639
002e047300440639002e04730044055600260239002b055600260239ffe7
055600260239ffe6055600260239ffec078d002906aa004c078d002906aa
004c078d002906aa004c05c7001d0473004605c7001d0473004605c7001d
0473004605c7001d04730046063900500400004a063900500400004a0639
00500400004a063900500400004a04e300340473002704e3003404730027
05c70026038d004b05c70026038d004b05c70026038d004b05c70026038d
004b0473006a031d00510473006a031d00510473006a031d00510473006a
031d00380473006a031d00510556004a02aa00260556004a02aa00260556
004a02aa00260556004a02aa002605c700300473003f05c700300473003f
05c700300473003f05c700300473003f05c700300473003f05c700100400
001305c70010040000130800001205c700110800001205c7001105c7000e
0400002f05c7000e0400002f05c700120400001105560021038d00150556
0021038d001505560021038d00150473004602aa001605c7001104000011
0400005c0239000704770057047700570477005704770057047700570477
0057047700570477005705c7001005c70010066700000667000005f90000
05f9000005c7001005c70010036b0041036b0041036b0041036b0041036b
0041036b0041066900000669000007ea000007ea000007ea000007ea0000
048b0012048b0012048b0012048b0012048b0012048b0012048b0012048b
0012074c0000074c000008cd000008cd000008cd000008cd000008cd0015
08cd0015027b002c027b002c027bffd2027bffd2027b0000027b0000027b
ffdf027bffdf043000000430000005b1000005b1000005b1000005b10000
05b1001505b100150400004a0400004a0400004a0400004a0400004a0400
004a0701000507010005087d0000087d000007e7000007e700000427000a
0427000a0427000a0427000a0427000a0427000a0427000a0427000a06ee
0000085b0000085b0000085b001505d9004f05d9004f05d9004f05d9004f
05d9004f05d9004f05d9004f05d9004f0717000007170000089800000898
0000081600000816000008160015081600150477005704770057036b0041
036b0041048b0012048b0012027bfff9027b002c0400004a0400004a0427
000a0427000a05d9004f05d9004f04770057047700570477005704770057
0477005704770057047700570477005705c7001005c70010066700000667
000005f9000005f9000005c7001005c70010048b0012048b0012048b0012
048b0012048b0012048b0012048b0012048b0012074c0000074c000008cd
000008cd000008cd000008cd000008cd001508cd001505d9004f05d9004f
05d9004f05d9004f05d9004f05d9004f05d9004f05d9004f071700000717
000008980000089800000816000008160000081600150816001504770057
04770057047700570477005704770057047700570477005705c7001005c7
001005c7001005c7001005c7001002aa00e102aa00be02aa00e102aa0015
02aa0015048b0012048b0012048b0012048b0012048b001206c0000006d4
000007a3000007c100000639002b02aa000002aa000002aa0015027b0000
027bfff0027bffed027bfff0027bffec027bffeb031d0029031d00290487
000004a5000002aa000002aa000002aa00150427000a0427000a0427000a
0427000a04480065044800650427000a0427000a05c7001205c70012076d
00000777000005f6000002aaff8402aaff8402aa002605d9004f05d9004f
05d9004f05d9004f05d9004f076700000681000007960000069c00000668
004b02aa00e402aa00e10518004905c7005105c7005106aa004c05c7001d
09b50026080000120639002e0556004a08f000290400003004c100660000
ffcb0000ffcb0000ffb70000ffb70239001702aaffc70400ffec04e30034
0473004f023900210473004602e300260555001f0555001f02aa007e02aa
007e02aa00d102aa00d102aa008402aa002602aa000c02aa000302aa000e
02aa00af02aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa
003a0000ff7b0000ff970000fed20000ff230000ff7b0000ff7b0000feb2
0000ff970000ffcb0000ffcb0000ffcb04e30029047300270426000505a0
000505c7005a045200430430004a049e0046049e004603d500460337001b
0239002a032f001904e8004603df004605730049049c00460400004a0430
00460473004a0473004a0473004a05c70046040300490400004a0400004a
043b004d045400230454002303ee0025045f0046044f004605b50046044f
00460400001305c70011038d0015035d002f03b5004a045a000f03a20048
03e50005049c0046043b004d04cb0004047d000c036a000504c60005032b
001e032b001e0370001e031f001e031f001e03b9001e03c7001e01e5001e
028e001e03d1001e032d001e0495001e0386001e03d4001e039c001e0324
001e02e7001e038e001e0315001e0382001e04c200050256001e0256001e
02b3001e035a001e0298001e029c001e0212001e0212001e0205001e0205
001e025e001e016b001e02b1001e03ef001e0274001e024b001e0213001e
024a001e024a001e029b001e01b2001e029a001e027d001e03ef001f0265
000a029400050256001e02400005025b001e02db001e02460005016b001e
0209001e029a001e0265000a0256001e02400005024b001e02db001e0246
0005077d00460a98004602a700460a7800460541ffba01e9001e04540010
0000ff0d0000ff350000fece0000feb70000fec90000ffc70000ff4f0000
ff9e0000fef002be006902be00690376000a0376000a03c0ffba039cffba
03c0ffba039cffba0563002c04e3003d0545003d04be002704a7ffdf0543
004f04e2003805510016048f00280000000000000000000000000400ffef
04000051046b001c01e0ffba01e0ffb101e0ffba01e0ffba06d0002e0984
00230400000008000000040000000800000002ab00000200000001550000
0400000002000000019a000000ab00000000000005c70051078d00290573
00490602003f0695004f0695004e05c7001005c700510400008005560023
0556004a031d004a038d001504420036000001020000ff420000fe840000
ff3a0000ffcb0448001705c7008705c7005105c700870517002903a20048
0000ff430000ffae0000ffae02870054000000000298ffba033d001e0000
ff3a0000ff480000ff490000ff7e0000ff4f0000ff4a0000fe9e05320039
05320039022cffb6022cffb60532003c0532003c022cffba022cffba0532
003905320039022cffba022cffba0532003905320039022cffba022cffba
0532003905320039022cffba022cffba0532003905320039022cffba022c
ffba0532003905320039022cffba022cffba049e0034047800300430ffba
0430ffba049e0034047800300430ffba0430ffba02be004f02be004f02be
006902be00690376000a0376000a073200400732004004deffba04deffba
0454003403c000460454ffba02e2ffba0454003403c000460454ffba02e2
ffba0454003403c000460454ffba02e2ffba0610002f0610002f0270ffba
0298ffba0610002f0610002f0270ffba0298ffba060e00290708002902e2
ffba0456ffba060e00290708002902e2ffba0456ffba060e002907080029
02e2ffba0456ffba02e2002102e200210352ffba0352ffba02e2002102e2
00210352ffba0352ffba0454003e0454003e022cffba022cffba0454003e
0454003e022cffba022cffba0454003e0454003e022cffba022cffba039c
0023039c002301e0ffba01e0ffba0376000a0376000a0376000a0376000a
073200400732004004deffba04deffba0473ffe60473004f02aa000f06aa
0016047300070473ffde038dfffc0335ffe8031d000b02aafff2038d0015
0400002502aa001e0427004a06c30026024d0017027b001704730017045f
003504f000170473002b0473004f02aa004204df004d047300440239002b
06aa004c0473004604730027038d004b031d005103a9ff85040000130400
002f038d00150400005c0499005c0473004f038d004f036b0041036b002f
038d00380239002a038d002e02e600000473003f03ab001b02b3001e0213
001e0213001f024b001e0205001e0190001e0190ffa60242001e029a001e
016b0012019b001e016b001e016b001201d60000016b001e016b001e0268
001e03ef001e03ef001f029affaa029a001d0296001e024b001e035b001e
01bd001e016bffba01b2001e029a001e02da001e029a00180279001e0265
000a023d001e023d001e028c001e023e001e025a001e0000fe1e0000fe1e
0000ff730000febc02aa00bf0256001e0212001e024b001e024a000a0212
001e0639005305c700100473002005c7005102aa00320477005704770057
047700570477005704770057047700570477005704770057027bffb0027b
ffd8027bffc4027bffd8027bffc4027bffeb027bffc4027bffeb0427000a
0427000a0427000a0427000a0427000a0427000a0427000a0427000a027b
ffd8027bffd8027bffda027bffda0427000a0427000a0427000a0427000a
03e400220454001a03ba00290556002b05c7003005bc000905560029038d
004f0400001602aaffc7069900510473004e05c70026038d004b05c70012
04000011038d002e038d004e038d002e0239002b0517002303a2002205c7
000e0400002f05c7000e0400002f043900470337003805f6000c047d000c
0000fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff140000
ff7b0000feb20758000503d50046038d002e055600230239001705560026
04e3003405c700260400ffff02aa00000639002b047300460639002e0473
004405560021038d001503ef003e052d002b03de004604fe00500000ff3b
0000ff510000ff080000fef90000fea40000fea40239002a0627002c05c7
001d0627002c0000fecb0000ff1d0000fef10000fef30000feec0000feec
0000fee80000fee60000feef0000fee80000fdb4063900500473004e0800
001205c700110610002b0000fe730696005004e5001308b8001206b10011
02aa00af02ff00230239008c0239008c040000990400009902aa00af02aa
00af02aa00af02aa00140000004600000036000000310000005600000044
000000560000004a00000049055600550400003403e100420368004c03e1
004003c1001d03fe002603dc002f0400004c03e7003b03f400430400003f
0439006702c1ffe70400003203b8001c0400003303e100450400004c03b8
001b040000480400003f0239002a04b0001c06630010067800100479003b
069000100439000a040600140444004e04a4001903c3000e038d000e04a4
004e04e70014025400170342001904a6001403c3000e05790010047bfff0
04f2004803fc001404f20048048900140393004803d1001d04830012043d
00120623001d0431000c043100120425001d05a4000005f6004803c30002
04f2004803fc001404a40019049d001f0439000a0439000a0439000a0439
000a0439000a0439000a0444004e03c3000e03c3000e03c3000e03c3000e
02540014025400170254ffe40254ffeb047bfff004f2004804f2004804f2
004804f2004804f200480483001204830012048300120483001204310012
0439000a0439000a0439000a0444004e0444004e0444004e0444004e04a4
001904a4001903c3000e03c3000e03c3000e03c3000e03c3000e04a4004e
04a4004e04a4004e04a4004e04e7001404e700040254ffe80254ffea0254
fffd0254001702540017059200170342001904a6001403c3000e03c3000e
03c3000e03c3000e047bfff0047bfff0047bfff004bc001404f2004804f2
004804f20048048900140489001404890014039300480393004803930048
039300480393004803d1001d03d1001d03d1001d03d1001d048300120483
0012048300120483001204830012048300120623001d0623001d0623001d
0623001d0431001204310012043100120425001d0425001d0425001d0439
000a05a4000004f200480439000a04060014038d000e03a6000a03c3000e
0425001d04e7001404f200480254001704a600140439000a05790010047b
fff003e9003704f2004804e7001403fc001403e9000c03d1001d04310012
0548002f0431000c0500001404c500270439000a03c3000e04e700140254
001704f2004804c50027043100120254ffeb0431001203c3000e0506001d
038d000e0444004e03930048025400170254ffeb03420019063f000a063f
00140500001d047900140468001004d500140439000a0414000804060014
038d000e045e000003c3000e063900000354002704d5001f04d5001f0479
00140496000a0579001004e7001404f2004804e7001403fc00140444004e
03d1001d046800100548002f0431000c04d70014047bfffe06d7001406d9
001404bc001d060c000e041d000e044800480704001404890000038d000e
02a8001e02a8007002a8004402a8004602a8003f02a8003f02a8003b02a8
003902a8004202a8003b02a8001f02a8007102a8004502a8004702a80040
02a8004002a8003c02a8003a02a8004302a8003c0481002f08c4004a05a0
002e04ed009d04ed009d069b002a04d5008505e30085023200a302320096
0232004e023200200232006702320031023200390232001e0232001e0232
00420232001c023200250232002e023200170232000b0d6500460e320046
0000ffba0f6200460000ff640000ff9a0000ffb40000ff9c049e00340478
00300430ffba0430ffba049e0034047800300430ffba0430ffba07320040
0732004004deffba04deffba0376000a0376000a049e0034047800300430
ffba0430ffba01bcffcc01e0ff6801bcffe601e0ff8205280097046f001e
022cffba022cffba05280097046f001e022cffba022cffba05280097046f
001e022cffba022cffba039c0006039c0006039c0006039c0006067f0044
067f0045067f0044067f0045049e0034047800300430ffba0430ffba0732
00400732004004deffba04deffba073200400732004004deffba04deffba
045400290454002902e2ffba02e2ffba044dffcb04a5ffcc043effd504a2
ffcd07b9003205ef003207230032051700350b75fb8b0000fe2c0000fffc
0000006b000000730000006b05280097046f001e022cffba022cffba060e
00290708002902e2ffba0456ffba060e00290708002902e2ffba0456ffba
05280097046f001e022cffba022cffba05280097046f001e022cffba022c
ffba05280097046f001e022cffba022cffba01a8fff504dd002b03d60012
0592004a042d00230639002004a4002c0639002e040000230a6600440471
00260473000508b7000c05fc000c07670034066000270815ffee05d30023
0639002e04e800460857000c06a3000c089d002b06bf004606390029049c
004605df002b0473004602aa004202aa00420427004a07d600290469002b
047a005003f9004c053500240450ffd8078d002905c70017069600260488
004f038d001f0428004a03d500050172ffe2040000130473006a05560021
0239002a0a0300880a0bffa70bcf000009fa00320f6200440196ffba0196
ffba0196ffba01e0000201a8003201a800460196ffba01a8001a0251003a
01a8002901a800460196ffba01a800480196ffba01a800290196ffba01a8
00460196ffba01a8006e0196ffba01f4006501f4001601f4001601f40011
01f4ffd2022e008d01f400430199004602bf004d02bf005504000009062f
002605c7002606590062067a003a05bf002605b500930518003a05c70026
07850026064f0062058b003a0489003a07dd003a05e6005005c8001c04fd
ffd305cf00820628001205c1007d06c9002605a100780618000605a10086
05d100260593008d06cd000005ca00a606ac002605d10026062800120565
0078057700260586005104bd003a074500780670ffda06180064073b008c
0199000c01fe004a0154ffd100f7ffd201a8ffa501daffd204750024068f
003504670045049b006204a2004c046f0000049b006203e80000046f0035
05df003504a9006e046f000002740046069600000465006d048600000486
0017043e005604a2004c046e0074048600350263ff9e0486004903590001
0486004c026d002106960035040e007104c9004c04860035048b0035067f
003504800046047e00610321004c067f003504a10024043b00500600005a
05350000023900af02f40010077a0045077a00450616000a090c003508f5
003508de0035091100350b1c003502f8001a02f8001a0463000304630003
056200060562000605620006056200060562000605620006056200060562
0006046c000a046c000a043affba046c000a046c000a043affba05320039
05320039022cffba022cffba049e0034047800300430ffba0430ffba0430
ffba0430ffba0430ffba0430ffba0610002f0610002f0270ffba0298ffba
04e6002704e600270270ffba0298ffba039c0023039c002301e0ffba01e0
ffba02e2002102e200210352ffba0352ffba05280097049e0011022cffba
022cffba05280097049e0011022cffba022cffba0339001903390019039c
0006039c0006036b002f036b002f0000ff1e0000ff480000ff1e0000fee7
0000ff4f0000fef90000ffb50000ff520000ff470000ffb50000ff520000
ff470000ff010000fea60000ff010000ff230000ff240000ff570000ff57
0000ff920000ff920000ff920000ff920000ff2f0000fed70000ff340000
ff3103e400220454001a0000ffae02ef002103b7003d0419003d04250016
0000ffad0000fefe028d00ab028d00a00479001904790019047900190479
0019047900190479001904790019047900190479001904e60027028d00ab
0327002202300014017a002e0000ff75040000160652004a05f4007600>
<000000000000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c000000bc000000bc00000292000003640000
04ac000005fc000006ce0000088e000009dc00000aa600000c8c00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0000
0dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc
00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc00000dcc0001
0000100502d2003c0094000600020010002f00560000089b02c400050002
0000000e00ae0000000300000000021a000000000003000000070076021a
0001000000000000010d02900001000000000003001d039d000100000000
0004001d03ba0001000000000006001d03d70001000000000007003b03f4
0003000004090001002c042f0003000004090002000e045b000300000409
0003003a04690003000004090004003a04a30003000004090006003a04dd
0003000104090000021e051700030001040900070076073500a900200032
00300031003400200054006800650020004d006f006e006f007400790070
006500200043006f00720070006f0072006100740069006f006e002e0020
0041006c006c002000520069006700680074007300200052006500730065
0072007600650064002e0020000d000d0048006500620072006500770020
004f00700065006e00540079007000650020004c00610079006f00750074
0020006c006f00670069006300200063006f007000790072006900670068
0074002000a9002000320030003000330020002600200032003000300037
002c002000520061006c00700068002000480061006e0063006f0063006b
002000260020004a006f0068006e00200048007500640073006f006e002e
002000540068006900730020006c00610079006f007500740020006c006f
00670069006300200066006f00720020004200690062006c006900630061
006c00200048006500620072006500770020006900730020006f00700065
006e00200073006f007500720063006500200073006f0066007400770061
0072006500200075006e00640065007200200074006800650020004d0049
00540020004c006900630065006e00730065003b00200073006500650020
0065006d0062006500640064006500640020006c006900630065006e0073
00650020006400650073006300720069007000740069006f006e00200066
006f0072002000640065007400610069006c0073002e00540069006d0065
00730020004e0065007700200052006f006d0061006e0020006900730020
0061002000740072006100640065006d00610072006b0020006f00660020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002ea9203230313420546865
204d6f6e6f7479706520436f72706f726174696f6e2e20416c6c20526967
6874732052657365727665642e200d0d486562726577204f70656e547970
65204c61796f7574206c6f67696320636f7079726967687420a920323030
33202620323030372c2052616c70682048616e636f636b2026204a6f686e
20487564736f6e2e2054686973206c61796f7574206c6f67696320666f72
204269626c6963616c20486562726577206973206f70656e20736f757263
6520736f66747761726520756e64657220746865204d4954204c6963656e
73653b2073656520656d626564646564206c6963656e7365206465736372
697074696f6e20666f722064657461696c732e4147474d43422b54696d65
734e6577526f6d616e50532d426f6c644d544147474d43422b54696d6573
4e6577526f6d616e50532d426f6c644d544147474d43422b54696d65734e
6577526f6d616e50532d426f6c644d5454696d6573204e657720526f6d61
6e20697320612074726164656d61726b206f6620546865204d6f6e6f7479
706520436f72706f726174696f6e2e004100470047004d00430042002b00
540069006d00650073004e006500770052006f006d0061006e0050005300
52006500670075006c00610072004100470047004d00430042002b005400
69006d00650073004e006500770052006f006d0061006e00500053002d00
42006f006c0064004d0054004100470047004d00430042002b0054006900
6d00650073004e006500770052006f006d0061006e00500053002d004200
6f006c0064004d0054004100470047004d00430042002b00540069006d00
650073004e006500770052006f006d0061006e00500053002d0042006f00
6c0064004d005400a9002000320030003100340020005400680065002000
4d006f006e006f007400790070006500200043006f00720070006f007200
6100740069006f006e002e00200041006c006c0020005200690067006800
740073002000520065007300650072007600650064002e0020000d000a00
0d000a0048006500620072006500770020004f00700065006e0054007900
7000650020004c00610079006f007500740020006c006f00670069006300
200063006f0070007900720069006700680074002000a900200032003000
3000330020002600200032003000300037002c002000520061006c007000
68002000480061006e0063006f0063006b002000260020004a006f006800
6e00200048007500640073006f006e002e00200054006800690073002000
6c00610079006f007500740020006c006f00670069006300200066006f00
720020004200690062006c006900630061006c0020004800650062007200
6500770020006900730020006f00700065006e00200073006f0075007200
63006500200073006f00660074007700610072006500200075006e006400
65007200200074006800650020004d004900540020004c00690063006500
6e00730065003b002000730065006500200065006d006200650064006400
6500640020006c006900630065006e007300650020006400650073006300
720069007000740069006f006e00200066006f0072002000640065007400
610069006c0073002e00540069006d006500730020004e00650077002000
52006f006d0061006e002000690073002000610020007400720061006400
65006d00610072006b0020006f006600200054006800650020004d006f00
6e006f007400790070006500200043006f00720070006f00720061007400
69006f006e002e000000410c00540415029a001d001f0415041504140413
003c001f0413b3061d1f20b8040cb30c0e3220b8040cb2131732b8040bb3
28201f0f41100412008004120002000f0412003f0412005f04120003005f
0412000100400412b2783340b80412b2723340b80412b26e3340b80412b2
6a3340b80412b2543340bc0412004a0033ffc00412b317183240b80412b3
0a0c3280b80412b308093240b80411b25a33404109041100560033ffc004
1100530033ffc00411b2503340b80411b24d3340bc041100470033ffc004
11b344453240b80411b2423340bc0411003e0033ffc00411b23a331f4124
041100200411004004110070041100af041100f004110006000f0411002f
04110090041100ff04110004002f041100400411007f0411008f041100a0
041100e004110006ffc00411b208330f411b0410008f04100002000f0410
001f0410002f0410000300600409000100b004090001000f0408003f0408
004f0408009f04070004040ab2006c1fb9ffc00403b345453240b80403b3
2b2e3240b80403b2282932b9ffc00403b21a1c32bd040302990027001fff
c00401b2161b32b9ffc00400b2424232b9ffc00400b2363832b9ffc00400
b32a2d32df410a040000ef04000002040004010028001fffc00401b3282e
32f0bf0401000103fe000f0101001fffc003fcb310143240b803fdb30f13
3240411003f9005003f9000200b003b100c003b10002006f03f5007f03f5
0002ffc003afb22d3132b9ffc003afb30a0e3210411003ef002003ef0080
03ef000300a003ef0001002003ef004003ef0002ffc003efb313163240b8
03e7b20f1132b9ffc003dfb2303432b9ffc003dfb310183250411403dc00
0103c903d20023001f03e203d2001e001f03c703d2001d001f03c603c800
0d001fffc003a4b30f103280411003a3000103a303790029001f03a5037a
0032001f03a8037e001b001fffc003d9b20e1132b9ffc003d9b2282a3241
0a03a7037c0032001f037303710034001f036c036bb2321f20bb03a40001
004003ecb3090b3240b803ecb2101532bd03e9036b0014001f03e4036bb2
171f0fbd036e002f036e0002ffc003b8b3090d3290410c03b800a003b800
02001f03d20001009f03d20001004003d2b2090b32410a03a90380001600
1f03cf03810015001f03aa0382b2151fc0bb03f70001004003f6b3090d32
40b803a2b2083340b803a2b30d0e32c0410903a2000100b003f200c003f2
0002ffc003f4b3263832004126038c0030038c0002002003e3003003e300
02001003ee003003ee005003ee006f03ee007f03ee009f03ee0006000003
ed003003ed0002002f03de007003db009003db009f03de0004ffc00379b2
0f1032b9ffc00379b2242832b9037d037cb2321f10bb037e0001ffc0037e
b3090e3240b8037cb2121332b9ffc0037cb30c0e323fbd03d7004f03d700
02004003d8b31718326fbb038e000100400390b3181b3240b803d4b2090c
32bd037b037a0032001fffc0037ab20e1132bd038003820016001f038103
82b2151fb0be03820001000f03830001004003ffb30c11327f4114035400
01006f0354008f035400d0035400ef03540004000f0354002f0354005f03
54000300400350b30e0f320fbb035a000100400349b20e331fbd0348007f
03480002ffc00348b2152232b9ffc00347b2152232b9ffc0040fb21b1e32
beffc0040f002d01000032040e0406b22f1f51bb034b0001034f034eb264
1f40b80351b20e0f32b9ffc0034eb3383a3230bb034e0001ffc0034eb21f
2332b9ffc0034eb2131932b9ffc00346b2091132b9ffc00343b30a11320f
bb03440001ffc0032bb2080e32b9ffc0032bb2161b32b9ffc0032ab31417
321f4110033a0001000f0333000100000337002003370030033700800333
0004ffc00332b310123250416403320001004003320060033200a0033200
b00332000400100332003003320050033200e003320004000f0336007f03
3600ff033600030070033600f003360002000f0331003f0331008f033100
bf033100e003310005000f0331006003310002008f033000010060033000
90033000020050032f00010010032f0040032f0060032f0080032f00a003
2f00c0032f00f0032f000700cf032d00ff032d00020030032d0080032d00
b0032d00df032d0004006f032c007f032c00020012032000fd0800001f00
7f0299403a017f007f017f027f037f047f057f107f11084035252c32406a
252c32402e252c324028252c323760097009800903300940095009031009
200902b8ffc0b2073a33b8ffc04012063a33da4dea4dfa4d031237900690
0702cf410c011100df011100ef0111000300cf011000df011000ef011040
8703cf3edf3eef3e03cf4ddf4def4d03cfdedfdeefde03cf2ddf2def2d03
404d1b3a32375f016f017f018f01041f012f013f014f01045f036f037f03
8f03041f032f033f034f0304600b700b800b03300b400b500b03100b200b
02900ba00bb00bc00bd00b05b006c006d006e006f0060550066006700680
069006a006061f072f073f07400604f0414302db000100a002db00b002db
0002008002db009002db0002001002db000100c002db00d002db00020090
02db0001006002db007002db0002004002db005002db0002002302db0030
02db000202db002300a002da0001008002da009002da0002004002da0001
002302da003002da000202da0023000002d90001007002d9009002d90002
02d9401c2230244024021024202402002401f02401d024e02402b024c024
02c0413a02d8000100a002d800b002d80002008002d8009002d800020023
02d8003002d8000202d8002300c002d7000100a002d700b002d700020080
02d7009002d7000200a002d700b002d70002008002d7009002d700020060
02d7007002d70002004002d7005002d70002002302d7003002d7000202d7
b223370f4117029b0001005f029b009f029b00df029b0003002f029b003f
029b006f029b0003001f029b0001029b029b0040029ab3272c3280b8029a
b2263340b8029ab2223340b8029ab21e3340b8029ab21c3340b8029ab319
1a325f410f029a009f029a00df029a0003000f029a001f029a003f029a00
03ffc00299b2443340b80299b23d3340b80299b23a33df41390299000100
5f029900af02990002004f0299009f02990002002f0299003f0299000200
af02990001000f0299003f0299000200b0029900e0029900020070029900
a002990002004f0299005f02990002000f0299001f0299002f0299003f02
990004029a029a02990299000f027a002f027a400b020016160000001211
0812b802bab269121fb802b4b228101fb802b3b228101fb802b2b228101f
411302030023000d01ee0023000d01ae0023000d019f0023000d01940023
000d01570023000d010f400b230df9230dc5230da7230d410a024a002400
0d01f00024000d01e90024000d016a400e240de8240dc6240da3240da224
0dbb01e30022000d0121401a220de5220ddd220db7220daa220d93220d5c
220d51220d4c220d410a02280020000d021d0020000d015e0020000d011c
4017200dfc200de1200dcb200dc8200da1200d59200d3a200d410a01f200
34000d019c0034000d01970034000d0135b7340d1f340d1d340dba020200
0f015bb20f0009bb0202015b000d030ab22a3e1fb80309b22a3e1fb80221
b24d251fb8021cb24d411fb8021bb24d521fb8021ab24d721fb80213b24d
931f4109020f01b10401001f020e01b10801001f020cb22a811fb8020bb2
2a811fb80208b22a5e1fb80205b22a391fb801feb22a231fb801fbb2661d
1fb801fab2661e1fb801f6b266341fb801f5b266341fbc01f30066020100
1f01f1b2669e1f410901ea00280801001f01e7002602ab001f01b8b24d3f
1fb801b7b24d931f410901b4003e0125001f01b200400401001f01acb22a
721fb801a8b22a281fb801a7b22a241fb801a6b22a241fb801a3b22a1f1f
b801a1b2662e1fb8019eb266931fb8019db266e41fb8019ab2286c1f4109
019900280401001f019800260401001f0173b24d1b1fb80171b24d241fb8
0170b24d2f1fb8016fb24d351fb8016bb23ecd1fb80169b23ee41f410901
6701b1019a001f0166002a02ab001f0161b2662a1fb8015fb2669e1f4109
015d0028019a001f015c00350401001f0147b24d391fb80146b23ecd1f41
0d0145003e0125001f014401430101001f014201b102ab001f0140b22a30
1fb8013eb22a261fb8013db2661d1fb8013cb2662b1fb80138b228811fb8
0137b2289e1fbc01360028019a001f0129b24d721fbc0124002a0201001f
0123b22aab1fb8011fb266291fb8011eb266451fb8011bb228811f410901
13003e0125001f0112003e0401001f0111b22a291fb80110b22a201fbe01
0b0066019a001f010a0026019ab61ffd4d721ffb3eb80156b21ffa40b808
01b21ff728b80801b61fec4d621feb4db80401b21fea40b802abb61fdf4d
721fde3eb802ab400b1fdc2ae41fdb66221fca2ab80401401b1fc92a2e1f
c326791fb828bb1fb34d1e1fb166291fb066621faf66b80401b21fae26b8
02abb21fa828b80201400b1fa0664c1f982a2b1f9726b8019ab61f926629
1f8740b802ab401b1f852a791f8226811f754d931f744d891f732a1d1f70
285e1f6a28b8040140171f692a521f682a201f6766291f6566671f612a93
1f6035b80801b61f5e2acd1f5335b80801b21f4b66b80156b21f493eb808
01b61f4866521f4626b80201b21f3f66b80156400b1f3b66341f322a931f
2e35bb0401001f002d0143b3cd1f5537bc022f0007018000070172402e07
bd077e076207540742072f072707250721071e071408120810080e080c08
0a0808080608040802080008000214b8ffe0402b00000100140610000001
000604000001000410000001001002000001000200000001000002010802
004a00b013034b024b5342b0372b4bb807ff52b0382b4bb008505b58b101
018e59014bb0c063004b6220b0f65323b8010a515ab005234201b0124b00
4b544218b0382bb00288b801005458b801ffb101018e851bb0124358b900
01012c858d1bb900010146858d59590016763f183f123e113946443e1139
46443e113946443e113946443e11394660443e113946604445442b2b2b2b
2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0
aa1d59b0324b5358b0ff1d594bb02953205c58b9026c026a4544b9026b02
6a45445958b90168026c455258b9026c01684459594bb03b53205c58b900
3e026b4544b9004d026b45445958b9025c003e455258b9003e025c445959
4bb03b53205c58b901b1003e4544b13e3e45445958b9024f01b1455258b9
01b1024f4459594bb05a53205c58b90143003e4544b13e3e45445958b903
8b0143455258b90143038b4459594bb09e53205c58b9002a026c4544b900
40026c45445958b9056c002a455258b9002a056c4459594bb01853205c58
b126264544b1662645445958b13226455258b126324459594bb05153205c
58b126264544b1282645445958b1ad26455258b126ad4459594bb8010153
205c58b126264544b1352645445958b902280026455258b9002602284459
592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b01b3
3d766e58456523456023456560234560b08b766818b080622020b16e7645
65234520b003266062636820b003266165b076236544b06e234420b13d58
4565234520b003266062636820b003266165b058236544b03d2344b10058
455458b158406544b23d403d4523614459b34e8138714565234560234565
60234560b089766818b080622020b138814565234520b003266062636820
b003266165b081236544b038234420b14e714565234520b0032660626368
20b003266165b071236544b04e2344b10071455458b171406544b24e404e
45236144594b5242014b5058b108004259435c58b108004259b3020b0a12
4358601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59
b00c2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e23
42b00f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b011
2342007418456944456944737373737474757575752b2b2b73732b2b2b2b
2b2b18456944737373742b45447373737373747474454473747474747474
757575454473754544737374744544737373737374747474007575757575
7575757575752b2b74747474747400732b4358b14d4d451869441bb8ffc0
b34d1b3a322b5973002b2b7575752b2b2b2b2b0073732b435c58b8ffc0b2
071633b8ffc0400b061633d54de54df54d03c0410c011100d0011100e001
11000300c0011000d0011000e00110401e03c03ed03ee03e03c04dd04de0
4d03c0ded0dee0de03c02dd02de02d03372b74747474747473002b2b5901
73737473747374737473747374752b737573002b2b2b01732b2b2b2b752b
2b2b732b2b2b002b2b742b732b7373742b73732b2b2b2b2b2b732b732b2b
2b742b2b2b73737373732b73732b2b2b73002b2b2b2b7374732b732b2b2b
2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b2b7374752b2b7373732b
2b2b752b2b732b2b2b2b2b2b2b2b2b2b73747573742b7374752b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b002b2b4569442b2b00>
[3533 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 188 19 <0002004affe403b505680016002b014a4019091b061f062509291707181b
1520152518290907080177081db8010ab2120527b8010ab3060d1217b803
0a4025004024263400402b2e34004033363400403b3d3440005000a00003
001a2d120f221f220222b8030a400e8f0d010d401315340d192cf5f1182b
4e10f62b724ded5d43584017224024273422402b2e34224033363422403b
3d346f2201712b2b2b2b594e10f6712b2b2b2b4ded4358b90017ffc0b324
273417b8ffc0b32b2e3417b8ffc0b333363417b8ffc0b53b3d3460170171
2b2b2b2b59003fed3fed313043794062012a20211f2102060f0e100e0206
2423252302060b0c0a0c090c080c040615161416020619181a181b180306
02010301040103062a2b292b02061e1122620026072262001c1317620128
05176201210e1d6201230c27620018161d62012b012762002b2b2b2b012b
2b2b2b2a2a2a2a2a2a2a2a81007101710114070e02232226272627263534
373636333216171605102726272623220706061110171616333237363703
b53922739256629e3d2c212b3e33d07476cd3043fecc040a2619382b1925
1a140f382e32192a0602a6cbb06c8a51645d447199a3ddb999a3a188bbdc
01643b8b31201823b1fdeffee062473020387500>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 108 17 <0001005affe701a70134000b0022b40049060b03b80113400b2009300902
09190c6f89182b4e10fc5d4ded003fed3130013216151406232226353436
0100466162454561610134624545616145456200>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 658 20 <0001008700000363056800170083bc000e01ad0135000801a5b6225f076f
070201410d01ad0135000701f90023001601a5000f01f700150135001602
02400e0f08000508070c000f011f010201b8030940100e0e500f6f0faf0f
03100f010f19180ebe0200000802c60018021701df00182b10f6e44e10f4
5d5d3c4d10fd5d3c003f3c3f1239f5edfc01f52b015d2b31300111141616
33331521353332363635113426262322072725029b16464d1ffd3624574a
1a12312033491201f30568fbab7d452c252528468002bf5e2f212024e400
>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
2 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g19 19 def
/g17 17 def
/g20 20 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 32 /g19 put
dup 33 /g17 put
dup 34 /g20 put
pop
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT /PBAAAA+TimesNewRomanPS-BoldMT findfont ct_VMDictPut
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 221{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
82.92 376.82 mo
( !")
[7.98 3.99 0 ]xsh
148.68 359.721 mo
148.68 355.221 li
@
148.68 355.281 mo
148.74 355.281 li
148.74 355.221 li
148.68 355.221 li
cp
f
148.68 7.64069 mo
148.68 12.0807 li
@
148.68 12.1407 mo
148.74 12.1407 li
148.74 12.0807 li
148.68 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 868 21 <000100320000039c0568001c00e840248802ae02ac0303270c9503020a0b
0a0b0100051b12a016b41602161c020217010a0b081cb80160b6122f17b0
170217b80122b2011208b8ffc0b30b0d3408b80324b40e05010c03b801f4
401b000510050205dc12d30f1c01bf1c011c1a1e0f0101bf010101191dba
0158019000182b4e10e45d7110f65d714df4fd5de4003f3fed2b435c5840
130840160d3f0840170e3f0840190f3f08400d392b2b2b2b5910fd5d435c
58b90017ffc0b3160d3f17b8ffc0b3170e3f17b8ffc0b31b103f17b8ffc0
b21c113f2b2b2b2b59e4113939111239011112395d1139123911393910c9
3130015d005d212135001235342623220727363633321616151407060121
32363637330350fce2016f9d825e9a552536dc9067aa604a65feac01256c
412a22241601b5012e90698b9a0dc0b860a7498589b9feb5122b4500>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g21 21 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 35 /g21 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 220{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
138.72 376.82 mo
( !#)
[7.98 3.99001 0 ]xsh
204.48 359.721 mo
204.48 355.221 li
@
204.48 355.281 mo
204.54 355.281 li
204.54 355.221 li
204.48 355.221 li
cp
f
204.48 7.64069 mo
204.48 12.0807 li
@
204.48 12.1407 mo
204.54 12.1407 li
204.54 12.0807 li
204.48 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 1196 22 <00010021ffe3038a0568002b00cf401f070f170f682b792b851585169b13
9516a912a616ba130b2d1c3f1c02140801b8019540090000100002000021
0b410901600008002102cc002602ce001a0008ffc0b30d113408b8ffc0b3
12153408b802ceb6400e051a0d0014b80213b4200101050aba0195000b01
1ab61e000510050205b8030ab711d3002910290229b8030a40110f170117
1a2d0f1e011e401315341e192cba0158019000182b4e10e42b7110f6714d
ed5df4ed5d10f4fd11392f191aed3c00183f3f1aed2b2b10fde410e41239
2f5ded12393130015d005d01353e02353426232207273636333216151406
071616151400212227263534363332171616333236353426012f72584079
5a8c622548e18a8db7555b757bfecdfefeac4f39422b211d10c3554a6ac0
02a8232139753c5377940da7a8ac734b8b3539a77ed4fed739283f2e410e
089f755a89e7>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g22 22 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 36 /g22 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 /g22 219{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
194.52 376.82 mo
( !$)
[7.98 3.99001 0 ]xsh
260.28 359.721 mo
260.28 355.221 li
@
260.28 355.281 mo
260.34 355.281 li
260.34 355.221 li
260.28 355.221 li
cp
f
260.28 7.64069 mo
260.28 12.0807 li
@
260.28 12.1407 mo
260.34 12.1407 li
260.34 12.0807 li
260.28 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 1532 23 <00020033000003ad0568000a000d009940183f0d01330101030004020709
0a05080d0c0004080d0d0b0bb8015c40100001140000010b000107080b0d
010400bb01fc0005000a0210400c080105080c0d000810080208bb030900
020007016040182f043f04020f041f0402041a0f004013153400190ef5f1
182b4e10e42b10f65d5d4df43cfd5d3c003f3f10f43cf63c113939011112
391239872e2b047d10c40f0f0f3130015d005d1301331133152311211121
3721113302847a7c7cfeedfe1561018a01ff0369fc97cffed00130cf0217
>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g23 23 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 37 /g23 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 /g22 /g23 218{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
250.32 376.82 mo
( !%)
[7.98001 3.98999 0 ]xsh
316.08 359.721 mo
316.08 355.221 li
@
316.08 355.281 mo
316.14 355.281 li
316.14 355.221 li
316.08 355.221 li
cp
f
316.08 7.64069 mo
316.08 12.0807 li
@
316.08 12.1407 mo
316.14 12.1407 li
316.14 12.0807 li
316.08 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 1742 24 <00010045ffe403b3054c00220150402e0e0601090a190a2800280304140a
151b151c0338064906b705030b05011a1b0a1c041d101b0a1c1d04011a04
0303b8015c4010002214000022120f2201002210220222b80309b4120004
0104b801efb6122003bf030203b80122b30100041ab8019a400a0f131f13
0213dc0c0d02b802c8b301d10800bb02060022001d01f5401a40085008a0
0803081a2410d18f22012240131534221923f5f1182b4e10f42b724de410
f671ed10e410f4e4003fed5ded3f3cfd5d435c58401403401c113f03401b
103f0340170e3f0340160d3f2b2b2b2b59fe71435c58b90004ffc0b31c11
3f04b8ffc0b31b103f04b8ffc0b3170e3f04b8ffc0b3160d3f04b8ffc0b2
140c3f2b2b2b2b2b59ed5d71435c58401e22401c113f22401b103f224017
0e3f2240160d3f2240140c3f2240120b3f2b2b2b2b2b2b5987052e2b7d10
c400111217390111121739313000715d01725d7101210321070417161514
060423222726353436333216171617163332363534242122070138027b65
fdea330159ba998efefe9aa6593e412b2750613d2c1f275273fea0fef41b
36054cfefe870d9f83c37def813e2c382b4220442a100c7854b0dc01>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g24 24 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 38 /g24 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 /g22 /g23 /g24 
217{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
306.12 376.82 mo
( !&)
[7.98001 3.98999 0 ]xsh
371.88 359.721 mo
371.88 355.221 li
@
371.88 355.281 mo
371.94 355.281 li
371.94 355.221 li
371.88 355.221 li
cp
f
371.88 7.64069 mo
371.88 12.0807 li
@
371.88 12.1407 mo
371.94 12.1407 li
371.94 12.0807 li
371.88 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 2190 25 <0002004cffe403c205680017002700cf400914030166167616020ab8fff8
40151214342a032415c715033f08052218181f05092615bd02ca00010195
00000009019ab526261000051fb8010ab4100d22dc0cb801e1b3001a2918
b802c9b50f1a1f1a021ab8030a400b1440131534141928f5f1182b4e10f4
2b4ded5ded4e10f64df6ed003fed3f12392fed10ede41112391239011112
3931304379402e1b250a1324261c1b1d1b020612250e26250a2262011e11
1a6200200f226201230b2662011b131f6200210d1f6200002b2b2b012b2b
2b2b2b2a2b8181005d2b015d5d01150e0207363736333216151406062322
2602353412240106151412171633323635102726232203c2b5db7f232c1d
414298cb6eca737dd477db0193fec908352e212d2e48432b492805681c2e
91cf991e0914ddbf86e07a8901089be40189e9fd6e8a408afefe34256ba4
01146944>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g25 25 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 39 /g25 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 /g22 /g23 /g24 
/g25 216{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
361.92 376.82 mo
( !')
[7.98001 3.98999 0 ]xsh
427.68 359.721 mo
427.68 355.221 li
@
427.68 355.281 mo
427.74 355.281 li
427.74 355.221 li
427.68 355.221 li
cp
f
427.68 7.64069 mo
427.68 12.0807 li
@
427.68 12.1407 mo
427.74 12.1407 li
427.74 12.0807 li
427.68 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 2524 26 <00010045ffe403cf054c000a0096400b0009190502060807090a0ab8019e
400f0001140000010a0100030907010807b801f4400c122002bf02020002
10020202b80122b609090804000c06b802cb400a091a0c90070107f60bf5
b9019100182b10e65d4e10f64de4003f3f3c10fd5d5d435c58401402401c
113f02401b103f0240170e3f0240160d3f2b2b2b2b59e412390111121739
872e2b7d10c4011139393130015d0501212207060723132101016b0171fe
e7a5533a2626620328fe391c045f2b1e5301a5fa9800>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g26 26 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 40 /g26 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 /g22 /g23 /g24 
/g25 /g26 215{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
417.72 376.82 mo
( !\()
[7.98001 3.98999 0 ]xsh
483.48 359.721 mo
483.48 355.221 li
@
483.48 355.281 mo
483.54 355.281 li
483.54 355.221 li
483.48 355.221 li
cp
f
483.48 7.64069 mo
483.48 12.0807 li
@
483.48 12.1407 mo
483.54 12.1407 li
483.54 12.0807 li
483.48 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 2726 27 <00030048ffe403b80563001700240032014f4028030c0413110c1413450c
68267926072501371756327704830284199a0d9b24aa0daa24b808b6140c
b1060243545840170903150f2a31221b0c2518000c34330c251800041f2e
1fb8010ab212052eb8010ab1060d003fed3fed1112173901111217391b40
352b003f00340c03530c5025630c730c830005250c0d0d32182424000c0f
1825312200151b0c400f10025525180c0004061232012424b8030940150d
32140d0d3201240322320d310f0d24013204061fb8010ab212052eb8010a
b2060d1bb8ffc0b30b0d341bb80300401d153031dc40035003a00303031a
340f221f220222dc0f302a40090d342ab80300400e8f0901094013153409
1933f5f1182b10f62b72ed2bf4ed5d10f671edf4fd2b003fed3fed121739
011112393911123939870e2e2b870e7dc400111217392b01111239111239
391239070e103c870e10c4c4005d015d593130005d015d01161615140623
222635343637262635343633321615140607363635342726232206151416
030607060615141616333236353402ba8f6ff7d4c9dc7f94a15be7c9c2d1
71c32524382a4a435e692d1f0d142030592f496402fe69b575a4e3c68f6d
a4447b9c6788cfb780609308327c4a8245356148499dfec81c172386495e
7f386b5dc200>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g27 27 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 41 /g27 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 /g22 /g23 /g24 
/g25 /g26 /g27 214{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
473.52 376.82 mo
( !\))
[7.98001 3.98999 0 ]xsh
539.28 359.721 mo
539.28 355.221 li
@
539.28 355.281 mo
539.34 355.281 li
539.34 355.221 li
539.28 355.221 li
cp
f
539.28 7.64069 mo
539.28 12.0807 li
@
539.28 12.1407 mo
539.34 12.1407 li
539.34 12.0807 li
539.28 12.0807 li
cp
f
%ADOBeginSubsetFont: PBAAAA+TimesNewRomanPS-BoldMT AddGlyphs
ct_T42Dict begin
systemdict /gcheck known {currentglobal PBAAAA+TimesNewRomanPS-BoldMT gcheck setglobal} if
2 3212 28 <0002003fffe403b705680016002800c0401b0a031a032a03039809a809b8
09c80c0444080517230508171f2701bb019500000008019ab32727001fb8
010a400c0f05000d17d1001910190219b8030a4012131a2a23dc0bd10140
131534011929f5f1182b4e10f42b4df4ed4e10f64dfd5de4003f3fed1239
2fed10ed1112391239011112393130437940321a26091221250d2611251b
1a1c1a1d1a03062526200e2362001e101962012609236200220c1f62011a
121f6201240a276200002b2b2b012b2b2b2b2a2b2b2b8181005d015d1735
3e0237060623222635343636333216121514020401363534272627262322
07061510171633323fa6e7871b3e57309acd6fce6f77d47ecdfe6a01290a
2a182f1928321c27422b49271c1c2694da8e2019dec186df7b88fefea5d6
fe78ed02887055b69d5729162b3ba6feeb694400>PBAAAA+TimesNewRomanPS-BoldMT AddT42Char 
PBAAAA+TimesNewRomanPS-BoldMT /CharStrings get begin
/g28 28 def
end
PBAAAA+TimesNewRomanPS-BoldMT /Encoding get
dup 42 /g28 put
pop
systemdict /gcheck known {setglobal} if
end
%ADOEndSubsetFont
/XJRSOP+TimesNewRomanPS-BoldMT*1 
[32{/.notdef}rp /g19 /g17 /g20 /g21 /g22 /g23 /g24 
/g25 /g26 /g27 /g28 213{/.notdef}rp]
XJRSOP+TimesNewRomanPS-BoldMT nf
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
529.32 376.82 mo
( !*)
[7.97998 3.98999 0 ]xsh
92.88 359.721 mo
97.32 359.721 li
@
97.32 359.781 mo
97.38 359.781 li
97.38 359.721 li
97.32 359.721 li
cp
f
539.28 359.721 mo
534.78 359.721 li
@
534.78 359.781 mo
534.84 359.781 li
534.84 359.721 li
534.78 359.721 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
82.02 365.36 mo
( )sh
92.88 315.681 mo
97.32 315.681 li
@
97.32 315.741 mo
97.38 315.741 li
97.38 315.681 li
97.32 315.681 li
cp
f
539.28 315.681 mo
534.78 315.681 li
@
534.78 315.741 mo
534.84 315.741 li
534.84 315.681 li
534.78 315.681 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 321.32 mo
( !")
[7.98 3.99 0 ]xsh
92.88 271.701 mo
97.32 271.701 li
@
97.32 271.761 mo
97.38 271.761 li
97.38 271.701 li
97.32 271.701 li
cp
f
539.28 271.701 mo
534.78 271.701 li
@
534.78 271.761 mo
534.84 271.761 li
534.84 271.701 li
534.78 271.701 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 277.34 mo
( !#)
[7.98 3.99 0 ]xsh
92.88 227.661 mo
97.32 227.661 li
@
97.32 227.721 mo
97.38 227.721 li
97.38 227.661 li
97.32 227.661 li
cp
f
539.28 227.661 mo
534.78 227.661 li
@
534.78 227.721 mo
534.84 227.721 li
534.84 227.661 li
534.78 227.661 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 233.3 mo
( !$)
[7.98 3.99 0 ]xsh
92.88 183.681 mo
97.32 183.681 li
@
97.32 183.741 mo
97.38 183.741 li
97.38 183.681 li
97.32 183.681 li
cp
f
539.28 183.681 mo
534.78 183.681 li
@
534.78 183.741 mo
534.84 183.741 li
534.84 183.681 li
534.78 183.681 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 189.32 mo
( !%)
[7.98 3.99 0 ]xsh
92.88 139.641 mo
97.32 139.641 li
@
97.32 139.701 mo
97.38 139.701 li
97.38 139.641 li
97.32 139.641 li
cp
f
539.28 139.641 mo
534.78 139.641 li
@
534.78 139.701 mo
534.84 139.701 li
534.84 139.641 li
534.78 139.641 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 145.28 mo
( !&)
[7.98 3.99 0 ]xsh
92.88 95.6007 mo
97.32 95.6007 li
@
97.32 95.6607 mo
97.38 95.6607 li
97.38 95.6007 li
97.32 95.6007 li
cp
f
539.28 95.6007 mo
534.78 95.6007 li
@
534.78 95.6607 mo
534.84 95.6607 li
534.84 95.6007 li
534.78 95.6007 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 101.24 mo
( !')
[7.98 3.99 0 ]xsh
92.88 51.6207 mo
97.32 51.6207 li
@
97.32 51.6807 mo
97.38 51.6807 li
97.38 51.6207 li
97.32 51.6207 li
cp
f
539.28 51.6207 mo
534.78 51.6207 li
@
534.78 51.6807 mo
534.84 51.6807 li
534.84 51.6207 li
534.78 51.6207 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 57.2604 mo
( !\()
[7.98 3.99 0 ]xsh
92.88 7.64069 mo
97.32 7.64069 li
@
97.32 7.70068 mo
97.38 7.70068 li
97.38 7.64063 li
97.32 7.64063 li
cp
f
539.28 7.64069 mo
534.78 7.64069 li
@
534.78 7.70068 mo
534.84 7.70068 li
534.84 7.64063 li
534.78 7.64063 li
cp
f
XJRSOP+TimesNewRomanPS-BoldMT*1 [15.96 0 0 -15.96 0 0 ]msf
70.02 13.2804 mo
( !\))
[7.98 3.99 0 ]xsh
92.88 7.64069 mo
539.28 7.64069 li
@
539.28 7.70068 mo
539.34 7.70068 li
539.34 7.64063 li
539.28 7.64063 li
cp
f
92.88 359.721 mo
539.28 359.721 li
@
539.28 359.781 mo
539.34 359.781 li
539.34 359.721 li
539.28 359.721 li
cp
f
539.28 359.721 mo
539.28 7.64069 li
@
539.28 7.70068 mo
539.34 7.70068 li
539.34 7.64063 li
539.28 7.64063 li
cp
f
92.88 359.721 mo
92.88 7.64069 li
@
92.88 7.70068 mo
92.94 7.70068 li
92.94 7.64063 li
92.88 7.64063 li
cp
f
%ADOBeginSubsetFont: XJRSOQ+KaiTi-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (XJRSOQ+KaiTi-GBK-EUC-H)
%%Title: (XJRSOQ+KaiTi-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /XJRSOQ+KaiTi-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-47 -184 1031 859} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 28562 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 2 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
0 <001C60D8A8C9B5EE310300013909A50A2AB7EE3C36B6EFE4BFA05B0B1D6F8
CE08BF0CAB16ED4> |
4604 <001C60D8A8C9B5EE3102AE1149E0631DA456F0FB36BFE2DE9775275466
09CEAC95554C743A84D32F5A55714DC6F78678760D13B5913B7186A8C7825AA4
C2F7524B3013312DC5B5371CC59E5DDCE9C1B5596BF44275658F67F532A5ACDA
C2844356DF671AF8539C52A84C75442D4A651995E0632C95B51994200E61B816
506680A194FD80B4413664988791886CD6EC29A3BAB405EC99408D656C51DE89
D41105BCC64834DCC1E276D1A7B56C9EC2B312D89EC524E3D1808B40C9E2BBB7
2A6DD409C91F7D847B9E339AF7EBED7D3880DED9ADDBFD20C1126DEA77345F69
8D93E5CA6925C40F9131C1D55F4CA6A4DA4B0CFC8C80E9185AC7C0D98A9C7D72
CD336BF78D6AF8771F7D94178C6826BF74F5279F563FBF80B9CF37786FA2CF23
6E65486FE62852525A2269005DFB4E33320CEAC6285221986010F91E92FC1457
E25B6512261B55589BA3D2CED7D90C2DE9889EA5EB70B358D8C50C7319063A81
76010CBB51B4E902FEBA60821DABBC27C62764673E1DDD118AF931CE78F33282
099F81065C574F8E211C9E49B9799C47350C1458432D6ADCD809E9A1AD0231A4
2A90FFDF5B65336F5356F45A5322FF7EA3BEEFFC9822CF677D344BA7DD1F7978
906F6D0D348714884A899CFF5D6F9B26C089E0259C754A6C4C275CF9DBCAED27
A7CC2A6D1AEF2955A9594DC8DAA328AB0F8E0876F1E4FF27BB502F3FB6693EC3
263E9F4B6576534D464106C717B41FDF3C56598DC3990B62D4D2FE88C74DEAAF
3C2F6BB39BCEACA418B9A553D78926CAE7B81E8A842F3AEA00D3FBC47811CFEC
01AA887C3E99937DF22E24C3C2FF6027C523E94F2ABD0D2F557AE918B5CB821E
8F2E816E9F4E626DF7D220D9C907BC81D166EEE89990A9AD5A348EB902D4B228
D557A7F1F28DA52C85471D9C6CEA8903> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /XJRSOQ+KaiTi-GBK-EUC-H-Identity-H /Identity-H 0 [/XJRSOQ+KaiTi-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
291.96 402.02 mo
(\021\374)sh
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
291.96 402.02 mo
(\021\374) false chp
.48 lw
0 lj
1 ml
@
%ADOBeginSubsetFont: XJRSOQ+KaiTi-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XJRSOQ+KaiTi-GBK-EUC-H 1 GetGlyphDirectory
5340 <001C60D8A8C9B5EE3102D37545E91971EA1F78076E63ADD2695BABF3B0
54FC8E9DC500B645AB1CE7B88D4626C239F2A3F7D234CBA9D01AC55C33393031
6903942F6DF5A6DFC431A04A974CC13E10F7E7C261879AA66BB6E8804F09C7C8
8E3F3620C8ACFFF11AF309D65E02BF94B22824B4AE65BB55CE83E28FE58A1B70
5238C8534FCE537E2B42633933A744FE5EFD76EEFA153DBD1B6B0D898AB6EF43
67F17C8CDCE22E326DA8C2B292F6C9A006569C01FC2B8BAD5DD8544DB83C783B
F3CD47BA1941BC993734727C6806F4227265136F176F440C7289C2E09A6DD3E5
0054BBB60A70892B4CB1D4FB6C33551157E5FB959EABB99F90EFFBF4601E6161
A81752F28FB9E2AEC0BD2012B03F866FD81D35633DD542BCC67BD47F0DCFFA27
216576F71C09D69314C8DA1FCF67008EFC9A7BFD679E0E459B02FCEE1862467A
38CC6882A1A7FE6F683A0419C99B4C1A0C040BE85F7649ABF44B9B988D68B0A0
FB35BFE3789B0D181FC77E1D4534DD57F041A71E1D4395719CA0C7095FB1EFA6
F78CC81A4995D7B8F6FB69324D6712EDE001A9560053543ECEE24B5C4554FA21
09AB411D11E139FD1746AF79C4912BDD2C50ACA85CE10316F466B5A6E907B557
EB64CC0E6C4EAB9F3473D81B814050CD2CB50A4FACDD35164A406F82AE607106
9E515EA1FDA232BF821DAC371CE26C99F6B879751C36DC3FFB30EDD044DFEB16
E4351A932017E1702FAE3C83C27C018FBE89036B11DCCE3BB2A25401AC06FFEE
2925B4951B1D38B947EF204E607B33B22E1A87B71F2D29FD83E6CF0A1A82A9DA
4254761D8B8F89578344C0A6> |
!
end
end end
%ADOEndSubsetFont
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
316.02 402.02 mo
(\024\334)sh
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
316.02 402.02 mo
(\024\334) false chp
@
%ADOBeginSubsetFont: XJRSOQ+KaiTi-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XJRSOQ+KaiTi-GBK-EUC-H 1 GetGlyphDirectory
2657 <001C60D8A8C9B5EE3103EA0001704286053DCA1B85169F3EAF2387B57E
03EEC10F552D886F50476BDD5CEB85E154550729495B613CFA2CB90AC08C033F
56FBFF2F11221032A5F2D88FB37FCB28673A90757CBB5D03A7A188CCCF0A4234
D60DC410AB682F604B1FFA29A542316EB54E7E21EE7A9780BC9A16CB3CB31211
93C712139E0FB2ABC456CC9B9C8375F64CC983DDFEE1EC8D1C5EDF4A9EB99BA9
3E3F61F4F614E811BF10B539D14452FD2346FC003019D7E762024DA6E78F7902
CCDB9B646BFFCF070BE433353C403BFFC1DBBB4B5AEAE4DC02B7951465749F45
9BCDA51F3877FBE5984E8C77D21FD309D01F0F2DBB6A90D112B5DA9C2217BD07
99D7761185E18A92FCCEE10F059C895680D9EFAC17EDCED6DBC9EAE4D44700D2
D0378A06EECA99CEAF5330191F1545DFC342D555F07543D01A3BCC47902E0ED6
0E6B1A08AF5A7C7AA687EE8135E8E74F43C03EB246F7AC32103B36385DA3EAEF
5440C0D997184C8C51E740430FBAD0300A592EED56C6227FD8D4EAFFC7A29951
06A3AD67B7AB51CA3ECF9F2986EE3A1E6532A1081CD7A7737774895A9990D098
B41662F62973AE54DEFBF3017F8E980F6BFDA4659F65438A81727B5AC65D99AD
C64112AEC99577295AB9A9381E> |
!
end
end end
%ADOEndSubsetFont
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
42.84 173.54 mo
(\012a)sh
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
42.84 173.54 mo
(\012a) false chp
@
%ADOBeginSubsetFont: XJRSOQ+KaiTi-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XJRSOQ+KaiTi-GBK-EUC-H 1 GetGlyphDirectory
13068 <001C60D8A8C9B5EE3102F278B83AB4CF908596796A53AEBC0B6160418
15624E039969A8097C68B4C9A9306A609D68B42794A7EA3BC9DBA36743FE0C47
20773CC8103DB6AB4EBBB6C4B7C31FB5E6FB48523D339EE8496566B5F398A34E
5CE20853F8553107F45A63663BB02CC4D8B4AC1AF1DB25E56AC44043FBAE274C
75DF6401DC479F43192D55097B56D561FF3E598630551D97FBAE146CED3B5745
030F2B1D3E1CDA4A552F1CCE514827DCDAAC8C3C4895A41DF8A495089E718FAF
D84FAF1ABED10E9BC7FD6FD23349E88033D2B1854A5106F151D0F8B4082FC2F0
F6C48AE90A1131DCEE141132816F4748BF2A18006D55957C5779A7E2A4DBC564
A3B82727A84B2B505BDFFC641B45BFEEC40B7EC5649714AD6A35B1F7D25C52DF
D7521C77B0C40204C621858AAA5F7E80A406B03601923B2AEFCCA588A37589A0
2F6751CEC2745D670EB6BB9006496CAC8C62393F5DCA9FFCDA282B56CC16B1E3
EC71EA67B8D8344960FBBC4CC022FBD4D477F4B6064E98277519078DC401F234
257E75920918BD62109C2781E0E7D5EFA6DDAF0EA4534E9A8FCD01B95D04FB55
592FE10F85F6EF30926B409D84B6A8126A0809CD120712D81BE3112E2E56B7C3
87A132512FB4EB493BB88DD9C9262A036D683405459DB9B93C3ED330D8754869
6D9DAC9D23E084BF01E1AA247E3386AF4A99CE2E2CCC871F0F8977A48148C732
26D637E1A6F264DACBB6EE7B56FE9E1BCD87282C79348168CAB4BD99907D4F74
907E02312041E024BAE209610E0CA2F5B4563177C4D238BD94B87DAAD7A09E0B
786B754E5F44C1EC23F5FC393E7181FEDE2F29E50ED6F0B46AB3D79AA40674D5
9F8253138FCD00D392DE862CA904CA58AEB6567224CE68F033D4C755696151B1
1E2191B4FEA1B4B111434ED59547D89E61CF6338BBE078F6616B95B1AF13734A
9C990EBF9EE0DDBAB052464EF0A9DFEF4E40457CF1044C935DDB33AE7489645E
16AF9BF3E391CA6AD7F167BCAF859B7EDC72D4F32A3CDEF9E5D6C2B7AC8B1213
E6BD8C6903C99631F21152F8EDC549221395155D6E2B854FC6821D34AFE9F678
3C2FECB98C77BAB6A312E717B28DF5EA0226238FFEAD1A4764460BC7294EFF19
208027BF69926B1C717B1316173E5912E19F6773B6E52A726C8B929CF54A3BB5
5008AFD6FBEBD82ED8BB16848C340131DF9748DEFACC270B6396E31E1B49C9EC
C96C521D7FB3500844C92B97D> |
!
end
end end
%ADOEndSubsetFont
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
42.84 197.54 mo
(3\014)sh
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
42.84 197.54 mo
(3\014) false chp
@
%ADOBeginSubsetFont: XJRSOQ+KaiTi-GBK-EUC-H-Identity-H AddGlyphs
Adobe_CoolType_Utility begin ct_MakeOCF begin
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
ct_GlyphDirProcs begin/XJRSOQ+KaiTi-GBK-EUC-H 1 GetGlyphDirectory
10685 <001C60D8A8C9B5EE3102F27844B3F4F2770BDD8D08F4A11CCB5E828DD
B30A5303BD9CD68545635512379DD5A5DC2F4297D602B3D84EFABD10371DDF57
3080047F7CB548E4358E17995F74619E81527B97B27FE4A3C9B0C03AE5050AA3
1C7067523463593F0572C5FE7ECBEE22CFAE43B04FC7CB86F0DF6E245068B885
94FF428B2FC8A7E434F6D13A0FC6922FE2CB9E69651A7EDFE6F159D719FEA6FD
36BF9B99EAFAA505320E212225BC6DC0082F5C552567AD1BF5187C16D198E93A
055362C5AB24085787B4B90C625007777BD8383FE62E498D9051128DC8CF705F
55E76F776E50BEC327A2CA18FBA62A3446084CEA55923C5DEF57D046F700FA51
BE596DED5D5E444D1D5A43415C996CD8407F17CB7F28007E556B36B33F87558A
F00FCDE5750040C3B7F54017C38AED7CB835EA381079F63CD29B4A061EB79904
8E6043CC83BFC444258B1E249066A59C9464DAEE2E690A27C691810D3ED60ED6
6EFB1C43FE98A0CBC252CF9F6E14758B22486B09DE3248C4A3DFA00493E22BAB
572570E7AA4CA379E54FD61F9A80FEADE865F940CA4DC5EB1AF984B7E36B71A9
ACF13469EA8FE69213AE22A189A1DF3F6270F249D25ACF922EA1605CD7A96E8E
3770A50A64EEAF16D0096B6CE59398241D879BE16F4AF28AFA7DA647C7F78E20
C1B37CF7BC8F5EFC9CC5F35832669DE0B0D41E2D6CCEA40540EE64F65251FCAA
B5C8368FE9EC6D650DC0D6B06874725D9DF83455EC957E674B9BCF4E17BE007E
DD24E3988EED310B8AF2FE6EFB452E7AA2B442C4EC239309729A84C3CB2DD8EF
498F584FBF1E6773B54CDC123E4633F78F8EA2AB4019C283852CC71D70994F1C
FF981125A4A0FC2015E0EDFDA72624BE6C395B16F130A33D299B94513DE63296
7FA7BF0> |
!
end
end end
%ADOEndSubsetFont
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
42.84 221.54 mo
(\)\275)sh
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H findfont [24 0 0 -24 0 0 ]msf
42.84 221.54 mo
(\)\275) false chp
@
393.84 243.501 mo
393.84 241.821 392.46 240.441 390.84 240.441 cv
389.16 240.441 387.78 241.821 387.78 243.501 cv
387.78 245.121 389.16 246.501 390.84 246.501 cv
392.46 246.501 393.84 245.121 393.84 243.501 cv
ef
350.28 265.041 mo
350.28 263.361 348.9 261.981 347.28 261.981 cv
345.6 261.981 344.22 263.361 344.22 265.041 cv
344.22 266.661 345.6 268.041 347.28 268.041 cv
348.9 268.041 350.28 266.661 350.28 265.041 cv
ef
308.46 294.141 mo
308.46 292.461 307.08 291.081 305.46 291.081 cv
303.78 291.081 302.4 292.461 302.4 294.141 cv
302.4 295.761 303.78 297.141 305.46 297.141 cv
307.08 297.141 308.46 295.761 308.46 294.141 cv
ef
411.66 319.641 mo
411.66 317.961 410.28 316.581 408.66 316.581 cv
406.98 316.581 405.6 317.961 405.6 319.641 cv
405.6 321.261 406.98 322.641 408.66 322.641 cv
410.28 322.641 411.66 321.261 411.66 319.641 cv
ef
396.6 288.861 mo
396.6 287.181 395.22 285.801 393.6 285.801 cv
391.92 285.801 390.54 287.181 390.54 288.861 cv
390.54 290.481 391.92 291.861 393.6 291.861 cv
395.22 291.861 396.6 290.481 396.6 288.861 cv
ef
406.68 272.541 mo
406.68 270.861 405.3 269.481 403.68 269.481 cv
402 269.481 400.62 270.861 400.62 272.541 cv
400.62 274.161 402 275.541 403.68 275.541 cv
405.3 275.541 406.68 274.161 406.68 272.541 cv
ef
370.92 341.181 mo
370.92 339.501 369.54 338.121 367.92 338.121 cv
366.24 338.121 364.86 339.501 364.86 341.181 cv
364.86 342.801 366.24 344.181 367.92 344.181 cv
369.54 344.181 370.92 342.801 370.92 341.181 cv
ef
441.24 314.361 mo
441.24 312.681 439.86 311.301 438.24 311.301 cv
436.56 311.301 435.18 312.681 435.18 314.361 cv
435.18 315.981 436.56 317.361 438.24 317.361 cv
439.86 317.361 441.24 315.981 441.24 314.361 cv
ef
457.44 257.601 mo
457.44 255.921 456.06 254.541 454.44 254.541 cv
452.76 254.541 451.38 255.921 451.38 257.601 cv
451.38 259.221 452.76 260.601 454.44 260.601 cv
456.06 260.601 457.44 259.221 457.44 257.601 cv
ef
1 lj
10 ml
393.84 243.501 mo
393.84 241.821 392.46 240.501 390.84 240.501 cv
389.16 240.501 387.84 241.821 387.84 243.501 cv
387.84 245.121 389.16 246.501 390.84 246.501 cv
392.46 246.501 393.84 245.121 393.84 243.501 cv
cp
@
350.28 265.041 mo
350.28 263.361 348.9 262.041 347.28 262.041 cv
345.6 262.041 344.28 263.361 344.28 265.041 cv
344.28 266.661 345.6 268.041 347.28 268.041 cv
348.9 268.041 350.28 266.661 350.28 265.041 cv
cp
@
308.46 294.141 mo
308.46 292.461 307.08 291.141 305.46 291.141 cv
303.78 291.141 302.46 292.461 302.46 294.141 cv
302.46 295.761 303.78 297.141 305.46 297.141 cv
307.08 297.141 308.46 295.761 308.46 294.141 cv
cp
@
411.66 319.641 mo
411.66 317.961 410.28 316.641 408.66 316.641 cv
406.98 316.641 405.66 317.961 405.66 319.641 cv
405.66 321.261 406.98 322.641 408.66 322.641 cv
410.28 322.641 411.66 321.261 411.66 319.641 cv
cp
@
396.6 288.861 mo
396.6 287.181 395.22 285.861 393.6 285.861 cv
391.92 285.861 390.6 287.181 390.6 288.861 cv
390.6 290.481 391.92 291.861 393.6 291.861 cv
395.22 291.861 396.6 290.481 396.6 288.861 cv
cp
@
406.68 272.541 mo
406.68 270.861 405.3 269.541 403.68 269.541 cv
402 269.541 400.68 270.861 400.68 272.541 cv
400.68 274.161 402 275.541 403.68 275.541 cv
405.3 275.541 406.68 274.161 406.68 272.541 cv
cp
@
370.92 341.181 mo
370.92 339.501 369.54 338.181 367.92 338.181 cv
366.24 338.181 364.92 339.501 364.92 341.181 cv
364.92 342.801 366.24 344.181 367.92 344.181 cv
369.54 344.181 370.92 342.801 370.92 341.181 cv
cp
@
441.24 314.361 mo
441.24 312.681 439.86 311.361 438.24 311.361 cv
436.56 311.361 435.24 312.681 435.24 314.361 cv
435.24 315.981 436.56 317.361 438.24 317.361 cv
439.86 317.361 441.24 315.981 441.24 314.361 cv
cp
@
457.44 257.601 mo
457.44 255.921 456.06 254.601 454.44 254.601 cv
452.76 254.601 451.44 255.921 451.44 257.601 cv
451.44 259.221 452.76 260.601 454.44 260.601 cv
456.06 260.601 457.44 259.221 457.44 257.601 cv
cp
@
264.9 255.381 mo
264.9 253.701 263.52 252.321 261.9 252.321 cv
260.22 252.321 258.84 253.701 258.84 255.381 cv
258.84 257.001 260.22 258.381 261.9 258.381 cv
263.52 258.381 264.9 257.001 264.9 255.381 cv
ef
283.92 266.841 mo
283.92 265.161 282.54 263.781 280.92 263.781 cv
279.24 263.781 277.86 265.161 277.86 266.841 cv
277.86 268.461 279.24 269.841 280.92 269.841 cv
282.54 269.841 283.92 268.461 283.92 266.841 cv
ef
175.62 242.181 mo
175.62 240.501 174.24 239.121 172.62 239.121 cv
170.94 239.121 169.56 240.501 169.56 242.181 cv
169.56 243.801 170.94 245.181 172.62 245.181 cv
174.24 245.181 175.62 243.801 175.62 242.181 cv
ef
176.76 334.581 mo
176.76 332.901 175.38 331.521 173.76 331.521 cv
172.08 331.521 170.7 332.901 170.7 334.581 cv
170.7 336.201 172.08 337.581 173.76 337.581 cv
175.38 337.581 176.76 336.201 176.76 334.581 cv
ef
231.42 316.101 mo
231.42 314.421 230.04 313.041 228.42 313.041 cv
226.74 313.041 225.36 314.421 225.36 316.101 cv
225.36 317.721 226.74 319.101 228.42 319.101 cv
230.04 319.101 231.42 317.721 231.42 316.101 cv
ef
240.96 196.881 mo
240.96 195.201 239.58 193.821 237.96 193.821 cv
236.28 193.821 234.9 195.201 234.9 196.881 cv
234.9 198.501 236.28 199.881 237.96 199.881 cv
239.58 199.881 240.96 198.501 240.96 196.881 cv
ef
240.36 276.981 mo
240.36 275.301 238.98 273.921 237.36 273.921 cv
235.68 273.921 234.3 275.301 234.3 276.981 cv
234.3 278.601 235.68 279.981 237.36 279.981 cv
238.98 279.981 240.36 278.601 240.36 276.981 cv
ef
229.2 253.641 mo
229.2 251.961 227.82 250.581 226.2 250.581 cv
224.52 250.581 223.14 251.961 223.14 253.641 cv
223.14 255.261 224.52 256.641 226.2 256.641 cv
227.82 256.641 229.2 255.261 229.2 253.641 cv
ef
197.4 246.561 mo
197.4 244.881 196.02 243.501 194.4 243.501 cv
192.72 243.501 191.34 244.881 191.34 246.561 cv
191.34 248.181 192.72 249.561 194.4 249.561 cv
196.02 249.561 197.4 248.181 197.4 246.561 cv
ef
264.9 255.381 mo
264.9 253.701 263.52 252.381 261.9 252.381 cv
260.22 252.381 258.9 253.701 258.9 255.381 cv
258.9 257.001 260.22 258.381 261.9 258.381 cv
263.52 258.381 264.9 257.001 264.9 255.381 cv
cp
@
283.92 266.841 mo
283.92 265.161 282.54 263.841 280.92 263.841 cv
279.24 263.841 277.92 265.161 277.92 266.841 cv
277.92 268.461 279.24 269.841 280.92 269.841 cv
282.54 269.841 283.92 268.461 283.92 266.841 cv
cp
@
175.62 242.181 mo
175.62 240.501 174.24 239.181 172.62 239.181 cv
170.94 239.181 169.62 240.501 169.62 242.181 cv
169.62 243.801 170.94 245.181 172.62 245.181 cv
174.24 245.181 175.62 243.801 175.62 242.181 cv
cp
@
176.76 334.581 mo
176.76 332.901 175.38 331.581 173.76 331.581 cv
172.08 331.581 170.76 332.901 170.76 334.581 cv
170.76 336.201 172.08 337.581 173.76 337.581 cv
175.38 337.581 176.76 336.201 176.76 334.581 cv
cp
@
231.42 316.101 mo
231.42 314.421 230.04 313.101 228.42 313.101 cv
226.74 313.101 225.42 314.421 225.42 316.101 cv
225.42 317.721 226.74 319.101 228.42 319.101 cv
230.04 319.101 231.42 317.721 231.42 316.101 cv
cp
@
240.96 196.881 mo
240.96 195.201 239.58 193.881 237.96 193.881 cv
236.28 193.881 234.96 195.201 234.96 196.881 cv
234.96 198.501 236.28 199.881 237.96 199.881 cv
239.58 199.881 240.96 198.501 240.96 196.881 cv
cp
@
240.36 276.981 mo
240.36 275.301 238.98 273.981 237.36 273.981 cv
235.68 273.981 234.36 275.301 234.36 276.981 cv
234.36 278.601 235.68 279.981 237.36 279.981 cv
238.98 279.981 240.36 278.601 240.36 276.981 cv
cp
@
229.2 253.641 mo
229.2 251.961 227.82 250.641 226.2 250.641 cv
224.52 250.641 223.2 251.961 223.2 253.641 cv
223.2 255.261 224.52 256.641 226.2 256.641 cv
227.82 256.641 229.2 255.261 229.2 253.641 cv
cp
@
197.4 246.561 mo
197.4 244.881 196.02 243.561 194.4 243.561 cv
192.72 243.561 191.4 244.881 191.4 246.561 cv
191.4 248.181 192.72 249.561 194.4 249.561 cv
196.02 249.561 197.4 248.181 197.4 246.561 cv
cp
@
429 157.221 mo
429 155.541 427.62 154.161 426 154.161 cv
424.32 154.161 422.94 155.541 422.94 157.221 cv
422.94 158.841 424.32 160.221 426 160.221 cv
427.62 160.221 429 158.841 429 157.221 cv
ef
471.96 194.241 mo
471.96 192.561 470.58 191.181 468.96 191.181 cv
467.28 191.181 465.9 192.561 465.9 194.241 cv
465.9 195.861 467.28 197.241 468.96 197.241 cv
470.58 197.241 471.96 195.861 471.96 194.241 cv
ef
379.32 219.741 mo
379.32 218.061 377.94 216.681 376.32 216.681 cv
374.64 216.681 373.26 218.061 373.26 219.741 cv
373.26 221.361 374.64 222.741 376.32 222.741 cv
377.94 222.741 379.32 221.361 379.32 219.741 cv
ef
438.48 207.441 mo
438.48 205.761 437.1 204.381 435.48 204.381 cv
433.8 204.381 432.42 205.761 432.42 207.441 cv
432.42 209.061 433.8 210.441 435.48 210.441 cv
437.1 210.441 438.48 209.061 438.48 207.441 cv
ef
309.54 222.381 mo
309.54 220.701 308.16 219.321 306.54 219.321 cv
304.86 219.321 303.48 220.701 303.48 222.381 cv
303.48 224.001 304.86 225.381 306.54 225.381 cv
308.16 225.381 309.54 224.001 309.54 222.381 cv
ef
306.78 167.361 mo
306.78 165.681 305.4 164.301 303.78 164.301 cv
302.1 164.301 300.72 165.681 300.72 167.361 cv
300.72 168.981 302.1 170.361 303.78 170.361 cv
305.4 170.361 306.78 168.981 306.78 167.361 cv
ef
333 197.301 mo
333 195.621 331.62 194.241 330 194.241 cv
328.32 194.241 326.94 195.621 326.94 197.301 cv
326.94 198.921 328.32 200.301 330 200.301 cv
331.62 200.301 333 198.921 333 197.301 cv
ef
459.12 144.501 mo
459.12 142.821 457.74 141.441 456.12 141.441 cv
454.44 141.441 453.06 142.821 453.06 144.501 cv
453.06 146.121 454.44 147.501 456.12 147.501 cv
457.74 147.501 459.12 146.121 459.12 144.501 cv
ef
336.9 151.941 mo
336.9 150.261 335.52 148.881 333.9 148.881 cv
332.22 148.881 330.84 150.261 330.84 151.941 cv
330.84 153.561 332.22 154.941 333.9 154.941 cv
335.52 154.941 336.9 153.561 336.9 151.941 cv
ef
303.96 194.241 mo
303.96 192.561 302.58 191.181 300.96 191.181 cv
299.28 191.181 297.9 192.561 297.9 194.241 cv
297.9 195.861 299.28 197.241 300.96 197.241 cv
302.58 197.241 303.96 195.861 303.96 194.241 cv
ef
444.6 163.821 mo
444.6 162.141 443.22 160.761 441.6 160.761 cv
439.92 160.761 438.54 162.141 438.54 163.821 cv
438.54 165.441 439.92 166.821 441.6 166.821 cv
443.22 166.821 444.6 165.441 444.6 163.821 cv
ef
288.9 157.701 mo
288.9 156.021 287.52 154.641 285.9 154.641 cv
284.22 154.641 282.84 156.021 282.84 157.701 cv
282.84 159.321 284.22 160.701 285.9 160.701 cv
287.52 160.701 288.9 159.321 288.9 157.701 cv
ef
429 157.221 mo
429 155.541 427.62 154.221 426 154.221 cv
424.32 154.221 423 155.541 423 157.221 cv
423 158.841 424.32 160.221 426 160.221 cv
427.62 160.221 429 158.841 429 157.221 cv
cp
@
471.96 194.241 mo
471.96 192.561 470.58 191.241 468.96 191.241 cv
467.28 191.241 465.96 192.561 465.96 194.241 cv
465.96 195.861 467.28 197.241 468.96 197.241 cv
470.58 197.241 471.96 195.861 471.96 194.241 cv
cp
@
379.32 219.741 mo
379.32 218.061 377.94 216.741 376.32 216.741 cv
374.64 216.741 373.32 218.061 373.32 219.741 cv
373.32 221.361 374.64 222.741 376.32 222.741 cv
377.94 222.741 379.32 221.361 379.32 219.741 cv
cp
@
438.48 207.441 mo
438.48 205.761 437.1 204.441 435.48 204.441 cv
433.8 204.441 432.48 205.761 432.48 207.441 cv
432.48 209.061 433.8 210.441 435.48 210.441 cv
437.1 210.441 438.48 209.061 438.48 207.441 cv
cp
@
309.54 222.381 mo
309.54 220.701 308.16 219.381 306.54 219.381 cv
304.86 219.381 303.54 220.701 303.54 222.381 cv
303.54 224.001 304.86 225.381 306.54 225.381 cv
308.16 225.381 309.54 224.001 309.54 222.381 cv
cp
@
306.78 167.361 mo
306.78 165.681 305.4 164.361 303.78 164.361 cv
302.1 164.361 300.78 165.681 300.78 167.361 cv
300.78 168.981 302.1 170.361 303.78 170.361 cv
305.4 170.361 306.78 168.981 306.78 167.361 cv
cp
@
333 197.301 mo
333 195.621 331.62 194.301 330 194.301 cv
328.32 194.301 327 195.621 327 197.301 cv
327 198.921 328.32 200.301 330 200.301 cv
331.62 200.301 333 198.921 333 197.301 cv
cp
@
459.12 144.501 mo
459.12 142.821 457.74 141.501 456.12 141.501 cv
454.44 141.501 453.12 142.821 453.12 144.501 cv
453.12 146.121 454.44 147.501 456.12 147.501 cv
457.74 147.501 459.12 146.121 459.12 144.501 cv
cp
@
336.9 151.941 mo
336.9 150.261 335.52 148.941 333.9 148.941 cv
332.22 148.941 330.9 150.261 330.9 151.941 cv
330.9 153.561 332.22 154.941 333.9 154.941 cv
335.52 154.941 336.9 153.561 336.9 151.941 cv
cp
@
303.96 194.241 mo
303.96 192.561 302.58 191.241 300.96 191.241 cv
299.28 191.241 297.96 192.561 297.96 194.241 cv
297.96 195.861 299.28 197.241 300.96 197.241 cv
302.58 197.241 303.96 195.861 303.96 194.241 cv
cp
@
444.6 163.821 mo
444.6 162.141 443.22 160.821 441.6 160.821 cv
439.92 160.821 438.6 162.141 438.6 163.821 cv
438.6 165.441 439.92 166.821 441.6 166.821 cv
443.22 166.821 444.6 165.441 444.6 163.821 cv
cp
@
288.9 157.701 mo
288.9 156.021 287.52 154.701 285.9 154.701 cv
284.22 154.701 282.9 156.021 282.9 157.701 cv
282.9 159.321 284.22 160.701 285.9 160.701 cv
287.52 160.701 288.9 159.321 288.9 157.701 cv
cp
@
%ADOBeginSubsetFont: QJJAAA+ArialMT Initial
ct_T42Dict begin
-0.664 -0.324 2 1.039
 256 array 0 1 255 {1 index exch /.notdef put} for  /QJJAAA+ArialMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3210325d84000000cc000000606376
7420aa86dc6e0000012c0000065a6670676dc9bcda0500000788000007c1
676c7966422a74e00000a3800000006c68656164e6df2d5a00000f4c0000
003668686561123318d000000f8400000024686d747816ff7be200000fa8
0000401c6c6f63610006c2f400004fc4000040206d6178701578099e0000
8fe4000000206e616d6568a9b4510000900400000792707265708d21ed41
0000979800000be767646972000000000000000000000000000303880190
00050008059a05330000011b059a0533000003d1006602120805020b0604
020202020204e0002affc00078430000000900000000544d432000400020
fffc05d3fe510133073e01b2400001ffffff0000042605bb000000200015
05ba001905ba001a05a70019042600180000ffe70000ffe80000ffe7fe69
ffe805ba0019fe69ffe802ea000000b8000000b80000000000a800ad0169
00ad00bf00c201f0001800af00b900b400c800170044009c007c00940087
0006005a00c80089005200520005004400940119ffb4002f00a1000300a1
00cd00170057007e00ba00160118ffe9007f008503d300870085000d0022
00410050006f008d014cff75005c00df04830037004c006e00700180ff58
ff8eff92ffa400a500b903c8fffd000b001a0063006300cdffee05d8ffdc
002d005c0095009900df019209b500400057008000b9039d0072009a035d
0401ff67fffa00030021007700cd0004004d00cd01c0022b004c006500e7
0118017c034305d8ffa3ffb0ffc40003001c005d0068009a00ba01350147
0221055cff4dffcd0016002d00780080009900b200b600b600b800bd00da
010c05f0ffa4fff00019002c0049007f00b400ce01c003fefd81fe3f0000
00050018002900390049006f00be00c700d0012301c1026f050c05320540
057affd4001400310055005700a700b400e601f7027e027e027f03c60446
ff42000e0085009100bf00c200c500e1011a012f014f01560229026f029e
03720008002c00310031006400690089009800c700de012b01b6020c02cf
03a304ab04fb061dfee0ff0e00060026009b009d00c1010d011801200173
018201d601e30243025f029b02e2039404a904d20761001c005e006d008d
00ab00f7011201380151015b0168017c01870191019901cd01d001e80241
0254026b02ef0368037103bd044204420453047304830586058b06e8fe58
fec4fed1fef7ff32ff860051007c008100910095009e00b400b900cf00d9
00d900df00e20105010b010e010e012001210155017b017b017e018d01a2
01a801a901b401d001d001e201e901f201f501fb020002000206021b0221
022202220223027202770294029c02cf02cf02d002ec02f903170322032b
0335033c0359036f037103870390039003b503e1041a04cf04ff05320532
0596059f05a805ab05c205f0060c0782080008ccfca3fd2afddefe00fe88
fe96feb2feb4ffe100150019001a001c001f003c005100610061006a0078
009600a500af00d3010c0118011a012a013e014c0151015f016a01710178
01820184019a01a501a801a901ae01bc01cd01d701ef0200020d021c0221
0222022e02350242024f024f025e026502710290029202b402d602fa0307
030b030f0315032a0347035d036503740379039603b003cc03dd03e203f6
03fc03fc03ff040a041f04220426042b0447045f0475049e04e704e7055c
05cb05e5060a066d068606b806f10736073e07500751075d078f07b607d4
086000b600c300b500b700000000000000000000000001e00381034503b5
008e0233041902ce02ce002d005f0064034d023f000002a80188027d01b4
02240578063b023b014e00f00426029402c6029f02f6023b034d014b0153
006a0231000000000000061404aa0000003c04c300ed04bc026502ce03b5
0078060c017e02ef060c00b201000239000001c50330042b03cb00da03df
010704a100db040a011701ed02a70350010b01bd043e05580021039c00ae
0371017d00b5024500000afb088c012b014e01aa00870054013201f803ff
0003024e00b4003703e30083006b02d800ed00770088009701640467008e
0033017c00e700a6029e0329056e062a061501c90269048a021301b40002
04a9000002390124010305140084015d039a06ef02d9007500cf040a00de
03ac04bc02cf02ae034d04f005520168006d007d00860071ff8100790558
04d2016700030156002504e00094007c033204210094007f0072005c002f
00b6001800ba00b80041034d00720018001f004c016a01550099009a009a
009800b200040078006900140057006e00ce00b4065402b80067050e0165
00e7000004cbfe52005affa60099ff67006eff92002dffd40087ff7c00b8
00a800e5008f00a80185fe7b0070001e00d900de014c054602cf0546ff2d
028a02d90253029600b700000000000000000000000000000125011800ea
00ea00ae0000003e05bb008a04d70053003fff8cffd50015002800220099
0062004a00e4006d00ee00e5004803c00033fe4e02b1ff460370007905df
0051ffa7ff1f010a0068ff6c004f00bc00a507050061072b00ed04b001d2
00b6007b00650252ff740365fe690094008f005c00400086007500890089
0471048304f900004046585756555441403f3e3d3c3b3a39383735343332
31302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a191817161514
131211100f0e0d0c0b0a090807060504030201002c4523466020b02660b0
04262348482d2c452346236120b02661b004262348482d2c45234660b020
6120b04660b004262348482d2c4523462361b0206020b02661b02061b004
262348482d2c45234660b0406120b06660b004262348482d2c4523462361
b0406020b02661b04061b004262348482d2c0110203c003c2d2c20452320
b0cd442320b8015a51582320b08d44235920b0ed51582320b04d44235920
b09051582320b00d44235921212d2c20204518684420b001602045b04676
688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b0
172370b101173e01b0172370b10217453ab10200080d2d2c45b01a234445
b01923442d2c2045b00325456164b050515845441b2121592d2cb0014363
2362b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d
2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b003
61592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb0
1243588745b0112bb0172344b0177ae41b038a45186920b01723448a8a87
20b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb0
022546608a46b040618c482d2c4b53205c58b002855958b00185592d2c20
b0032545b019234445b01a23444565234520b00325606a20b00923422368
8a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b0
3f1b235961441cb114008a5279b31940201945208a54582321b03f1b2359
61442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d
2cb10c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d
2c4b525845441b2121592d2c0120b003252349b04060b0206320b0005258
23b002253823b002256538008a63381b212121212159012d2c4bb0645158
4569b00943608a103a1b212121592d2c01b005251023208af500b0016023
edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f500ed
ec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2b
b02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b802232370
1020b802234520b0005058b00161593a2f182d2c21210c6423648bb84000
622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21
b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423648b
b84000626023212d2cb4000100000015b00826b00826b00826b008260f10
161345683ab001162d2cb4000100000015b00826b00826b00826b008260f
1016134568653ab001162d2c4b53234b515a5820458a60441b2121592d2c
4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b54
58381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54
b012435c5a58381b2121592d2cb012435c580cb00425b00425060c642364
6164b807085158b00425b00425012046b01060482046b0106048590a2121
1b2121592d2cb012435c580cb00425b00425060c6423646164b807085158
b00425b00425012046b8fff060482046b8fff06048590a21211b2121592d
2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121
592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426
024b545a8a8a0ab012435c5a58381b2121592d2c4b5258b00425b0042549
b00425b00425496120b0005458212043b0005558b00325b00325b8ffc038
b8ffc038591bb04054582043b0005458b00225b8ffc038591b2043b00054
58b00325b00325b8ffc038b8ffc0381bb00325b8ffc03859595959212121
212d2c462346608a8a462320468a608a61b8ff8062232010238ab902c202
c28a70456020b0005058b00161b8ffba8b1bb0468c59b0106068013a2d2c
b1020042b123018851b1400188535a58b910000020885458b20201024360
4259b12401885158b920000040885458b2020202436042b12401885458b2
022002436042004b014b5258b2020802436042591bb940000080885458b2
02040243604259b94000008063b80100885458b202080243604259b94000
010063b80200885458b202100243604259b12601885158b94000020063b8
0400885458b202400243604259b94000040063b80800885458b202800243
604259b12801885158b94000080063b81000885458ba0002010000024360
42595959595959592d2cb0024354584b53234b515a58381b2121591b2121
2121592d2cb0572b580c028a4b53b004264b515a580a381b0a2121591b21
212121592d2c20b0024354b00123b05f237821b1000243b056237921b002
4323b020205c58212121b100471c598a8a208a208a23b81000635658b810
00635658212121b1012c1c591b2159b08062205c58212121b1001b1c5923
b08062205c58212121b1000c1c598ab00161b8ffb31c23212d2c20b00243
54b00123b07b237821b1000243b072237921b10002438ab020205c582121
21b0631c598a8a208a208a23b81000635658b81000635658b00426b0015b
b00426b00426b004261b21212121b13600231c591b2159b0042623b08062
205c588a5c8a5a23212321b01d1c598ab08062205c5821212321b00e1c59
b00426b00161b8ff981c23212d000000000100000006e148841d1b215f0f
3cf5081b080000000000a2e3272a00000000d218da31faaffd6710000851
00000009000100010000000000010000073efe4e00431000faaffa7a1000
000100000000000000000000000000001007060001000000000002390000
02390000023900b002d7005e0473001504730049071d0077055600580187
005a02aa007c02aa007c031d004004ac0072023900aa02aa0041023900ba
0239000004730055047300df0473003c047300560473001a047300550473
004d047300610473005304730055023900b9023900aa04ac007004ac0072
04ac00700473005a081f006f0556fffd0556009605c7006605c7009e0556
00a204e300a80639006d05c700a4023900bf040000370556009604730096
06aa009805c7009c063900630556009e0639005805c700a10556005c04e3
003005c700a105560009078d0019055600090556000604e300290239008b
023900000239002703c100360473ffe102aa00590473004a047300860400
0050047300460473004b02390013047300420473008701c7008801c7ffa2
0400008801c7008306aa00870473008704730044047300870473004802aa
00850400003f02390024047300830400001a05c700060400000f04000021
0400002802ac0039021400bc02ac002f04ac00570556fffd0556fffd05c7
0068055600a205c7009c0639006305c700a10473004a0473004a0473004a
0473004a0473004a0473004a040000500473004b0473004b0473004b0473
004b023900bd023900230239ffe502390009047300870473004404730044
047300440473004404730044047300830473008304730083047300830473
0049033300800473006b0473001b0473005102cd006d044c000104e30099
05e5000305e50003080000e102aa00de02aa003d0464004e080000010639
005305b4009a0464004e0464004d0464004d0473fffd049c00a003f40038
05b4007a069600a1046400000231000002f6002f02ec002d0625007f071d
004404e3008104e3009e02aa00e804ac0072046400540473002e04640033
04e5001a047300860473008c080000ef0556fffd0556fffd063900630800
0081078d00520473fffc0800000002aa005302aa004701c7008001c7006c
0464004e03f4002f04000021055600060156fe390473ffe402aa005c02aa
005c040000170400001704730049023900b901c7006c02aa004708000025
0556fffd055600a20556fffd055600a2055600a20239008d0239ffe00239
00040239001506390063063900630639006305c700a105c700a105c700a1
023900c602aa001902aa000602aa001d02aa002e02aa00e502aa00a202aa
006b02aa003a02aa004b02aa00280473000001c700030556005c0400003f
04e3002904000028021400bc05c7fffd0473004905560006040000210556
009e0473008704ac007204ac00a102aa006b02aa001902aa002106ac006b
06ac006b06ac0021047300000639006d04730042023900b10556005c0400
003f05c700660400005005c700660400005004730046046bffe102aa00ee
0556fffd0473004a0556fffd0473004a05c7009e04eb004705c7fffd0556
00a20473004b055600a20473004b0473009601c700420473009602550088
0473009602ac008305c7009c0473008705c7009c04730087063900630473
004405c700a102aa008505c700a102aa003c0556005c0400003f04e30030
0239002404e300300300002305c700a10473008305c700a10473008304e3
00290400002804e3002904000028046800a4063900600662005504a00048
047400480391006204f000440329002e05300048046bffe1040000b002eb
005208c000330800004f040000990800004f040000990800004f04000098
0400009807d5016a05c0009e04ab007204d5009d04ac007104d5022204d5
010505abffe9050001c905ab027e05abffe905ab027e05abffe905ab027e
05abffe905abffe905abffe905abffe905abffe905ab01c005ab027e05ab
01c005ab01c005abffe905abffe905abffe905ab027e05ab01c005ab01c0
05abffe905abffe905abffe905ab027e05ab01c005ab01c005abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905abffe905abffe905abffe905abffe905ab
02d605ab006605abffea05d5ffff04d500920800000007eb013007eb0120
07eb013007eb012004d500b204d5008004d5002a082b0198086b01b80755
0010060000f40600006f0440003a0540003704c0003f0415004004000025
0600005505e100bf038d008904d5ffd90180008002d50086071500610296
000f04d5009202d6008302d6008304d500b202d600700556fffd0473004a
05c700660400005005c7006604000050055600a20473004b055600a20473
004b055600a20473004b0639006d047300420639006d047300420639006d
0473004205c700a40473008705c7001f047300060239ffce0239ffce0239
ffe40239ffe40239fff60239fff50239004b01c700190400003701c7ffa2
0556009604000088040000860473009601c7006a05c7009c0473008705c9
00a50473008b0639006304730044063900630473004405c700a102aa006a
0556005c0400003f04e300300239000c05c700a10473008305c700a10473
008305c700a10473008305c700a104730083078d001905c7000605560006
0400002101c700890556fffd0473004a08000001071d00440639005304e3
0081023900b9078d001905c70006078d001905c70006078d001905c70006
055600060400002101c7008a02aaffe10473001b04cd005a06ac006b06ac
002206ac002206ac004a02aa00e202aa006b02aa00de02aaffea0557ffff
0646ffa706b4ffa80312ffa80632ffa706d8ffa70605ffa701c7ff780556
fffd055600960558fffe055600a204e3002905c700a4023900bf05560096
0558000b06aa009805c7009c0533006d0639006305c700a40556009e04f2
009404e30030055600060556000906af007f05fb00610239000405560006
04a00048039100620473008b01c7006b04600088049a008c040000190387
00480473008b0473005c01c700890400008604000018049c00a00400001a
0395005c04730044048d008303db0056046000880433001105b4007a063f
005701c7ffc9046000880473004804600088063f0057055700a206eb0032
045500a105c000640556005c023900bf02390004040000370875000d0815
00a406d5003104a900a10515000a05c000a00556fffd054000a705560096
045500a1056b0000055600a20763000704d5004e05c000a105c000a104a9
00a10540001206aa009805c700a40639006305c000a00556009e05c70066
04e300300515000a061500520556000905eb009f05550057075500a10780
00a106550000071500a8054000a505c00055081500a405c7001a0473004a
0495005b0440008802eb008804ab00000473004b055afffb03ab00320478
0087047800870380008604ab00180580008c046b00880473004404550088
047300870400005003aa0026040000210695004b0400000f0495008a042b
0045066b008d0695008d0500002805c0008b042b00840415003006000089
0455001f0473004b0473000002eb00890415004b0400003f01c700880239
000901c7ffa20740001306800083047300000380008604000021046b0088
03e900a1034a008808000041089500a00585002d00000000000000000000
00000000000000000000000000000000000000000000000000000000ffac
00000000000001010000ffce0310007d0000ff37023300d20000030b0000
ff04023900b90481006904560032033100190411002d04d1009601f9009b
030f005f04ca009b04b8008c01f9009b0413002803b0005003b4003c04ca
009b04cf005001f9009b02d2003c0498005a043c00190488006e045f0073
03b1001903d4000a0466009604130028058e00640524002803f2009b03f2
009b03f2009b01e3005a0356005a0686009b01f900460413002804130028
03b4ff4903b4ff490448002d058e0064058e0064058e0064058e00640481
0069048100690481006904560032033100190411002d04d10096024b0000
034a000004b8008c024b00000413002803b0005003b4003c04cf005002d2
003c0498005a0488006e045f007303d4000a0466009604130028058e0064
0524002801f9009b0456003203b00050045f0073049b003c0000ffdc0000
ff250000ffdc0000fe51028d00ab028d00a002da0043034d007901a8ffba
000000460000004600000046000000460000004800000046000000460000
00460435017c0435012e043500b7043500810435012c043500be043500af
043500810435009a043500db04350085028d00c0043500b3060001000600
010002420036060001000435009e04350098043500cb0600010006000100
060001000600010006000100000000460600010006000100060001000600
010006000100060001000600010006000100051bffba0600010006000100
0600010005b5003a05b5003a01f4ffba01f4ffba06000100060001000600
0100060001000481003604350036043dffba043dffba03e9004a03e9004a
067f0014077600140327ffba041effba067f0014077600140327ffba041e
ffba051b003204b500240300fff706000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010000000030000000460000004600000040
0000004606000100060001000000ffdc0000fe510000ff160000ff160000
ff160000ff160000ff160000ff160000ff160000ff160000ff160000ffdc
0000ff160000ffdc0000ff200000ffdc0473004a08000000060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
06000100060001000600010006000100028d0011028d00300600010004ee
0015034d007901a8001301d6ffd701a8005601d600100375003203750032
01a8002d01d60013051b003204b5002401f4ffba01f4ffba01a8009301d6
001305b5003a05b5003a01f4ffba01f4ffba024200000300fff705b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba02b3005f02b3005f02b3005f02b3
005f03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba
04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba045a002a039a
00360435ffba0327ffba045a002a039a00360435ffba0327ffba064f0027
064f00270224ffba021affba04a7004604a700460224ffba021affba04cf
002d04cf002d0327ffba0327ffba040d0047040d004701a8ffba01a8ffba
02b4002302b400230327ffba0327ffba043500450435004501f4ffba01f4
ffba024200360300fff7039affba0327ffba0375003203750032051b0032
04b50024051b003204b5002401f4ffba01f4ffba045a003104ce0041045a
002604ce0039045a005304ce004a045a005304ce004a0600010006000100
000000460000004606000100060001000600010000000046000000460600
010006000100000000480000004606000100060001000600010000000046
000000460000004600000046000000400000003006000100000000460000
004606000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0600010006000100028d00ca028d00c7028d00c606000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100060001000600010006000100060001000100ffba
0800ffba1000ffba06dc0063053f004406d500a1055b00830000fddc0000
fc2f0000fca60000fe540000fcd70000fd730000fe290000fe0d0000fd11
0000fc670000fd9d0000fbf50000fc720000fed50000fed50000ff02041b
00a006ac006b06ac00190000feb60000fd730000fe080000fca60000fe53
0000fd110000fbc80000faf40000faaf0000fc720000fbaa0000fb6a0000
fcf10000fc7d0000fbdd0000fcc10000fb980000fdea0000fe840000fdc2
0000fcf10000fd5f0000fe760000febc0000fceb0000fd6c0000fd580000
fc900000fd150000fc2c0000fc130000fc120000fb960000fb9601c70088
0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd0473
004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556fffd
0473004a0556fffd0473004a0556fffd0473004a0556fffd0473004a0556
fffd0473004a055600a20473004b055600a20473004b055600a20473004b
055600a20473004b055600a20473004b055600a20473004b055600a20473
004b055600a20473004b0239006301c7001f023900ba01c7007c06390063
047300440639006304730044063900630473004406390063047300440639
0063047300440639006304730044063900630473004406dc0063053f0044
06dc0063053f004406dc0063053f004406dc0063053f004406dc0063053f
004405c700a10473008305c700a10473008306d500a1055b008306d500a1
055b008306d500a1055b008306d500a1055b008306d500a1055b00830556
000604000021055600060400002105560006040000210556fffd0473004a
0239ffe201c7ffb0063900630473004405c700a10473008305c700a10473
008305c700a10473008305c700a10473008305c700a1047300830000fefe
0000fefe0000fefe0000fefe0455fffd02eb000c07630007055afffb04a9
00a10380008604a900a10380008605c700a4046b00880473fffd04000014
0473fffd04000014055600090400000f05550057042b0045055500a10473
00870605006304730055063900600473004405b5003a01f4ffba0224ffba
021affba04a7004601f4009e01f4001001f4001b01f4001001f4006b01f4
fff90227ffce0000000f0000fff502aa00a402aa00a40000001300000056
000000560000ffcf01a8000f01d6ffbf01a8fff501d6ffcd01a8001d01d6
fff501a8009301d6001303750032037500320375003203750032051b0032
04b5002405b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba0481003604350036043dffba043d
ffba02b3003202b3003202b3005f02b3005f02b3005f02b3005f02b30032
02b3003202b3005f02b3005f02b3005f02b3005f02b3005f02b3005f02b3
003802b3003802b3004902b3004903e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba0692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e
06c5ffba06c5ffba04a7ffba04a7ffba045a002a039a00360435ffba0327
ffba064f0027064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba064f0027064f00270224ffba021affba04a70046
04a7004604a7004604a70046093e0032093e00320740ffba0740ffba067f
0014077600140327ffba041effba04cf002d04cf002d0327ffba0327ffba
04cf002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba067f0014077600140327ffba041effba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba04350045
0435004501f4ffba01f4ffba043500450435004504350045043500450435
00450435004501f4ffba01f4ffba04350045043500450481003604350036
043dffba043dffba024200360300fff7031a001a031a001a031a001a0375
003203750032037500320375003203750032037500320375003203750032
037500320375003203750032037500320375003203750032037500320375
0032051bffba04b5ffba051b003204b5002401f4ffba01f4ffba03750032
03750032051b003204b5002401f4ffba01f4ffba051b003204b50024067f
0045067f0045067f0045067f004501a800280000fe290000fea20000fef3
0000ff1d0000ff120000ff920000fe7e08fc003208ad00320000ff880000
ffaf0000ff3f0000ff640000fe7e0000ff36018d000002f6fffd0000fe82
0000ff1004cd00320000ff580000ff580000ff640692003e0692003e043f
ffba043fffba08c9003e08c9003e06c5ffba06c5ffba045a002a039a0036
0435ffba0327ffba034d007902b400230242003601f4ffba0290ffba01f4
002f01f4003b01f4001201f400b101f4006d067f00140776001401f9009b
0000fee002bc000003f2009b045afff504cefff5045a005304ce004a045a
005304ce004a045a005304ce004a045a005304ce004a045a005304ce004a
045a005304ce004a04350071043500ad045a000f04ce000f047300140611
0014054000a7047300860540000a0473000a05c7005105c7006604000050
05c7fffd067a00140540004a04730046047400480556006e04d5005304e3
ffc40639006d04fe000f070c008701c700830239001f0556009604000088
01c7001504000018072000a405c7ffb80473008b0639006006f200630557
004406090014047300860556009e0556006b0400004f04f20094030b0044
0239002404e300140239002404e3003005fb006105c700a1062e00100400
002104e300290400002804e3002904e30031045c0044045c003f0473003c
0473005503ab003203e5002404730087021400bc034e00bc04ac00720239
00b00aaa009e09c7009e08640046087f009606aa0096039c008309c7009c
078e009c062b0087047300550556fffd0473004a0000fefe0556fffd0473
004a08000001071d00440639006d0473001a0639006d0473004205560096
040000880639006304730044063900630473004404e30029045c004c01c7
ffa20aaa009e09c7009e086400460639006d04730042084600a404f2009e
05c7009c047300870556fffd0473004a0556fffd0473004a055600a20473
004b055600a20473004b0239ff8a0239ff64023900040239fff606390063
04730044063900630473004405c700a102aaffcc05c700a102aa006805c7
00a10473007605c700a1047300830556005c0400003f04e3003002390024
045c0051037e001305c700a40473008705a600a404d6005e0486005e04e3
0029040000280556fffd0473004a055600a20473004b0639006304730044
0000fefd0639006304730044063900630473004406390063047300440556
000604000021047300570473004804730086047300860400001304000050
04730046047300460473005505e9005503ab004903ab0032050d0032040f
00440239ffb90473004204730042047800500402001904ef00190473008b
047300870473008701c7001901c7005702d90044029e0000026e001401c7
00830493008306aa008406aa008406aa00870473ffa60473008b046c0087
0473004406530044063f00570466004402aaffe402aaffe402aaffe402aa
008502aa008502aa008502aaffe40455008a0455008a0400003f01c7ffa2
0214ffb901c7ff7202cb00000239000f0239002404730019048c00540460
00880400001a05c7000604000018042800190400002804540028045c004c
045c0079040000240400005004000024040000500639006304400088040f
004904780050046b0088032e000004000008033b00880473004804000024
0400005007b7004607400046080b004605b30024036f002405c00024061c
0013054a0083050f008303e2001e0438006303110064031100640146ffce
01eb006401eb000001eb000002ea006403d90000029100000187005a02d7
005e01c7008001c7006c01c7008a02aa00fb02aa00fb02ca003202ca0032
04ac007004ac007004ac006504ac006502aa012102aa00de02aa005902aa
012102aa001d02aa005902aa00de023900b6023900b602aa00fb02aa00fb
02aa00a602aa00a602aa00a602aa001d02aaffe202aafffb029400000142
006402b8003202a0000002ca003203100096031000960310009603100096
0310009602aa006202aa006202aa002802aa001d02aa0047045700960457
009604570096045700960457004304570043045700430457004304570043
031000430457002f0457002f0457002f0457002f0457002f0310002f0457
0025045700250457002504570025045700250310002f0457001a0457001a
0457001a0457001a0457001a0310001a0457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
04570042045700420457004204570042031000420457002f0457002f0457
002f0457002f0457002f0310002f0457002f0457002f0457002f0457002f
0457002f0310002f04570026045700260457002604570026045700260310
002604570042045700420457004204570042045700420310004204570096
045700960457009604570096045700420457004204570042045700420457
004203100042045700260457002604570026045700260457002603100026
0457002304570023045700230457002304570023031000230457002f0457
002f0457002f0457002f0457002f0310002f0457004b0457004b0457004b
0457004b0457004b0310004b045700960457009604570096045700960457
004204570042045700420457004204570042031000420457001a0457001a
0457001a0457001a0457001a0310001a0457002404570024045700240457
002404570024031000240457002f0457002f0457002f0457002f0457002f
0310002f0457004e0457004e0457004e0457004e0457004e0310004e0457
00960457009604570096045700960000fec10000fec60000fdac0000fed8
0000ff920000fee90000ff4c0000fea00000fec40000ffce0000ff660000
fea00000fed80000fed80000ff970000ff980000ff990000fff40000ff42
0000ff420000ff440000ff5f0000fe870000ffec0000ffa60000ff510000
ff510000ff510000fec90000ff1c000000000000fee90000ff4c0000ff93
0000ff2a0000ff560000ffce0000fe870000febb0000fec40000fec40000
fed80000fed80000feb30000fec90000fdad0000fec80000feb30000fec9
0000fdad0000fe160000fee60000ffa60000fe870000ff440000feba0000
ff230000ff9a0000fdac0000fe88000000000000feb00000ff980000fe93
0000ffa60000fe870000fe1c0000ff660000ff440000feb00000feb00000
feb00000ff030000ff520000fd1f0000ff530000ff530000ff530000feb5
0000feb50000ffc30000feae0000fedc0000fec70000fec80000fedc0000
fe1e0000ff420000ff510000feb70000feb002aa00de02aa005902aa00fa
049a007004600000062e001407aa0000062e0014047b004c063f005704cf
0044063900630473004405c700700400005004e300a8033b008804ff0000
043c0032060d000a049d0042072000a406aa0084056500630473008b0564
00a40400000a0556006b0556006b04e0000504c5001905e5005f046e0044
03b600140347002804cf00440495005b0400005001c7ffa2063900600389
004d03890050055600a205c000a10473004b047800870ab4006d04fe0010
0639001404e70014079900bf05b500880558000104000006072e00bf0590
008806a10078057b007a086d00bf06f0008804d5006603ab001f065f0039
058200480639006004730044066d0009050c001a066d0009050c001a0898
0063072c004406aa002004e6001c0987006d06d000500000fe370ab4006d
04fe001005c7006604000050040700140000fea60000febc0000ff980000
ff980000fc2b0000fc4c05c000a10478008705400004042b00140556009e
04730087055d00a40464008804d5004e03ab003204a900040380000005ef
002904490028070900a4052f0088091800a006f600880606003e042b0023
05c700660400005004e3003003aa0026076700310587002605550057042b
004506e4000a0554000a06e4000a0554000a023900bf07630007055afffb
055700a1046800860540001204ab001805c700a4046b008805c700a4046b
008805550057042b004506aa00980580008c02aa002e0556fffd0473004a
0556fffd0473004a08000001071d0044055600a20473004b060500630473
005507630007055afffb04d5004e03ab003204d5004e045c004c05c000a1
0478008705c000a1047800870639006304730044063900600473004405c0
004a0415002b0515000a040000210515000a040000210515000a04000021
05550057042b0045071500a805c0008b0540004a0473004607bf004a0703
004607a6006606860053054d00660413005307c3001207470018084600a4
070700880639006d0478005005f90030055300260000ff430000ff290000
ff6a0000ffac0000ff590000ff560000ff730000fed70000fe5c0000005e
0000ff560000ff56000000500000ff0b0000fe550000ff430000ff5c0000
ff750000ff640000ff560000ff0b0000ff8a0000ff560000ff430000ff43
0000ff640000ff75000000500000fddd0000ff750000ffad0000fefe0000
fefe0000fedf0000fedf0000ff580000ff200000fefe0556fffd0473004a
05560096047300860556009604730086055600960473008605c700660400
005005c7009e0473004605c7009e0473004605c7009e0473004605c7009e
0473004605c7009e04730046055600a20473004b055600a20473004b0556
00a20473004b055600a20473004b055600a20473004b04e300a802390013
0639006d0473004205c700a40473008705c700a40473008705c700a40473
008705c700930473006805c700a4047300870239ffdf01c7ff9202390020
023900060556009604000088055600960400008805560096040000880473
009601c7007e0473009601c7ffb90473009601c7ffa50473009601c7ffa3
06aa009806aa008706aa009806aa008706aa009806aa008705c7009c0473
008705c7009c0473008705c7009c0473008705c7009c0473008706390063
047300440639006304730044063900630473004406390063047300440556
009e047300870556009e0473008705c700a102aa008505c700a102aa0085
05c700a102aa005e05c700a102aa00260556005c0400003f0556005c0400
003f0556005c0400003f0556005c0400003f0556005c0400003f04e30030
0239002404e300300239002404e300300239ffff04e300300239000e05c7
00a10473008305c700a10473008305c700a10473008305c700a104730083
05c700a104730083055600090400001a055600090400001a078d001905c7
0006078d001905c70006055600090400000f055600090400000f05560006
0400002104e300290400002804e300290400002804e30029040000280473
00870239000305c70006040000210473004a01c7008904a0004804a00048
04a0004804a0004804a0004804a0004804a0004804a000480556fffd0556
fffd06820013068200130682001306820013068200560682005603910062
0391006203910062039100620391006203910062061e0000061e0000076c
0000076c0000076c0000076c00000473008b0473008b0473008b0473008b
0473008b0473008b0473008b0473008b068f0000068f0000081f0000081f
0000081f0000081f0000081ffff3081ffff301c7008101c7008101c7ff9b
01c7ff9b01c7ffeb01c7ffeb01c7ffa201c7ffa203010000030100000491
00000491000004910000049100000491fff30491fff30473004404730044
04730044047300440473004404730044069d0000069d0000082d0000082d
000007c9000007c900000460008804600088046000880460008804600088
0460008804600088046000880682000007ae00000812000007ae0006063f
0057063f0057063f0057063f0057063f0057063f0057063f0057063f0057
065f0000065f000007ef000007ef0000078b0000078b0000078bffff078b
ffff04a0004804a0004803910062039100620473008b0473008b01c7ffe6
01c7006804730044047300440460008804600088063f0057063f005704a0
004804a0004804a0004804a0004804a0004804a0004804a0004804a00048
0556fffd0556fffd06820013068200130682001306820013068200560682
00560473008b0473008b0473008b0473008b0473008b0473008b0473008b
0473008b068f0000068f0000081f0000081f0000081f0000081f0000081f
fff3081ffff3063f0057063f0057063f0057063f0057063f0057063f0057
063f0057063f0057065f0000065f000007ef000007ef0000078b0000078b
0000078bffff078bffff04a0004804a0004804a0004804a0004804a00048
04a0004804a000480556fffd0556fffd0556fffd0556fffd0556fffd02aa
00e502aa00fd02aa00e502aa000602aa00060473008b0473008b0473008b
0473008b0473008b068200000682000006f3000006f3000005c700a402aa
001302aa001302aa000601c7ffbb01c7ffab01c7ffca01c7ffca01c7ff93
01c7ff930239001a0239fff5036500000365000002aa001302aa001302aa
000604600088046000880460008804600088048d0083048d008304600088
04600088055600060556000606e6000007180000061e000002aaffea02aa
ffea02aa0059063f0057063f0057063f0057063f0057063f005707650000
069d000007270000065f000005fb006102aa00de02aa00e50473000d05c7
006605c7006606aa008705c70024095000a1078d00190556001f04e30030
080000290400003004c100660000ff530000ff530000ff530000ff5301c7
001901c7ffa2042b0005055600110574004602cbffa3057a008702f0ffc8
057f000a057f000a02aa008402aa008402aa00c902aa00c902aa00a002aa
005902aaffaf02aa003a02aa0006023900b902aa00a902aa00a902aa00a9
02aa00a9032e001e032e001e02aa003a0000ff730000ffa50000fed80000
ff230000ff720000ff720000fee70000ffa50000ff530000ff530000ff53
0556009e0473008703f8001905fb0019071d004404400019040000500469
00870469001903eb008703ab003201c70088036100410400008803360010
0580008c04780087047300440400001304de004404de004404de000d078d
005003a800440473004404730044042b00840455001f0455001f03aa0026
0460008804c6004405de004404c600440400001a05c700060400002803ab
0032036b003f04db001f02eb00880400001a04550088042b008405b4007a
04ab001803a00000054f0000035100320351ffd103980032034800320348
003203f80032036e0032015600690284002d0366003202d0003204150032
03710032036f003204180032030f003203590032039c003203760031036f
003204fb000002fa003202fa00320304003204cc00320305006403050032
02f9003202f90032028c0032028c0032030400320142006402b600640495
0064030f00640305003202d5003203050032030500320306006401c20032
030f00640342003204950064029200000320000003150064029200000306
00320385003202bf00000142006401eb0064030f00640292000003150064
02920000030900320385003202bf0000077d00460a660046038300460a2f
00460541ffba01e9003c045a00110000ff0d0000ff350000fece0000feb7
0000fec90000ffcf0000ff4f0000ff9e0000feca02b3005f02b3005f03e9
004a03e9004a039affba0327ffba039affba0327ffba05ad0069053d002d
05fd009604dc005004e0003c05f6009b053f00280650002804ac00720000
000000000000000000000473fffc02aa005302d5ffce01a8ffba01a8ffba
01a8ffba01a8ffba0658001509c500470400000008000000040000000800
000002ab000002000000015500000473000002390000019a000000ab0000
0000000005e5000305c7006606aa00980580008c07440083071800460718
00480556fffd05c70066040000140473000a04e300300400004f04000028
04a5001d000001020000ff420000febf0000ff3a0000ff53048d000a05c7
005105c7006605c70051045500a102eb00880000ff430000ffac0000ffac
02d2009600000000021affba0250001e0000ff3a0000ff5b0000ff5f0000
ff7e0000ff940000ff4a0000fe9c05b5003a05b5003a01f4ff9601f4ff96
05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4
ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba0481003604350036043dffba043dffba0481003604350036
043dffba043dffba02b3003202b3003202b3005f02b3005f03e9004a03e9
004a0692003e0692003e043fffba043fffba045a002a039a00360435ffba
0327ffba045a002a039a00360435ffba0327ffba045a002a039a00360435
ffba0327ffba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba067f0014077600140327ffba041effba067f00140776
00140327ffba041effba067f0014077600140327ffba041effba02b40023
02b400230327ffba0327ffba02b4002302b400230327ffba0327ffba0435
00450435004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba
043500450435004501f4ffba01f4ffba040d0047040d004701a8ffba01a8
ffba03e9004a03e9004a03e9004a03e9004a0692003e0692003e043fffba
043fffba0473ff93047300460239ffbf06aaffd50473ffb70473ff9102aa
ffa402aaffa40400ffff0239ffb90400002804730089030b006404740048
0649002401c7001901c700190473001e0460001e048c000a047300860473
00460239001305b400420400008801c7fffc06aa00870473008b04730087
02aafffb0400003f0318ffa20400001a0400000f040000280473004a0473
0048047300460473004b03ab004903ab00320534005501c7008804000013
01c7ffa204730083045c004c0304006402d5003202c9003302fc0032028c
003201d5003201d500000304003203110064014200190142006401420064
01420019022a00000142006401420009023300640493006404930064030f
ffc9030f0064030e0064030500320300003202b800320142ffca01c20032
030f001d031a00320306006402d400640292000002de003202de003202de
003202f4003202ea00320000febc0000febc0000ff730000fea9023900b9
02fa003202f900320305003202a0000002f900320639006d0556fffd0473
000f05c7006602aa004104a0004804a0004804a0004804a0004804a00048
04a0004804a0004804a0004801c7ff9b01c7ffab01c7ff9b01c7ffab01c7
ff9b01c7ffbb01c7ff9b01c7ffbb04600088046000880460008804600088
0460008804600088046000880460008801c7ffab01c7ffab01c7ffbb01c7
ffbb04600088046000880460008804600088045a005304ce004a03a00013
0556001105c700290558000b055600a20473004b0400003301c7ffa205e6
00630473004805c7000002aa000f05560006040000210400001304000050
0400001301c700830455fffd02eb0001055600090400000f055600090400
000f04d5005303ab00490540001204ab00180000fec60000fed40000fec6
0000fed40000fe5f0000fe5f0000ff720000ff730000fee7078b000a03eb
004c040000130473000a01c700150473fff40556001105c700a104730019
0239ff8b05c700a404730087055600960400008804e30029040000280400
003b049e00a403670088053000480000ff530000ffbc0000fefe0000fefe
0000fea40000fea401c7008805c900a505c7009c05c900a50000fecd0000
ff480000fec90000fece0000fec50000fed00000fed10000feee0000fed6
0000fedc0000fdd90639005804730048078d001905c70006059f00a40000
feb905dc006304c60009084c001906ba0006023900b9038000720187005a
0187005a0400009904000099023900b0023900b0023900b002aa00190000
00460000003b000000310000005600000044000000560000004a00000049
04e30030047300500473005c0312003f045000480446003d047300310450
003d047d00620427003f0473005604790054047300550319003b0473003c
047300560473003204730055047e0062042f004b04730053047b005505c5
006a05d3006305f800a6094a00a605f8009c0302003b054100a406390060
0472004601c7008903f80087020a00890473004e0250000e047800850473
005c0473005c0302003b020a008901c70088047100000489009804c3005c
04e70098046f009804080098052f005c04f0009801ea0098037300290489
009803bc009805c7009804ec00980531005c046d00980531005c04db0098
046d004a0410002904dd0091046800080659001e046f0008046c0008040e
001f0691000006aa005c03bc003805310031046f009804e7001404c30090
04710000047100000471000004710000047100000471000004c3005c046f
0098046f0098046f0098046f009801eafff401ea008e01eaffb601eaffda
04ec00980531005c0531005c0531005c0531005c0531005c04dd009104dd
009104dd009104dd0091046c000804710000047100000471000004c3005c
04c3005c04c3005c04c3005c04e7009804e70014046f0098046f0098046f
0098046f0098046f0098052f005c052f005c052f005c052f005c04f00098
04f2002e01eaff9601eaffbd01eaffd401ea003e01ea0087054300980373
00290489009803bc009803bc009803bc009803bc009804ec009804ec0098
04ec009804f500980531005c0531005c0531005c04db009804db009804db
0098046d004a046d004a046d004a046d004a046d004a0410002904100029
04100029040e002904dd009104dd009104dd009104dd009104dd009104dd
00910659001e0659001e0659001e0659001e046c0008046c0008046c0008
040e001f040e001f040e001f047100000691000005310031047100000489
009803ae009804710000046f0098040e001f04f000980531005c01ea0098
04890098045a000205c7009804ec0098042f004c0531005c04e60098046d
00980425006a04100029046c00080546004c046f00080543004c05310052
04710000046f009804f0009801ea008e0531005c046c00080531005201ea
ffda046c0008046f009805af002903ae009804c7005c046d004a01ea0098
01eaffda0373002906f4000f06b6009805da0029041600980463002304e6
009804710000048600980489009803ae00980469000f046f009806540023
041f004604e5009804e50098041600980469000f05c7009804f000980531
005c04e60098046d009804c3005c0410002904630023050d004c046f0008
04dc0098047d004c06280098061e0098057c003c05e700980455009804c6
004606af009804db00120323009802aa002202aa006b02aa001902aa0021
02aa001702aa002202aa002e02aa004902aa002a02aa003302aa002e02aa
003302aa002205c5006a05c5006a05c5006a05c5006a05c5006a05c5006a
05c5006a05c5006a05c5006a05c5006a05c5006a05d3006305d3006305d3
006305d3006305d3006305d3006305d3006305d3006305d3006305d30063
05d3006305f800a605f800a605f800a605f800a605f8009c05f8009c05f8
009c05f8009c05f8009c05f8009c05f8009c05f8009c05f8009c0302003b
0302003b0302003b0302003b030200320302003b0302003b0302003b0302
003b0416ffac0302003b0302003b0302003b020a0089020a004e02690089
02a50089020a00070302003b0302003b0302003b0302003b030200320302
003b0302003b0302003b054100a404720046047200460472004604720046
047200460472004604720046047200460472004601c7ffa703f80087020a
0089020a004e0269008902a50089020a00070250000e0250000e0300000e
0250000e0478008504780085047800850478008504a0005702aa001702aa
002202aa004902aa002a04ee001504ed009d04ed009d060b001a04d50085
05e3008502260099022600890226002c0226001e02260063022600300226
001b0226001d0226001d022600290226001e022600260226001d02260008
022600280c9600460e0c00460000ffba0ed200460000ff5b0000ff910000
ffb70000ff9b0481003604350036043dffba043dffba0481003604350036
043dffba043dffba0692003e0692003e043fffba043fffba03e9004a03e9
004a0481003604350036043dffba043dffba01a8ffc301d6ff5f01a8ffe9
01d6ff85051b003204b5002401f4ffba01f4ffba051b003204b5002401f4
ffba01f4ffba051b003204b5002401f4ffba01f4ffba0375003203750032
0375003203750032067f0045067f0045067f0045067f0045048100360435
0036043dffba043dffba0692003e0692003e043fffba043fffba0692003e
0692003e043fffba043fffba04cf002d04cf002d0327ffba0327ffba04b4
ffe00500ffe00496ffe804e4ffe8075c003205da0032070e003205130039
0bb700000000fe2c0000fffc0000006b000000730000006b051b003204b5
002401f4ffba01f4ffba067f0014077600140327ffba041effba067f0014
077600140327ffba041effba051b003204b5002401f4ffba01f4ffba051b
003204b5002401f4ffba01f4ffba051b003204b5002401f4ffba01f4ffba
0000fff5049e00a403cd000a04e3003003aa002605c000a104ac00870556
00960473005a0a6600440473007e0556001d07ae001206150018064e009e
05be008707a9000906da001f0556009604000086088c000d07130018090e
00a406ce008805c700a40455008805a300a2046f00870239001302390013
04740048062200bf032f000e04ba005c0474004905590014049b000a06aa
00980556fffd05dc00a50590004b02aaffe50473004403eb004c0146ffce
029200000556005c04e3002902390069063c00aa0b56ffc2084aff120b0c
00320ed2004401a8ffba01a8ffba01a8ffba01d6000201a8003201a80046
01a8ffba01a8001a0251003a01a8002901a8004601a8ffba01a8004801a8
ffba01a8002901a8ffba01a8004601a8ffba01a8006e01a8ffba01f4009e
01f4001001f4001b01f4001001f4fff9022e008d01f4006b0199004602bf
003202bf00320473000f02ea001302ea00130427fff70427fff7051b0032
051b0032051b0032051b0032051b0032051b0032051b0032051b00320480
00240480002403e5ffba048000240480002403e5ffba05b5003a05b5003a
01f4ffba01f4ffba0481003604350036043dffba043dffba04a7ffba04a7
ffba04a7ffba04a7ffba064f0027064f00270224ffba021affba04a70046
04a700460224ffba021affba040d0047040d004701a8ffba01a8ffba02b4
002302b400230327ffba0327ffba051b003204b5002401f4ffba01f4ffba
051b003204b5002401f4ffba01f4ffba03b7004a03b7004a037500320375
0032036b0046036b00460000ff1e0000ff480000ff1e0000fee70000ff4f
0000fef90000ffb50000ff520000ff470000ffb50000ff520000ff470000
ff000000fea60000ff000000ff230000ff240000ff570000ff570000ff92
0000ff920000ff920000ff920000ff2f0000fed70000ff340000ff31045a
005304ce004a0000ffac033100190411002d04d10096052400280000ffac
0000ff2a028d00ab028d00a00444003c043d003c0444003c043d003c0444
003c043d003c0445003c0444003c043d003c04a70046028d00ab03270022
02300014017a002e0473001c064a004c065b008700>
<000000000000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c0000006c0000006c0000006c0000006c0000006c0000006c
0000006c0000006c0000006c0000006c0000006c0000006c0000006c0000
006c0000006c00010000100702b5003c00ca000700020010002f00590000
04bf05ec000500020000000e00ae0000000300000000021a000000000003
000000070064021a0001000000000000010d027e0001000000000003000e
038b0001000000000004000e03990001000000000006000e03a700010000
00000007003103b50003000004090001001c03e60003000004090002000e
04020003000004090003001c04100003000004090004001c042c00030000
04090006001c04480003000104090000021e046400030001040900070062
068200a90020003200300031003400200054006800650020004d006f006e
006f007400790070006500200043006f00720070006f0072006100740069
006f006e002e00200041006c006c00200052006900670068007400730020
00520065007300650072007600650064002e0020000d000d004800650062
0072006500770020004f00700065006e00540079007000650020004c0061
0079006f007500740020006c006f00670069006300200063006f00700079
00720069006700680074002000a900200032003000300033002000260020
0032003000300037002c002000520061006c00700068002000480061006e
0063006f0063006b002000260020004a006f0068006e0020004800750064
0073006f006e002e002000540068006900730020006c00610079006f0075
00740020006c006f00670069006300200066006f00720020004200690062
006c006900630061006c0020004800650062007200650077002000690073
0020006f00700065006e00200073006f007500720063006500200073006f
00660074007700610072006500200075006e006400650072002000740068
00650020004d004900540020004c006900630065006e00730065003b0020
00730065006500200065006d0062006500640064006500640020006c0069
00630065006e007300650020006400650073006300720069007000740069
006f006e00200066006f0072002000640065007400610069006c0073002e
0041007200690061006c0020002000690073002000610020007400720061
00640065006d00610072006b0020006f006600200054006800650020004d
006f006e006f007400790070006500200043006f00720070006f00720061
00740069006f006e002ea9203230313420546865204d6f6e6f7479706520
436f72706f726174696f6e2e20416c6c2052696768747320526573657276
65642e200d0d486562726577204f70656e54797065204c61796f7574206c
6f67696320636f7079726967687420a92032303033202620323030372c20
52616c70682048616e636f636b2026204a6f686e20487564736f6e2e2054
686973206c61796f7574206c6f67696320666f72204269626c6963616c20
486562726577206973206f70656e20736f7572636520736f667477617265
20756e64657220746865204d4954204c6963656e73653b2073656520656d
626564646564206c6963656e7365206465736372697074696f6e20666f72
2064657461696c732e4147474d4e502b417269616c4d544147474d4e502b
417269616c4d544147474d4e502b417269616c4d54417269616c20697320
612074726164656d61726b206f6620546865204d6f6e6f7479706520436f
72706f726174696f6e2e004100470047004d004e0050002b004100720069
0061006c004d00540052006500670075006c00610072004100470047004d
004e0050002b0041007200690061006c004d0054004100470047004d004e
0050002b0041007200690061006c004d0054004100470047004d004e0050
002b0041007200690061006c004d005400a9002000320030003100340020
0054006800650020004d006f006e006f007400790070006500200043006f
00720070006f0072006100740069006f006e002e00200041006c006c0020
005200690067006800740073002000520065007300650072007600650064
002e0020000d000a000d000a0048006500620072006500770020004f0070
0065006e00540079007000650020004c00610079006f007500740020006c
006f00670069006300200063006f00700079007200690067006800740020
00a9002000320030003000330020002600200032003000300037002c0020
00520061006c00700068002000480061006e0063006f0063006b00200026
0020004a006f0068006e00200048007500640073006f006e002e00200054
0068006900730020006c00610079006f007500740020006c006f00670069
006300200066006f00720020004200690062006c006900630061006c0020
0048006500620072006500770020006900730020006f00700065006e0020
0073006f007500720063006500200073006f006600740077006100720065
00200075006e00640065007200200074006800650020004d004900540020
004c006900630065006e00730065003b002000730065006500200065006d
0062006500640064006500640020006c006900630065006e007300650020
006400650073006300720069007000740069006f006e00200066006f0072
002000640065007400610069006c0073002e0041007200690061006c0020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e002e0000410c
0054032c032c032c0222001d001f032b032a003c001f032ab2061d1fb803
28b326181fd0bc032900e0032900020329b22b1d1fb90327031db23b1f40
b80323b31215320f412d03200001002f0320000100200320006f032000af
032000bf03200004005f031e00010010031e007f031e0080031e00af031e
00bf031e00d0031e00060000031e0010031e0020031e006f031e009f031e
00e0031e0006031d031cb2201f1041270319007f03190002000f031700ef
031700ff03170003001f0317002f0317004f0317005f0317008f0317009f
03170006000f0317005f0317006f0317007f031700bf031700f003170006
00400317b2923340b80317b28b3340b80317b36a6c3240b80317b2613340
b80317b35c5d3240b80317b357593240b80317b34d513240b80317b34449
3240b80317b23a3340b80317b331343240b80317b32e423240b80317b327
2c3240b80317b312253280b80317b30a0d32c04116031600d00316000200
700316000102c4000f0101001f00a0031500b0031500020306000f010100
1f00400312b32426329fbf03040001030203010064001fffc00301b20d11
32410a02ff02ef0012001f02ee02ed0064001fffc002edb30e11329f414a
02e200af02e200bf02e2000302e202e202e102e1007f02e00001001002e0
003f02e0009f02e000bf02e000cf02e000ef02e0000602e002e002df02df
02de02de000f02dd002f02dd003f02dd005f02dd009f02dd00bf02dd00ef
02dd000702dd02dd001002dc0001000002dc0001001002dc003f02dc0002
02dc02dc001002db000102db02db000f02da000102da02daffc002d3b237
3932b9ffc002d3b22b2f32b9ffc002d3b21f2532b9ffc002d3b2171b32b9
ffc002d3b2121632b802d2b2f9291fb90326031cb23b1f40bb0322003e00
330322b225311fb80318b23c691fb802e3b3202b1fa0413002d400b002d4
0002000002d4001002d4002002d4005002d4006002d4007002d400060060
02d6007002d6008002d6009002d600a002d600b002d60006000002d60010
02d6002002ca002002cc002002d6003002d6004002d6005002d6000802d0
b2202b1fb802cfb226421f411602ce02c70017001f02cd02c80017001f02
cc02c60017001f02cb02c50017001f02c902c5001e001f02ca02c6b21e1f
00410b02c6000002c7001002c6001002c7002f02c5000502c1b324121fff
411102bf0001001f02bf002f02bf003f02bf004f02bf005f02bf008f02bf
000602bf0222b2641f12410b02bb00ca0800001f02b200e90800001f02a6
00a20800406a1f4026434932402043493240263a3d3240203a3d329f209f
26024026969932402096993240268e923240208e92324026848c32402084
8c3240267a813240207a813240266c763240206c76324026646a32402064
6a3240265a5f3240205a5f3240264f543240204f5432b8029eb724271f37
4f6b0120410f0277003002770040027700500277000402770277027700f9
0400001f029bb22a2a1fb8029a402b292a1f80ba0180bc0180520180a201
806501807e01808101803c01805e01802b01801c01801e0180400180bb01
38000100800140b40180400180bb013800010080013940180180ca0180ad
018073018026018025018024018020013740b80221b2493340b80221b245
3340b80221b341423240b80221b33d3e320f410f0221003f0221007f0221
000300bf022100cf022100ff0221000300400221b320223240b80221b319
1e3240b80222b32a3f3240b80221b32e3a326f414a02c3007f02c3008f02
c300df02c30004002f02c3006002c300cf02c30003000f02c3003f02c300
5f02c300c002c300ef02c300ff02c3000600df02220001008f0222000100
0f0222002f0222003f0222005f0222007f022200ef0222000600bf022100
ef02210002006f0221007f022100af02210003000f0221002f0221003f02
21004f0221000402c302c30222022202210221401d101c102b1048038f1c
010f1e014f1eff1e023700161600000012110811b8010db6f70df8f70d00
094109028e028f001d001f0290028f001d001f028fb2f91d1fb80198b226
bb1f41150197001e0401001f013900260125001f013800730401001f0135
001c0801001f0134001c02ab001f0132b21c561fb8010fb2262c1fba010e
001e0401b61ff91ce41fe91cb80201b61fe81cbb1fd720b80401b21fd51c
b802abb61fd41c891fc92fb80801b21fbc26b80101b21fba20b80201b61f
b91c381fadcab80401b21f8126b8019ab21f7e26b8019ab61f7d1c471f6b
1cb80401b21f6526b8019ab21f5e73b80401400f1f52265a1f481c891f44
1c621f4073b80801b61f3f1c5e1f3c26b8019ab21f351cb80401b61f301c
bb1f2b1cb80401b61f2a1c561f291cb80101b21f231eb80401b21f5537b8
0168402c07960758074f07360732072c0721071f071d071b071408120810
080e080c080a080808060804080208000814b8ffe0402b00000100140610
000001000604000001000410000001001002000001000200000001000002
010802004a00b013034b024b5342014bb0c063004b6220b0f65323b8010a
515ab005234201b0124b004b5442b0382b4bb807ff52b0372b4bb007505b
58b101018e59b0382bb00288b801005458b801ffb101018e851bb0124358
b900010111858d1bb900010128858d5959001816763f183f123e11394644
3e113946443e113946443e113946443e11394660443e11394660442b2b2b
2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b182b1db0964b5358b0aa
1d59b0324b5358b0ff1d594bb09353205c58b901f201f04544b901f101f0
45445958b9033e01f2455258b901f2033e4459594bb8015653205c58b900
2001f14544b9002601f145445958b9081e0020455258b90020081e445959
4bb8019a53205c58b9002501f24544b9002401f245445958b90909002545
5258b9002509094459594bb8040153205c58b173244544b1242445445958
b917200073455258b9007317204459594bb8040153205c58b1ca254544b1
252545445958b9168000ca455258b900ca16804459594bb03e53205c58b1
1c1c4544b11e1c45445958b9011a001c455258b9001c011a4459594bb056
53205c58b11c1c4544b12f1c45445958b90189001c455258b9001c018944
59594bb8030153205c58b11c1c4544b11c1c45445958b90de0001c455258
b9001c0de04459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b01b33b59635c45
6523456023456560234560b08b766818b080622020b163594565234520b0
03266062636820b003266165b059236544b063234420b13b5c4565234520
b003266062636820b003266165b05c236544b03b2344b1005c455458b15c
406544b23b403b4523614459b347503437456523456023456560234560b0
89766818b080622020b134504565234520b003266062636820b003266165
b050236544b034234420b147374565234520b003266062636820b0032661
65b037236544b0472344b10037455458b137406544b24740474523614459
004b5342014b5058b108004259435c58b108004259b3020b0a124358601b
2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c2342
b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b00f23
42b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342002b
7475737500184569444569444569447373737374757374752b2b2b2b7475
2b2b2b2b2b73737373737373737373737373737373737373737373737373
2b2b2b45b0406144737400004bb02a534bb03f515a58b1070745b0406044
59004bb03a534bb03f515a58b10b0b45b8ffc0604459004bb02e534bb03a
515a58b1030345b040604459004bb02e534bb03c515a58b1090945b8ffc0
6044592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b752b2b2b2b2b2b2b43
5c58b9008002bbb301401e017400735903b01e4b5402b0124b545ab01243
5c5a58ba009f02220001007359002b7473012b01732b2b2b2b2b2b2b2b73
7373732b2b2b2b2b002b2b2b2b2b2b004569447345694473456944737475
456944734569444569444569447374456944456944732b2b2b2b2b732b00
2b732b74752b2b2b2b2b2b2b2b2b2b2b2b2b2b737475732b737475737475
2b2b2b742b002b2b2b00184569442b0000>
[109 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd

2 0 3 <> QJJAAA+ArialMT AddT42Char 
2 0 0 <00020100000005000500000300070042b40201e40607b802994013000504
e403000a0704e4010019080605e40203bc023100090199012e00182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
01000400fc2003c0fc400500fb002004c000>QJJAAA+ArialMT AddT42Char 
QJJAAA+ArialMT /CharStrings get begin
/g3 3 def
end
QJJAAA+ArialMT /Encoding get
dup 32 /g3 put
pop
end
%ADOEndSubsetFont
/XJRSOR+ArialMT /QJJAAA+ArialMT findfont ct_VMDictPut
/XJRSOR+ArialMT*1 
[32{/.notdef}rp /g3 223{/.notdef}rp]
XJRSOR+ArialMT nf
XJRSOR+ArialMT*1 [9.96 0 0 -9.96 0 0 ]msf
91.5 363.14 mo
( )sh
537.96 11.0006 mo
( )sh
1.98 lw
384 288.561 mo
396 288.561 li
3.0518e-5 .990631 1 .000396735 cmyk
@
396 288.621 mo
396.06 288.621 li
396.06 288.561 li
396 288.561 li
cp
f
390 282.561 mo
390 294.561 li
@
390 294.621 mo
390.06 294.621 li
390.06 294.561 li
390 294.561 li
cp
f
217.74 265.461 mo
229.74 265.461 li
@
229.74 265.521 mo
229.8 265.521 li
229.8 265.461 li
229.74 265.461 li
cp
f
223.74 259.461 mo
223.74 271.461 li
@
223.74 271.521 mo
223.8 271.521 li
223.8 271.461 li
223.74 271.461 li
cp
f
366.12 181.461 mo
378.12 181.461 li
@
378.12 181.521 mo
378.18 181.521 li
378.18 181.461 li
378.12 181.461 li
cp
f
372.12 175.461 mo
372.12 187.461 li
@
372.12 187.521 mo
372.18 187.521 li
372.18 187.461 li
372.12 187.461 li
cp
f
[1.98 1.98 ] 0 dsh
238.92 185.001 mo
165.3 236.901 li
166.02 237.321 mo
166.02 343.941 li
165.3 344.361 mo
235.98 318.921 li
239.7 183.801 mo
291.24 266.601 li
289.74 266.601 mo
235.98 319.701 li
302.28 228.741 mo
276.48 149.421 li
277.26 149.841 mo
461.4 133.041 li
461.4 135.021 mo
479.04 196.281 li
303.78 228.741 mo
384.06 230.661 li
383.34 229.881 mo
479.82 196.281 li
389.94 235.761 mo
339.12 256.461 li
338.4 256.881 mo
295.68 290.061 li
389.94 234.561 mo
463.62 249.381 li
295.68 292.041 mo
364.92 350.961 li
364.14 350.181 mo
448.14 318.141 li
465.06 250.641 mo
448.14 318.921 li
@
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/XJRSOR+ArialMT*1 uf
/XJRSOR+ArialMT uf
/QJJAAA+ArialMT uf
/XJRSOQ+KaiTi-GBK-EUC-H-Identity-H uf
/XJRSOQ+KaiTi-GBK-EUC-H /CIDFont ur
/XJRSOP+TimesNewRomanPS-BoldMT*1 uf
/XJRSOP+TimesNewRomanPS-BoldMT uf
/PBAAAA+TimesNewRomanPS-BoldMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
