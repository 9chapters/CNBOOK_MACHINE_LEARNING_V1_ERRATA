%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: ch02-roc2.pdf
%%Creator: Adobe Acrobat 10.0.1
%%For: Nan
%%CreationDate: 2016/12/14, 3:33:03
%%BoundingBox: 0 0 247 207
%%HiResBoundingBox: 0 0 246.7240 206.8740
%%CropBox: 0 0 246.7240 206.8740
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 1096 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
   xmp:CreateDate="2016-12-14T03:32:43+08:00"
   xmp:CreatorTool="PScript5.dll Version 5.2.2"
   xmp:ModifyDate="2016-12-14T03:32:54+08:00"
   xmp:MetadataDate="2016-12-14T03:32:54+08:00"
   pdf:Producer="Acrobat Distiller 10.0.1 (Windows)"
   dc:format="application/pdf"
   xmpMM:DocumentID="uuid:b21d6aa4-c4e7-4857-bb92-e2f59d62fe0b"
   xmpMM:InstanceID="uuid:4ee1d9ca-cf65-4daa-a060-a99b3ea910d7">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Microsoft PowerPoint - figure.pptx</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Nan</rdf:li>
    </rdf:Seq>
   </dc:creator>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
[/DeviceCMYK] /CSA add_res
/0 
<<
/Name (Black)
/1 
[/DeviceCMYK] /CSA add_res
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -206.874 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 206.874 li
246.724 206.874 li
246.724 0 li
cp
clp
.000793 206.814 mo
246.72 206.814 li
246.72 8.35899 li
.000793 8.35899 li
cp
false sop
0 0 0 0 cmyk
f
33.573 175.879 mo
33.873 162.499 li
42.513 163.099 li
42.513 150.319 li
51.393 150.319 li
51.393 131.359 li
59.733 131.359 li
59.733 125.539 li
68.613 125.539 li
68.553 121.579 68.433 117.559 68.373 113.599 cv
77.253 113.599 li
77.253 93.859 li
86.133 93.859 li
86.073 87.679 85.953 81.439 85.833 75.259 cv
95.313 74.959 li
95.013 68.839 li
103.353 68.839 li
103.293 64.879 103.173 60.859 103.113 56.899 cv
112.533 57.139 li
112.533 50.479 li
120.633 50.239 li
120.633 44.359 li
129.513 44.119 li
129.213 37.699 li
137.853 37.699 li
137.553 32.119 li
146.493 32.419 li
146.493 25.999 li
155.073 25.999 li
154.833 19.339 li
197.313 18.799 li
197.313 12.979 li
230.133 12.379 li
33.573 175.879 li
.135653 .0995193 .100282 0 cmyk
ef
33.093 176.959 mo
33.393 162.019 li
42.513 162.559 li
41.973 163.099 li
41.973 149.779 li
51.393 149.779 li
50.913 150.319 li
50.913 130.879 li
59.733 130.879 li
59.253 131.419 li
59.253 125.059 li
68.613 125.059 li
68.133 125.539 li
67.833 113.119 li
77.253 113.119 li
76.773 113.599 li
76.773 93.379 li
86.133 93.379 li
85.653 93.859 li
85.353 74.779 li
95.313 74.479 li
94.833 74.959 li
94.533 68.359 li
103.353 68.359 li
102.873 68.839 li
102.573 56.359 li
112.593 56.659 li
112.053 57.139 li
112.053 49.999 li
120.573 49.699 li
120.093 50.239 li
120.093 43.879 li
129.513 43.579 li
129.033 44.119 li
128.733 37.219 li
137.853 37.219 li
137.373 37.759 li
137.073 31.639 li
146.493 31.939 li
145.953 32.419 li
145.953 25.519 li
155.073 25.519 li
154.593 26.059 li
154.293 18.859 li
197.313 18.319 li
196.833 18.799 li
196.833 12.499 li
231.573 11.899 li
cp
229.833 12.019 mo
230.133 12.919 li
197.373 13.459 li
197.853 12.979 li
197.853 19.279 li
154.833 19.879 li
155.313 19.339 li
155.613 26.539 li
146.493 26.539 li
146.973 26.059 li
146.973 32.959 li
137.553 32.659 li
138.093 32.119 li
138.393 38.179 li
129.213 38.179 li
129.753 37.699 li
130.053 44.599 li
120.633 44.899 li
121.113 44.359 li
121.113 50.719 li
112.593 51.019 li
113.073 50.479 li
113.073 57.679 li
103.113 57.379 li
103.593 56.899 li
103.893 69.319 li
95.013 69.319 li
95.553 68.839 li
95.853 75.439 li
85.893 75.739 li
86.373 75.199 li
86.673 94.339 li
77.253 94.339 li
77.733 93.859 li
77.733 114.079 li
68.373 114.079 li
68.853 113.599 li
69.153 126.079 li
59.733 126.079 li
60.213 125.539 li
60.213 131.899 li
51.393 131.899 li
51.873 131.419 li
51.873 150.799 li
42.513 150.799 li
42.993 150.319 li
42.993 163.639 li
33.873 163.039 li
34.353 162.559 li
34.113 175.879 li
33.273 175.459 li
.699336 .676143 .639429 .746822 cmyk
f
21.993 18.859 mo
21.993 18.559 li
22.233 18.559 li
22.893 18.439 li
23.013 18.199 li
23.013 10.819 li
22.893 10.939 li
22.653 11.059 li
21.933 11.059 li
21.933 10.579 li
22.653 10.579 li
23.073 10.339 li
23.193 10.219 li
23.313 10.159 li
23.373 10.039 li
23.613 9.91901 li
23.613 17.839 li
23.673 18.199 li
23.733 18.319 li
23.913 18.439 li
24.393 18.559 li
24.693 18.559 li
24.693 18.859 li
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: PBAAAA+STKaiti-GBK-EUC-V-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+STKaiti-GBK-EUC-V)
%%Title: (PBAAAA+STKaiti-GBK-EUC-V Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+STKaiti-GBK-EUC-V def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -315 1063 986} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 17311 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
17287 <001C60D8A8C9B5EE3103C9F314FD61CE9F1F71A3CCEB96BF442117774
10FFF8DFFBB2E3FA4864D44CD7A77F2D761389E64C1F6067E295A33230A0D201
D7367B523366AD1B711B8040AA21DA520CF7C712586CAB0BF52DA4E29AD6F4F5
B338C675D65D1C00C05095BE2102E0FD62A6FA5EB32EF4B923930C3A831AF8E1
4D809ED3B5BB3D0CFF2E4B3D63A5DCF1D02008B340BB0E7FD3787BCDD6CE17B0
F008B14DAEF8F11E66F46EBDE668AA1F5BF10DD5E9C392E0014D6AEB7E42776F
94CED2ECCCCF7C303FDEA3F12A6B8DCB3B08E274E745C12E4EBAC34153EC3535
551F9470FE9E9C23900AA445C2FB22C37AC418937F197285DCB3726367646D31
8FA76C49A96DE409718A5F11E58085793C6AAF6E56A148CE82BFD86748DEA8CC
408E93B9CBB08C921A875CECCA71839864AE3F63750FA2CBA64A99B45ABCE632
F83CDDA7BF7AEA068ED7B3A71B970CBA4762DFAA386B8C122F7169348E49A578
EB681DBA22ED3EA673A54E9600F372F4AE215817B0DAD05419564AF473EFCEA7
DE7F4D86276F1B3E967F72BA3E7EAA74535D8A7E57A6715890408FE40273D0A6
E065B7B2C617CE59EBF3C01675D80B230113478BDCDED6E9BC8326425025C064
B9AB281435086733D19F4B4151B3067CE3E02BA3270B42FB82A4F37DD57BDA27
8580A0C663875D897E2F63D777608784ED64531002ED4925A12726A70B0EA8E1
705905ADA9BD8AEB66BF4378779C2F9AB0DF7261A5B03F773B645879A647BB3A
933D239030378C6268AA5E173C9B92F94E9BEFAA5B5CFB795D85B0EC16B72BD6
5CBAE8DA3ACC39D6FB66B95EC93890890C95166A2B2A1D96120F57A4A0DCC05A
D1A9736C5DD9FD2C9DAD560A15AB21A3ED13899784478772206A4B59CDEDF07E
21681F68C8223FF82469F72628C9C9EF991CD41B8130283E1ABBD82AEC038421
155CFF8ECE5F8AF730CA2A76B8E3423D8702F> |
17310 <001C60D8A8C9B5EE3102F77FA550FB4CC68CCEE35567B40AA7FB4E453
3B18DC75078339AC3699E856970BD28D7392CFFCAC9E5DC561D5E3C2D942E301
78E1B7E123E4DFD3B32553A81C4DF0B4246EF20C769B497BCA99472088C73CAE
7831BBCC048402983B41095F4B0AE94E1CFDCEB28EF22F90ECFE9E1653B247FF
89A8E5BB7286A3C61EF11FC17E0817718874BBCB3879A661AE1044F68D0A685C
3ED7BCDF35FEFF0B5DF4B3C8A23301133820F0EE22FBA614CA94E7A1E58F0619
4DAE95E48F78C2450CC3F3AC61FDC46E995FCC9C051432AD39E42E699217ED35
2035FAF562A2D7904F5AC4D182E6FBEBA42013F3AF175821383631BC2A7D7EBE
E403D6C47A91412A870DF5F9EBD1FBBCE6DA00A950A4A41384064909BAEB5E10
4EC03A625CD2FF1D057CCFE73701749A23EA85FE8BC7DA09E6DDB393B76A3A6C
A6459266126E944C7430002CC52CB3132C4862B5D0DB6AB188669D6BAF4CA88> |
13278 <001C60D8A8C9B5EE310D62F2356602FFE00254D015B9CD93F92B72438
D0222A167C13F2F2ECF26F194C30D356D3190D0E945EAB7F6B84A865A58C57F8
5418FB3E9469C28EB8BCE79E2ED6A489792FBA89BD03AC7B06FF3D96471CB3B7
8FAC659AA936E2F7CBD6BA193151DB0D542B6AEE87715484B5939E12940D4466
E633054A1E194B43BD410F0D5B0760AEFE385CDBEE91BFE54818D22D8AF0F6E4
ADA03362149AFA7B5E5F8DD90021BC76631EC976CE2D2784759BFA1FBDD9FFA6
D15BB3B5335C5198BBF59F812BC8679CE2F5DAA3F7D7471EB87BCC9478AFCD18
A1A4DAE5ADB639ECDD22766EE7B7434C47171E752D5F6E6FBAE5B9FE09C60C4A
663AE1C8DF1BECB2556F878CE9E6E1B26BD5DA16DA57E672130DBB6BBCF9A98C
6790D684DADE0CBE35D9498384E656A0E1B696F308D995ED597D2A50E7271338
0217F85F9D25DD4C26560EC506FA94DFBD049FDFF82956E024E3B683AB8DDF36
92C06420A810C66991182D485F9F812488C4B3DD45619170564D801A4C469BB1
F05089FD274195B83CB08FAEDAC61647AADE2D1E7641BE5E073E1A86C2064966
C952DA8FE95E1EE5245905800855AF7D315C994CFAA2DBE379CA5F275A607DEB
93F1A3B0E0CCC88DCF7E5987BFF8FBD157C74728642D306AC6E94BEDAD6DFA86
589651A6B44AC5459D9CBDFD3A5C285AF6A062EEFD8B2548CDC5810D7E72D0A0
A670C7D88064B26A045F598E4101E6BE258C28EFEA9D85333E4E30B452B79CDF
6FA82081F5A2E50F7027124DEE77121552A3E0EF9A1C49B77A006F53E0B7BF84
1E59FCE0F449086B8B23E03DA5AD52B78655BF45BC806576B9ACE68478B30016
4792E5AC21F6C2CA1B8BE0C78DC3BEE496C495E2DE1CED5D05191ADD27C65169
EDCF484734BD08D07370E95CA10BC4AA46C2EB6647064817C962A0D120217760
2E6178246CA6ED8C128438C29EE64FFA7C3A1C722AF42CB2D99DC42EEE3042C4
53F7790F926F82D6865FDC7C9506FE6FB8839DF5E04D5B8A34D44443D72F9DAA
F8D> |
13611 <001C60D8A8C9B5EE3102E13CB3FB7F5E140A8785A85E60FB9ECDBEAE9
8B39273A5207EF086B9638B435761E38CA4D7CF46520108117A6866B20A4DF2D
695C8E8F3ED65CB2AFE8FC9F5BEBB7BA027C0D144E3012D26C70EE472E136813
12113116CB0D43FD450F48E6EAEC2DA0796DD64E506FF0FF1635DBE9B51969CD
2A281BDECD44651B3B594AE407FD94E71B6E30C88592B1987F351EA95BD049F2
01AD69E29EB43B9A94A6D0E15E7319A5623B212C469293D45D1BBFB5A8D560DA
0AFF11CB94AD430C2CB2CD50F26E188728936CE77A15265A672F333E68C4891A
E2E5E74B463F45569A1123703D271B71B82A214F3D9F85C8B6D1EA7CC48DF215
F47E004CF77775C41C943817C35B42F88EA3A4B3636BCFA84BACE3609BB7D82E
3FFF45BED59E9A5E8BACA71B2A646795D0E6055A5B7B515CE1ADEDDCCA216174
100F66E494B90B006DBE20CF6889D3956354999C8E1F260653DABDD0142E51C0
C3D99A6BC5F64577B70872C972A2A9C3D7E01E287681F44382B672AFF1E6A4C2
D563D81078A2D6C5B6E91C8F4C75D2333D15A7B73173D55417059B1A877991E2
54181AB3ED98E2025E30477833D2434E352EF6E23242E668DD0147E6FDE0777B
D57F687C378A4EC853CAB21CF6E786F67206C3C40AEC26BC21EA464157E93934
E7AFF1C1F217842B5C39689AAA1A05F9E4AB71FB0735724714F2DBDBEA053828
39CEE185177345B3EBAD2E9370014CB21CE54256E37D874247AECAFB807B5F23
4C95327F92F758D0460ADA8A6D841045BEA3DB03C8E1FE77F258A581278C8886
73D745276FABA1C8BA05645330EDA1922621FD8B5C245A7B91F797646F25451B
833755D806499507DE33CE0E82920EC87072F23C9875AE8252F83ADFEBCF8CFB
5E585EA411B7E60B8F9A63D03A7F73A01842BF06586FE77B4B1ADB767932D579
2A73767E5D61B5888BF3F5B3C061D34D408DF26126A8C0EF45D38AC4F0FEF361
E9F1FBF0C607F75255C3DB4FED365E7F1E08E6A9DAC1F454CFDEC6CDBD784A1D
643D5F68074EB756FF5D84F602A0393A8B49B8669458AFABAB3DC0CD036AC9B1
DF11E57A545F0BDDCC7730C630632804299B4D16AA84D01C42564AD498843196
AFFB7F71419D2F525C988BBAF15B90DE1424414F42E9D77506BB5E20B3266084
61F95BF750A61B8F178C3CFE26AB15C66B327FE23FCF9> |
0 <001C60D8A8C9B5EE31F4> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+STKaiti-GBK-EUC-V-Identity-H /Identity-H 0 [/PBAAAA+STKaiti-GBK-EUC-V] ct_ComposeFont pop end end
%ADOEndSubsetFont
/VPYVRZ+STKaiti-GBK-EUC-V /PBAAAA+STKaiti-GBK-EUC-V-Identity-H findfont ct_VMDictPut
VPYVRZ+STKaiti-GBK-EUC-V [10.5 0 0 -10.5 0 0 ]msf
1.0832 68.7899 mo
(C\207)sh
1.0832 82.5302 mo
(C\236)sh
1.0832 96.197 mo
(3\336)sh
1.0832 109.853 mo
(5+)sh
33.273 12.859 mo
36.093 12.859 li
36.093 12.079 li
33.273 12.079 li
cp
.699336 .676143 .639429 .746822 cmyk
f
33.873 46.579 mo
36.693 46.579 li
36.693 45.859 li
33.873 45.859 li
cp
f
33.873 114.139 mo
36.693 114.139 li
36.693 113.359 li
33.873 113.359 li
cp
f
33.873 147.139 mo
36.453 147.199 li
36.453 147.979 li
33.873 147.919 li
f
18.273 152.299 mo
17.913 152.179 li
17.733 152.059 li
17.493 151.819 li
17.313 151.699 li
17.073 151.519 li
16.953 151.279 li
16.773 151.039 li
16.533 150.379 li
16.293 149.479 li
16.233 147.739 li
16.293 147.619 li
16.293 146.179 li
16.413 146.179 li
16.413 145.579 li
16.533 145.579 li
16.533 145.159 li
16.653 145.159 li
16.653 144.799 li
16.773 144.799 li
16.773 144.499 li
16.833 144.499 li
16.953 144.379 li
16.953 144.139 li
17.073 144.139 li
17.193 144.019 li
17.193 143.779 li
17.313 143.779 li
17.493 143.659 li
17.733 143.479 li
17.913 143.359 li
18.273 143.239 li
19.653 143.119 li
19.653 143.239 li
20.013 143.359 li
20.073 143.479 li
20.313 143.539 li
20.613 143.899 li
20.733 144.139 li
20.853 144.259 li
21.093 144.679 li
21.153 145.039 li
21.273 145.519 li
21.393 146.059 li
21.513 149.359 li
21.393 149.359 li
21.393 149.899 li
21.273 149.899 li
21.273 150.259 li
21.153 150.259 li
21.153 150.499 li
21.093 150.499 li
21.093 150.679 li
20.973 150.679 li
20.973 150.919 li
20.853 150.919 li
20.853 151.159 li
20.733 151.159 li
20.733 151.399 li
20.193 151.939 li
20.013 152.059 li
19.893 152.179 li
19.533 152.299 li
cp
18.453 151.939 mo
18.273 151.819 li
18.033 151.699 li
17.913 151.519 li
17.733 151.279 li
17.493 150.799 li
17.373 150.379 li
17.313 149.539 li
17.193 147.559 li
17.313 147.439 li
17.313 145.399 li
17.373 145.399 li
17.373 144.559 li
17.493 144.559 li
17.493 144.379 li
17.613 144.379 li
17.613 144.139 li
17.733 144.139 li
17.733 143.899 li
17.853 143.899 li
18.033 143.659 li
18.453 143.479 li
19.473 143.359 li
19.473 143.479 li
19.533 143.539 li
19.773 143.659 li
20.013 143.899 li
20.073 144.139 li
20.313 144.799 li
20.433 145.519 li
20.553 150.259 li
20.433 150.259 li
20.433 150.679 li
20.313 150.679 li
20.313 150.919 li
20.193 150.919 li
20.193 151.159 li
20.073 151.159 li
20.073 151.399 li
19.653 151.819 li
19.473 151.939 li
ef
23.553 151.939 mo
23.313 151.819 li
23.193 151.699 li
23.133 151.399 li
23.193 151.279 li
23.193 151.039 li
23.313 151.039 li
23.313 150.799 li
23.553 150.799 li
24.093 150.679 li
24.093 150.799 li
24.273 150.799 li
24.273 151.039 li
24.393 151.579 li
24.273 151.579 li
24.273 151.819 li
24.213 151.939 li
ef
26.133 152.059 mo
26.133 151.579 li
26.253 151.579 li
26.973 150.799 li
26.973 150.559 li
27.093 150.559 li
27.873 149.779 li
27.873 149.539 li
27.993 149.539 li
28.713 148.759 li
28.713 148.519 li
28.833 148.519 li
29.253 148.099 li
29.253 147.859 li
29.373 147.859 li
29.493 147.739 li
29.493 147.559 li
29.613 147.559 li
29.673 147.439 li
29.673 147.199 li
29.793 147.199 li
29.793 146.959 li
29.913 146.959 li
29.913 146.719 li
30.033 146.719 li
30.033 146.419 li
30.153 146.419 li
30.033 144.679 li
29.673 144.019 li
29.613 143.899 li
29.373 143.779 li
29.253 143.659 li
28.953 143.539 li
27.873 143.479 li
27.873 143.539 li
27.453 143.779 li
26.973 144.259 li
26.913 144.259 li
26.913 144.499 li
26.793 144.499 li
26.793 144.679 li
26.673 144.679 li
26.673 144.919 li
27.093 145.039 li
27.333 145.039 li
27.333 145.279 li
27.453 145.939 li
27.333 146.059 li
27.093 146.179 li
26.433 146.179 li
26.253 145.939 li
26.133 145.579 li
26.253 145.519 li
26.253 144.919 li
26.373 144.919 li
26.373 144.559 li
26.433 144.559 li
26.433 144.379 li
26.553 144.379 li
26.553 144.139 li
26.673 144.139 li
26.793 144.019 li
26.793 143.779 li
26.913 143.779 li
27.119 143.614 27.643 143.288 27.873 143.239 cv
29.253 143.119 li
29.253 143.239 li
29.673 143.359 li
30.366 143.535 30.835 144.156 31.113 144.799 cv
31.233 146.179 li
31.113 146.179 li
31.113 146.599 li
30.993 146.599 li
30.993 146.839 li
30.873 146.959 li
30.753 146.959 li
30.753 147.199 li
30.693 147.199 li
30.693 147.439 li
28.713 149.479 li
28.533 149.479 li
28.533 149.659 li
27.093 151.159 li
29.493 151.159 li
30.573 151.039 li
30.753 150.799 li
30.753 150.559 li
30.873 150.559 li
30.873 149.779 li
31.233 149.779 li
31.233 150.499 li
31.113 150.499 li
31.113 151.279 li
30.993 151.279 li
30.993 151.939 li
30.873 152.059 li
ef
18.273 118.579 mo
17.913 118.459 li
17.733 118.339 li
17.493 118.159 li
17.313 118.039 li
17.073 117.799 li
16.953 117.559 li
16.773 117.319 li
16.533 116.659 li
16.293 115.759 li
16.233 114.079 li
16.293 113.959 li
16.293 112.519 li
16.413 112.519 li
16.413 111.919 li
16.533 111.919 li
16.533 111.499 li
16.653 111.499 li
16.653 111.139 li
16.773 111.139 li
16.773 110.839 li
16.833 110.839 li
16.953 110.719 li
16.953 110.479 li
17.073 110.479 li
17.193 110.359 li
17.193 110.119 li
17.313 110.119 li
17.493 110.059 li
17.733 109.819 li
17.913 109.699 li
18.273 109.579 li
19.653 109.459 li
19.653 109.579 li
20.013 109.699 li
20.133 109.819 li
20.313 109.939 li
20.673 110.239 li
20.733 110.479 li
20.853 110.599 li
21.093 111.019 li
21.213 111.379 li
21.273 111.859 li
21.393 112.399 li
21.513 115.639 li
21.393 115.639 li
21.393 116.239 li
21.273 116.239 li
21.273 116.539 li
21.213 116.539 li
21.213 116.779 li
21.093 116.779 li
21.093 117.019 li
20.973 117.019 li
20.973 117.259 li
20.853 117.259 li
20.853 117.439 li
20.733 117.439 li
20.733 117.679 li
20.193 118.219 li
20.013 118.339 li
19.893 118.459 li
19.593 118.579 li
cp
18.513 118.219 mo
18.273 118.159 li
18.033 118.039 li
17.913 117.799 li
17.733 117.559 li
17.493 117.139 li
17.373 116.659 li
17.313 115.879 li
17.193 113.839 li
17.313 113.719 li
17.313 111.739 li
17.373 111.739 li
17.373 110.959 li
17.493 110.959 li
17.493 110.719 li
17.613 110.719 li
17.613 110.479 li
17.733 110.479 li
17.733 110.239 li
17.853 110.239 li
18.033 110.059 li
18.513 109.819 li
19.473 109.699 li
19.473 109.819 li
19.593 109.939 li
19.773 110.059 li
20.013 110.239 li
20.133 110.479 li
20.313 111.139 li
20.433 111.859 li
20.553 116.539 li
20.433 116.539 li
20.433 117.019 li
20.313 117.019 li
20.313 117.259 li
20.193 117.259 li
20.193 117.439 li
20.133 117.439 li
20.133 117.679 li
19.653 118.159 li
19.473 118.219 li
ef
23.553 118.219 mo
23.373 118.159 li
23.253 118.039 li
23.133 117.679 li
23.253 117.559 li
23.253 117.319 li
23.373 117.319 li
23.373 117.139 li
23.553 117.139 li
24.093 117.019 li
24.093 117.139 li
24.333 117.139 li
24.333 117.319 li
24.453 117.919 li
24.333 117.919 li
24.333 118.159 li
24.213 118.219 li
ef
28.113 118.339 mo
28.113 118.039 li
28.353 118.039 li
29.073 117.919 li
29.313 117.799 li
29.313 116.119 li
25.953 116.119 li
25.953 115.639 li
26.073 115.639 li
26.193 115.519 li
26.193 115.339 li
26.253 115.339 li
26.373 115.219 li
26.373 114.979 li
26.493 114.979 li
26.613 114.859 li
26.613 114.619 li
26.733 114.619 li
26.793 114.559 li
26.793 114.319 li
26.913 114.319 li
26.913 114.079 li
27.033 114.079 li
27.153 113.959 li
27.153 113.719 li
27.273 113.719 li
27.333 113.659 li
27.333 113.419 li
27.453 113.419 li
27.573 113.299 li
27.573 113.059 li
27.693 113.059 li
27.813 112.939 li
27.813 112.759 li
27.873 112.759 li
27.873 112.519 li
27.993 112.519 li
28.113 112.399 li
28.113 112.159 li
28.233 112.159 li
28.353 112.039 li
28.353 111.859 li
28.413 111.859 li
28.533 111.739 li
28.533 111.499 li
28.653 111.499 li
28.773 111.379 li
28.773 111.139 li
28.893 111.139 li
28.893 110.959 li
28.953 110.959 li
29.073 110.839 li
29.073 110.599 li
29.193 110.599 li
29.313 110.479 li
29.313 110.239 li
29.433 110.239 li
29.493 110.119 li
29.493 109.939 li
29.613 109.939 li
29.733 109.819 li
29.733 109.579 li
29.853 109.579 li
29.853 109.339 li
29.973 109.339 li
30.273 109.219 li
30.273 115.759 li
31.593 115.759 li
31.593 116.119 li
30.273 116.119 li
30.273 117.319 li
30.393 117.799 li
30.573 117.919 li
31.233 118.039 li
31.473 118.039 li
31.473 118.339 li
cp
26.253 115.759 mo
26.493 115.519 li
26.493 115.339 li
26.613 115.339 li
26.733 115.219 li
26.733 114.979 li
26.793 114.979 li
26.913 114.859 li
26.913 114.619 li
27.033 114.619 li
27.153 114.559 li
27.153 114.319 li
27.273 114.319 li
27.333 114.199 li
27.333 113.959 li
27.453 113.959 li
27.453 113.719 li
27.573 113.719 li
27.693 113.659 li
27.693 113.419 li
27.813 113.419 li
27.873 113.299 li
27.873 113.059 li
27.993 113.059 li
28.113 112.939 li
28.113 112.759 li
28.233 112.759 li
28.353 112.639 li
28.353 112.399 li
28.413 112.399 li
28.413 112.159 li
28.533 112.159 li
28.653 112.039 li
28.653 111.859 li
28.773 111.859 li
28.893 111.739 li
28.893 111.499 li
28.953 111.499 li
29.073 111.379 li
29.073 111.139 li
29.193 111.139 li
29.313 111.019 li
29.313 110.839 li
29.433 115.759 li
ef
33.993 80.359 mo
36.873 80.359 li
36.873 79.639 li
33.993 79.639 li
cp
f
17.973 84.799 mo
17.673 84.679 li
17.433 84.559 li
17.253 84.319 li
17.013 84.199 li
16.833 83.959 li
16.713 83.779 li
16.473 83.539 li
16.293 82.879 li
16.053 81.919 li
15.933 80.239 li
16.053 80.119 li
16.053 78.679 li
16.173 78.679 li
16.173 78.079 li
16.293 78.079 li
16.293 77.659 li
16.353 77.659 li
16.353 77.299 li
16.473 77.299 li
16.473 76.939 li
16.593 76.939 li
16.713 76.879 li
16.713 76.639 li
16.833 76.639 li
16.893 76.519 li
16.893 76.279 li
17.013 76.279 li
17.253 76.159 li
17.433 75.919 li
17.673 75.859 li
17.973 75.739 li
19.413 75.619 li
19.413 75.739 li
19.713 75.859 li
20.073 76.039 li
20.373 76.399 li
20.493 76.639 li
20.613 76.759 li
20.793 77.179 li
20.913 77.539 li
21.033 77.959 li
21.153 78.559 li
21.213 81.859 li
21.153 81.859 li
21.153 82.399 li
21.033 82.399 li
21.033 82.759 li
20.913 82.759 li
20.913 82.939 li
20.793 82.939 li
20.793 83.179 li
20.673 83.179 li
20.673 83.419 li
20.613 83.419 li
20.613 83.659 li
20.493 83.659 li
20.493 83.839 li
19.953 84.439 li
19.713 84.559 li
19.593 84.679 li
19.293 84.799 li
cp
18.213 84.439 mo
17.973 84.319 li
17.793 84.199 li
17.673 83.959 li
17.433 83.779 li
17.253 83.299 li
17.133 82.879 li
17.013 82.039 li
16.893 79.999 li
17.013 79.879 li
17.013 77.839 li
17.133 77.839 li
17.133 77.059 li
17.253 77.059 li
17.253 76.879 li
17.373 76.879 li
17.373 76.639 li
17.433 76.639 li
17.433 76.399 li
17.553 76.399 li
17.793 76.159 li
18.213 75.919 li
19.173 75.859 li
19.173 75.919 li
19.293 76.039 li
19.533 76.159 li
19.713 76.399 li
19.833 76.639 li
20.073 77.299 li
20.133 77.959 li
20.253 82.759 li
20.133 82.759 li
20.133 83.179 li
20.073 83.179 li
20.073 83.419 li
19.953 83.419 li
19.953 83.659 li
19.833 83.659 li
19.833 83.839 li
19.413 84.319 li
19.173 84.439 li
ef
23.313 84.439 mo
23.073 84.319 li
22.953 84.199 li
22.833 83.839 li
22.953 83.779 li
22.953 83.539 li
23.073 83.539 li
23.073 83.299 li
23.313 83.299 li
23.853 83.179 li
23.853 83.299 li
24.033 83.299 li
24.033 83.539 li
24.153 84.079 li
24.033 84.079 li
24.033 84.319 li
23.913 84.439 li
ef
27.933 84.799 mo
27.633 84.679 li
27.393 84.559 li
27.273 84.439 li
27.093 84.319 li
26.733 83.959 li
26.613 83.779 li
26.193 82.939 li
26.073 82.639 li
26.013 82.159 li
25.893 81.619 li
25.773 80.239 li
25.893 80.119 li
25.893 78.979 li
26.013 78.979 li
26.013 78.559 li
26.073 78.559 li
26.073 78.199 li
26.193 78.199 li
26.193 77.839 li
26.313 77.839 li
26.313 77.659 li
26.433 77.659 li
26.433 77.419 li
26.553 77.419 li
26.553 77.179 li
26.613 77.179 li
26.853 76.939 li
26.853 76.759 li
26.973 76.759 li
27.336 76.192 27.869 75.952 28.473 75.739 cv
29.853 75.619 li
29.853 75.739 li
30.333 75.919 li
30.513 76.159 li
30.633 76.399 li
30.753 77.179 li
30.513 77.419 li
29.973 77.419 li
29.793 77.179 li
29.673 76.939 li
29.793 76.879 li
29.793 76.519 li
29.973 76.519 li
30.333 76.399 li
29.973 76.039 li
29.673 75.919 li
28.713 75.859 li
28.713 75.919 li
28.353 76.039 li
28.233 76.159 li
28.053 76.279 li
27.813 76.519 li
27.693 76.519 li
27.693 76.759 li
27.513 76.939 li
27.393 76.939 li
27.393 77.299 li
27.273 77.299 li
27.273 77.539 li
27.153 77.539 li
27.153 77.839 li
27.093 77.839 li
27.093 78.439 li
26.973 78.439 li
26.973 79.699 li
26.853 79.699 li
26.853 80.119 li
26.973 80.119 li
26.973 79.879 li
27.093 79.879 li
27.093 79.699 li
27.153 79.699 li
27.153 79.459 li
27.273 79.459 li
27.633 79.099 li
27.813 78.979 li
28.173 78.859 li
29.253 78.799 li
29.253 78.859 li
29.553 78.979 li
29.793 79.099 li
29.973 79.339 li
30.213 79.459 li
30.333 79.579 li
30.393 79.819 li
30.513 79.879 li
30.753 80.359 li
30.873 80.479 li
30.933 80.899 li
31.053 82.639 li
30.933 82.639 li
30.933 82.939 li
30.873 82.939 li
30.873 83.179 li
30.753 83.299 li
30.633 83.299 li
30.633 83.539 li
30.513 83.539 li
30.513 83.779 li
29.973 84.319 li
29.793 84.439 li
29.673 84.559 li
29.253 84.799 li
cp
27.933 84.319 mo
27.813 84.199 li
27.633 84.079 li
27.513 83.959 li
27.393 83.779 li
27.273 83.659 li
27.153 83.419 li
26.973 82.519 li
26.853 81.499 li
26.973 81.379 li
26.973 80.599 li
27.093 80.599 li
27.093 80.239 li
27.153 80.239 li
27.153 79.999 li
27.273 79.999 li
27.273 79.699 li
27.393 79.699 li
27.813 79.219 li
28.053 79.099 li
29.013 78.979 li
29.013 79.099 li
29.433 79.339 li
29.553 79.579 li
29.673 79.699 li
29.793 79.999 li
29.853 80.479 li
29.973 83.059 li
29.853 83.059 li
29.853 83.539 li
29.793 83.539 li
29.793 83.779 li
29.313 84.199 li
29.013 84.319 li
ef
17.553 50.959 mo
17.253 50.839 li
17.013 50.719 li
16.833 50.539 li
16.593 50.419 li
16.413 50.179 li
16.293 49.939 li
16.053 49.699 li
15.873 49.039 li
15.633 48.139 li
15.513 46.459 li
15.633 46.339 li
15.633 44.839 li
15.753 44.839 li
15.753 44.299 li
15.873 44.299 li
15.873 43.819 li
15.933 43.819 li
15.933 43.519 li
16.053 43.519 li
16.053 43.159 li
16.173 43.159 li
16.293 43.039 li
16.293 42.799 li
16.413 42.799 li
16.473 42.679 li
16.473 42.499 li
16.593 42.499 li
16.833 42.379 li
17.013 42.139 li
17.253 42.019 li
17.553 41.899 li
18.993 41.779 li
18.993 41.899 li
19.293 42.019 li
19.413 42.139 li
19.653 42.259 li
19.953 42.559 li
20.073 42.799 li
20.193 42.919 li
20.373 43.399 li
20.493 43.699 li
20.613 44.179 li
20.733 44.719 li
20.793 48.019 li
20.733 48.019 li
20.733 48.559 li
20.613 48.559 li
20.613 48.919 li
20.493 48.919 li
20.493 49.159 li
20.373 49.159 li
20.373 49.399 li
20.253 49.399 li
20.253 49.579 li
20.193 49.579 li
20.193 49.819 li
20.073 49.819 li
20.073 50.059 li
19.533 50.599 li
19.293 50.719 li
19.173 50.839 li
18.873 50.959 li
cp
17.793 50.599 mo
17.553 50.539 li
17.373 50.419 li
17.253 50.179 li
17.013 49.939 li
16.833 49.519 li
16.713 49.039 li
16.593 48.259 li
16.473 46.219 li
16.593 46.099 li
16.593 44.059 li
16.713 44.059 li
16.713 43.279 li
16.833 43.279 li
16.833 43.039 li
16.953 43.039 li
16.953 42.799 li
17.013 42.799 li
17.013 42.559 li
17.133 42.559 li
17.373 42.379 li
17.793 42.139 li
18.753 42.019 li
18.753 42.139 li
18.873 42.259 li
19.113 42.379 li
19.293 42.559 li
19.413 42.799 li
19.653 43.519 li
19.713 44.179 li
19.833 48.919 li
19.713 48.919 li
19.713 49.399 li
19.653 49.399 li
19.653 49.579 li
19.533 49.579 li
19.533 49.819 li
19.413 49.819 li
19.413 50.059 li
18.993 50.539 li
18.753 50.599 li
ef
22.893 50.599 mo
22.653 50.539 li
22.533 50.419 li
22.413 50.059 li
22.533 49.939 li
22.533 49.699 li
22.653 49.699 li
22.653 49.519 li
22.893 49.519 li
23.433 49.399 li
23.433 49.519 li
23.613 49.519 li
23.613 49.699 li
23.733 50.299 li
23.613 50.299 li
23.613 50.539 li
23.493 50.599 li
ef
27.393 50.959 mo
26.973 50.839 li
26.313 50.539 li
25.773 49.939 li
25.593 49.579 li
25.473 49.279 li
25.353 48.679 li
25.473 48.559 li
25.473 48.019 li
25.593 48.019 li
25.593 47.659 li
25.653 47.659 li
25.773 47.539 li
25.773 47.359 li
25.893 47.359 li
26.553 46.639 li
27.213 46.339 li
27.273 46.219 li
27.093 45.979 li
26.853 45.859 li
26.673 45.619 li
26.433 45.499 li
26.193 45.319 li
25.893 44.599 li
25.773 43.939 li
25.893 43.819 li
25.893 43.399 li
26.013 43.399 li
26.013 42.919 li
26.133 42.919 li
26.313 42.679 li
26.313 42.499 li
26.433 42.499 li
26.553 42.379 li
26.973 42.139 li
27.093 42.019 li
27.513 41.899 li
28.833 41.779 li
28.833 41.899 li
29.133 42.019 li
29.553 42.259 li
30.093 42.799 li
30.213 43.279 li
30.333 44.179 li
30.213 44.179 li
30.213 44.539 li
30.093 44.599 li
29.973 44.599 li
29.973 44.839 li
29.373 45.499 li
28.713 45.859 li
28.893 45.979 li
29.218 46.251 29.607 46.448 29.913 46.759 cv
30.093 46.759 li
30.093 46.999 li
30.213 47.119 li
30.333 47.359 li
30.453 47.479 li
30.513 47.899 li
30.633 49.159 li
30.513 49.159 li
30.513 49.519 li
30.333 49.699 li
30.213 49.699 li
30.213 49.939 li
30.093 50.059 li
29.973 50.059 li
29.973 50.299 li
29.793 50.419 li
29.673 50.539 li
29.433 50.599 li
29.373 50.719 li
29.133 50.839 li
28.713 50.959 li
cp
27.513 50.539 mo
27.213 50.419 li
26.973 50.299 li
26.853 50.179 li
26.673 50.059 li
26.433 49.819 li
26.313 49.579 li
26.193 49.519 li
26.133 49.159 li
26.013 48.679 li
26.133 48.559 li
26.133 48.019 li
26.193 48.019 li
26.193 47.779 li
26.313 47.779 li
26.313 47.539 li
26.433 47.539 li
26.433 47.359 li
26.553 47.359 li
27.213 46.639 li
27.393 46.519 li
27.753 46.459 li
27.753 46.519 li
27.933 46.639 li
28.558 47.275 29.718 47.439 29.973 48.379 cv
30.093 49.279 li
29.973 49.279 li
29.973 49.579 li
29.433 50.179 li
28.833 50.539 li
cp
28.353 45.499 mo
28.173 45.439 li
28.053 45.319 li
27.813 45.199 li
27.753 45.079 li
27.513 44.959 li
27.393 44.839 li
26.973 44.599 li
26.733 44.419 li
26.553 44.299 li
26.433 44.059 li
26.313 43.939 li
26.193 43.519 li
26.313 43.399 li
26.313 43.039 li
26.433 43.039 li
26.433 42.799 li
26.553 42.799 li
26.973 42.379 li
27.393 42.139 li
28.593 42.019 li
28.593 42.139 li
28.893 42.259 li
29.013 42.379 li
29.373 42.559 li
29.433 42.799 li
29.553 42.919 li
29.673 43.159 li
29.793 44.299 li
29.673 44.299 li
29.673 44.539 li
29.553 44.599 li
29.433 44.599 li
29.433 44.839 li
29.013 45.319 li
28.833 45.439 li
28.713 45.499 li
ef
32.913 182.359 mo
231.333 182.359 li
231.333 181.339 li
32.913 181.339 li
cp
f
230.733 181.459 mo
229.713 11.419 li
230.673 11.419 li
231.753 181.459 li
f
32.733 12.919 mo
231.153 12.919 li
231.153 11.899 li
32.733 11.899 li
cp
f
225.453 12.919 mo
229.653 12.919 li
230.253 182.058 li
32.853 181.458 li
33.453 170.058 li
225.453 12.919 li
.135653 .0995193 .100282 0 cmyk
ef
32.433 175.579 mo
32.433 176.359 33.033 177.019 33.813 177.019 cv
34.593 177.019 35.253 176.359 35.253 175.579 cv
35.253 174.799 34.593 174.139 33.813 174.139 cv
33.033 174.139 32.433 174.799 32.433 175.579 cv
.699336 .676143 .639429 .746822 cmyk
ef
31.893 175.579 mo
31.953 175.999 li
32.073 176.359 li
32.756 177.906 35.04 177.865 35.613 176.299 cv
35.733 175.999 li
35.733 175.579 li
35.775 173.699 33.362 173.002 32.253 174.499 cv
32.073 174.859 li
31.953 175.219 li
cp
32.973 175.339 mo
32.913 175.459 li
33.033 175.159 li
32.973 175.279 li
33.093 175.039 li
33.033 175.099 li
33.213 174.919 li
33.153 174.979 li
33.393 174.799 li
33.273 174.859 li
33.513 174.739 li
33.453 174.739 li
33.693 174.679 li
33.633 174.679 li
33.873 174.679 li
33.813 174.679 li
34.053 174.679 li
33.993 174.679 li
34.233 174.739 li
34.173 174.739 li
34.413 174.859 li
34.293 174.799 li
34.533 174.979 li
34.473 174.919 li
34.653 175.099 li
34.593 175.039 li
34.713 175.279 li
34.653 175.159 li
34.773 175.459 li
34.713 175.339 li
34.773 175.639 li
34.773 175.519 li
34.713 175.819 li
34.773 175.699 li
34.653 175.999 li
34.713 175.879 li
34.593 176.119 li
34.653 176.059 li
34.473 176.239 li
34.533 176.179 li
34.293 176.359 li
34.413 176.299 li
34.173 176.479 li
34.233 176.419 li
33.993 176.479 li
34.053 176.479 li
33.813 176.479 li
33.873 176.479 li
33.633 176.479 li
33.693 176.479 li
33.453 176.419 li
33.513 176.479 li
33.273 176.299 li
33.333 176.359 li
33.153 176.179 li
33.213 176.239 li
33.033 176.059 li
33.093 176.119 li
32.973 175.879 li
33.033 175.999 li
32.913 175.699 li
32.973 175.819 li
32.913 175.519 li
32.913 175.639 li
f
32.793 168.679 mo
32.793 167.899 33.393 167.299 34.173 167.299 cv
34.953 167.299 35.613 167.899 35.613 168.679 cv
35.613 169.459 34.953 170.119 34.173 170.119 cv
33.393 170.119 32.793 169.459 32.793 168.679 cv
ef
32.253 168.679 mo
32.313 168.319 li
32.433 167.959 li
33.197 166.362 35.195 166.394 35.973 167.959 cv
36.093 168.319 li
36.093 168.679 li
36.207 170.554 33.597 171.379 32.613 169.759 cv
32.433 169.459 li
32.313 169.099 li
cp
33.273 168.919 mo
33.273 168.859 li
33.393 169.099 li
33.333 169.039 li
33.453 169.279 li
33.393 169.159 li
33.573 169.399 li
33.513 169.339 li
33.753 169.519 li
33.633 169.459 li
33.873 169.579 li
33.813 169.519 li
34.053 169.639 li
33.933 169.579 li
34.233 169.639 li
34.113 169.639 li
34.413 169.579 li
34.353 169.639 li
34.593 169.519 li
34.533 169.579 li
34.773 169.459 li
34.653 169.519 li
34.893 169.339 li
34.833 169.399 li
35.013 169.159 li
34.953 169.279 li
35.073 169.039 li
35.013 169.099 li
35.133 168.859 li
35.073 168.919 li
35.133 168.679 li
35.133 168.739 li
35.073 168.499 li
35.133 168.559 li
35.013 168.319 li
35.073 168.379 li
34.953 168.139 li
35.013 168.259 li
34.833 168.019 li
34.893 168.079 li
34.653 167.899 li
34.773 167.959 li
34.533 167.839 li
34.593 167.899 li
34.353 167.779 li
34.413 167.839 li
34.113 167.779 li
34.233 167.779 li
33.933 167.839 li
34.053 167.779 li
33.813 167.899 li
33.873 167.839 li
33.633 167.959 li
33.693 167.899 li
33.513 168.079 li
33.573 168.019 li
33.393 168.259 li
33.453 168.139 li
33.333 168.379 li
33.393 168.319 li
33.273 168.559 li
33.273 168.499 li
33.273 168.739 li
33.273 168.679 li
f
67.053 118.699 mo
67.053 119.479 67.653 120.139 68.433 120.139 cv
69.213 120.139 69.873 119.479 69.873 118.699 cv
69.873 117.919 69.213 117.319 68.433 117.319 cv
67.653 117.319 67.053 117.919 67.053 118.699 cv
ef
66.513 118.699 mo
66.573 119.119 li
66.693 119.479 li
67.37 121.043 69.542 121.015 70.233 119.479 cv
70.353 119.119 li
70.353 118.699 li
70.43 117.003 68.092 115.999 66.873 117.619 cv
66.693 117.979 li
66.573 118.339 li
cp
67.533 118.459 mo
67.533 118.579 li
67.653 118.339 li
67.593 118.399 li
67.713 118.159 li
67.653 118.219 li
67.833 118.039 li
67.773 118.099 li
67.953 117.919 li
67.893 117.979 li
68.133 117.859 li
68.073 117.859 li
68.313 117.799 li
68.193 117.799 li
68.493 117.799 li
68.373 117.799 li
68.673 117.799 li
68.613 117.799 li
68.853 117.859 li
68.793 117.859 li
69.033 117.979 li
68.913 117.919 li
69.153 118.099 li
69.093 118.039 li
69.273 118.219 li
69.213 118.159 li
69.333 118.399 li
69.273 118.339 li
69.333 118.579 li
69.333 118.459 li
69.393 118.759 li
69.393 118.639 li
69.333 118.939 li
69.333 118.879 li
69.273 119.119 li
69.333 119.059 li
69.213 119.299 li
69.273 119.179 li
69.093 119.419 li
69.153 119.359 li
68.913 119.479 li
68.973 119.479 li
68.733 119.599 li
68.853 119.539 li
68.613 119.599 li
68.673 119.599 li
68.373 119.659 li
68.493 119.659 li
68.193 119.599 li
68.313 119.599 li
68.073 119.539 li
68.133 119.599 li
67.893 119.479 li
67.953 119.479 li
67.773 119.359 li
67.833 119.419 li
67.653 119.179 li
67.713 119.239 li
67.593 118.999 li
67.653 119.119 li
67.533 118.879 li
67.533 118.939 li
67.533 118.639 li
67.533 118.759 li
f
32.973 163.099 mo
32.973 163.879 33.633 164.539 34.413 164.539 cv
35.193 164.539 35.853 163.879 35.853 163.099 cv
35.853 162.319 35.193 161.659 34.413 161.659 cv
33.633 161.659 32.973 162.319 32.973 163.099 cv
ef
32.493 163.099 mo
32.553 163.459 li
32.673 163.819 li
32.853 164.179 li
33.033 164.479 li
33.333 164.719 li
34.053 164.959 li
34.413 165.019 li
34.773 164.959 li
35.493 164.719 li
35.793 164.479 li
36.033 164.179 li
36.273 163.459 li
36.333 163.099 li
36.268 160.917 33.592 160.698 32.853 162.019 cv
32.673 162.379 li
32.553 162.739 li
cp
33.513 162.859 mo
33.513 162.979 li
33.573 162.679 li
33.573 162.799 li
33.693 162.559 li
33.633 162.619 li
33.813 162.439 li
33.753 162.499 li
33.933 162.319 li
33.873 162.379 li
34.113 162.259 li
33.993 162.259 li
34.293 162.199 li
34.173 162.199 li
34.473 162.199 li
34.353 162.199 li
34.653 162.199 li
34.533 162.199 li
34.833 162.259 li
34.713 162.259 li
34.953 162.379 li
34.893 162.319 li
35.073 162.499 li
35.013 162.439 li
35.193 162.619 li
35.133 162.559 li
35.253 162.799 li
35.253 162.679 li
35.313 162.979 li
35.313 162.859 li
35.313 163.159 li
35.313 163.039 li
35.313 163.339 li
35.313 163.219 li
35.253 163.519 li
35.253 163.399 li
35.133 163.639 li
35.193 163.579 li
35.013 163.759 li
35.073 163.699 li
34.893 163.879 li
34.953 163.819 li
34.713 163.939 li
34.833 163.939 li
34.533 163.999 li
34.653 163.999 li
34.353 163.999 li
34.473 163.999 li
34.173 163.999 li
34.293 163.999 li
33.993 163.939 li
34.113 163.939 li
33.873 163.819 li
33.933 163.879 li
33.753 163.699 li
33.813 163.759 li
33.633 163.579 li
33.693 163.639 li
33.573 163.399 li
33.573 163.519 li
33.513 163.219 li
33.513 163.339 li
33.513 163.039 li
33.513 163.159 li
f
41.013 163.099 mo
41.013 163.879 41.613 164.539 42.393 164.539 cv
43.173 164.539 43.833 163.879 43.833 163.099 cv
43.833 162.319 43.173 161.659 42.393 161.659 cv
41.613 161.659 41.013 162.319 41.013 163.099 cv
ef
40.473 163.099 mo
40.533 163.459 li
40.653 163.819 li
41.146 165.396 43.682 165.374 44.193 163.819 cv
44.313 163.459 li
44.313 163.099 li
44.431 161.215 41.797 160.5 40.833 162.019 cv
40.653 162.379 li
40.533 162.739 li
cp
41.493 162.859 mo
41.493 162.979 li
41.553 162.679 li
41.553 162.799 li
41.673 162.559 li
41.613 162.619 li
41.793 162.439 li
41.733 162.499 li
41.913 162.319 li
41.853 162.379 li
42.093 162.259 li
42.033 162.259 li
42.273 162.199 li
42.153 162.199 li
42.453 162.199 li
42.333 162.199 li
42.633 162.199 li
42.573 162.199 li
42.813 162.259 li
42.753 162.259 li
42.993 162.379 li
42.873 162.319 li
43.113 162.499 li
43.053 162.439 li
43.233 162.619 li
43.173 162.559 li
43.293 162.799 li
43.233 162.679 li
43.293 162.979 li
43.293 162.859 li
43.353 163.159 li
43.353 163.039 li
43.293 163.339 li
43.293 163.219 li
43.233 163.519 li
43.293 163.399 li
43.173 163.639 li
43.233 163.579 li
43.053 163.759 li
43.113 163.699 li
42.873 163.879 li
42.933 163.819 li
42.693 163.939 li
42.813 163.939 li
42.573 163.999 li
42.633 163.999 li
42.333 163.999 li
42.453 163.999 li
42.153 163.999 li
42.273 163.999 li
42.033 163.939 li
42.093 163.939 li
41.853 163.819 li
41.913 163.879 li
41.733 163.699 li
41.793 163.759 li
41.613 163.579 li
41.673 163.639 li
41.553 163.399 li
41.553 163.519 li
41.493 163.219 li
41.493 163.339 li
41.493 163.039 li
41.493 163.159 li
f
41.013 156.799 mo
41.013 157.579 41.613 158.179 42.393 158.179 cv
43.173 158.179 43.833 157.579 43.833 156.799 cv
43.833 156.019 43.173 155.359 42.393 155.359 cv
41.613 155.359 41.013 156.019 41.013 156.799 cv
ef
40.473 156.799 mo
40.533 157.159 li
40.653 157.519 li
41.345 159.107 43.488 159.076 44.193 157.519 cv
44.313 157.159 li
44.313 156.799 li
44.427 154.924 41.818 154.099 40.833 155.719 cv
40.653 156.019 li
40.533 156.379 li
cp
41.493 156.559 mo
41.493 156.619 li
41.553 156.379 li
41.553 156.439 li
41.673 156.199 li
41.613 156.319 li
41.793 156.079 li
41.733 156.139 li
41.913 155.959 li
41.853 156.019 li
42.093 155.899 li
42.033 155.959 li
42.273 155.839 li
42.153 155.899 li
42.453 155.839 li
42.333 155.839 li
42.633 155.899 li
42.573 155.839 li
42.813 155.959 li
42.753 155.899 li
42.993 156.019 li
42.873 155.959 li
43.113 156.139 li
43.053 156.079 li
43.233 156.319 li
43.173 156.199 li
43.293 156.439 li
43.233 156.379 li
43.293 156.619 li
43.293 156.559 li
43.353 156.859 li
43.353 156.739 li
43.293 157.039 li
43.293 156.919 li
43.233 157.159 li
43.293 157.099 li
43.173 157.339 li
43.233 157.219 li
43.053 157.459 li
43.113 157.399 li
42.873 157.579 li
42.933 157.519 li
42.693 157.639 li
42.813 157.579 li
42.573 157.699 li
42.633 157.639 li
42.333 157.699 li
42.453 157.699 li
42.153 157.639 li
42.273 157.699 li
42.033 157.579 li
42.093 157.639 li
41.853 157.519 li
41.913 157.579 li
41.733 157.399 li
41.793 157.459 li
41.613 157.279 li
41.673 157.339 li
41.553 157.099 li
41.553 157.159 li
41.493 156.919 li
41.493 157.039 li
41.493 156.739 li
41.493 156.859 li
f
40.773 150.619 mo
40.773 151.399 41.373 152.059 42.153 152.059 cv
42.933 152.059 43.593 151.399 43.593 150.619 cv
43.593 149.839 42.933 149.239 42.153 149.239 cv
41.373 149.239 40.773 149.839 40.773 150.619 cv
ef
40.233 150.619 mo
40.293 151.039 li
40.413 151.399 li
41.117 152.946 43.248 152.948 43.953 151.399 cv
44.073 151.039 li
44.073 150.619 li
44.086 148.764 41.727 148.025 40.593 149.539 cv
40.413 149.899 li
40.293 150.259 li
cp
41.313 150.379 mo
41.253 150.499 li
41.373 150.259 li
41.313 150.319 li
41.433 150.079 li
41.373 150.139 li
41.553 149.959 li
41.493 150.019 li
41.733 149.839 li
41.613 149.899 li
41.853 149.779 li
41.793 149.779 li
42.033 149.719 li
41.973 149.719 li
42.213 149.719 li
42.153 149.719 li
42.393 149.719 li
42.333 149.719 li
42.573 149.779 li
42.513 149.779 li
42.753 149.899 li
42.633 149.839 li
42.873 150.019 li
42.813 149.959 li
42.993 150.139 li
42.933 150.079 li
43.053 150.319 li
42.993 150.259 li
43.113 150.499 li
43.053 150.379 li
43.113 150.679 li
43.113 150.559 li
43.053 150.859 li
43.113 150.799 li
42.993 151.039 li
43.053 150.979 li
42.933 151.219 li
42.993 151.099 li
42.813 151.339 li
42.873 151.279 li
42.633 151.399 li
42.753 151.399 li
42.513 151.519 li
42.573 151.459 li
42.333 151.519 li
42.393 151.519 li
42.153 151.579 li
42.213 151.579 li
41.973 151.519 li
42.033 151.519 li
41.793 151.459 li
41.853 151.519 li
41.613 151.399 li
41.733 151.399 li
41.493 151.279 li
41.553 151.339 li
41.373 151.099 li
41.433 151.159 li
41.313 150.919 li
41.373 151.039 li
41.253 150.799 li
41.313 150.859 li
41.253 150.559 li
41.253 150.679 li
f
49.953 150.439 mo
49.953 151.219 50.613 151.819 51.393 151.819 cv
52.173 151.819 52.773 151.219 52.773 150.439 cv
52.773 149.659 52.173 148.999 51.393 148.999 cv
50.613 148.999 49.953 149.659 49.953 150.439 cv
ef
49.473 150.439 mo
49.593 151.159 li
50.298 152.716 52.441 152.747 53.133 151.159 cv
53.253 150.799 li
53.313 150.439 li
53.249 148.535 50.863 147.747 49.773 149.359 cv
49.593 149.659 li
49.533 150.019 li
cp
50.493 150.199 mo
50.493 150.259 li
50.553 150.019 li
50.493 150.139 li
50.673 149.899 li
50.613 149.959 li
50.793 149.719 li
50.733 149.779 li
50.913 149.599 li
50.853 149.659 li
51.093 149.539 li
50.973 149.599 li
51.273 149.539 li
51.153 149.539 li
51.453 149.479 li
51.333 149.479 li
51.633 149.539 li
51.513 149.539 li
51.813 149.599 li
51.693 149.539 li
51.933 149.659 li
51.873 149.599 li
52.053 149.779 li
51.993 149.719 li
52.173 149.959 li
52.113 149.839 li
52.233 150.079 li
52.233 150.019 li
52.293 150.259 li
52.293 150.199 li
52.293 150.499 li
52.293 150.379 li
52.293 150.679 li
52.293 150.559 li
52.233 150.799 li
52.233 150.739 li
52.113 150.979 li
52.173 150.919 li
51.993 151.099 li
52.053 151.039 li
51.873 151.219 li
51.933 151.159 li
51.693 151.279 li
51.813 151.219 li
51.513 151.339 li
51.633 151.339 li
51.333 151.339 li
51.453 151.339 li
51.153 151.339 li
51.273 151.339 li
50.973 151.219 li
51.093 151.279 li
50.853 151.159 li
50.913 151.219 li
50.673 151.039 li
50.793 151.099 li
50.613 150.919 li
50.673 150.979 li
50.493 150.739 li
50.553 150.799 li
50.493 150.559 li
50.493 150.679 li
50.493 150.379 li
50.493 150.499 li
f
50.013 144.559 mo
50.013 145.339 50.673 145.939 51.453 145.939 cv
52.233 145.939 52.893 145.339 52.893 144.559 cv
52.893 143.779 52.233 143.119 51.453 143.119 cv
50.673 143.119 50.013 143.779 50.013 144.559 cv
ef
49.533 144.559 mo
49.593 144.919 li
49.713 145.279 li
50.413 146.886 52.501 146.814 53.253 145.279 cv
53.373 144.559 li
53.416 142.54 50.741 141.957 49.893 143.479 cv
49.713 143.779 li
49.593 144.139 li
cp
50.553 144.319 mo
50.553 144.379 li
50.613 144.139 li
50.613 144.199 li
50.733 143.959 li
50.673 144.079 li
50.853 143.839 li
50.793 143.899 li
50.973 143.719 li
50.913 143.779 li
51.153 143.659 li
51.033 143.719 li
51.333 143.599 li
51.213 143.659 li
51.513 143.599 li
51.393 143.599 li
51.693 143.659 li
51.573 143.599 li
51.873 143.719 li
51.753 143.659 li
51.993 143.779 li
51.933 143.719 li
52.113 143.899 li
52.053 143.839 li
52.233 144.079 li
52.173 143.959 li
52.293 144.199 li
52.293 144.139 li
52.353 144.379 li
52.353 144.319 li
52.353 144.559 li
52.353 144.499 li
52.353 144.799 li
52.353 144.679 li
52.293 144.919 li
52.293 144.859 li
52.173 145.099 li
52.233 144.979 li
52.053 145.219 li
52.113 145.159 li
51.933 145.339 li
51.993 145.279 li
51.753 145.399 li
51.873 145.339 li
51.573 145.459 li
51.693 145.399 li
51.393 145.459 li
51.513 145.459 li
51.213 145.399 li
51.333 145.459 li
51.033 145.339 li
51.153 145.399 li
50.913 145.279 li
50.973 145.339 li
50.793 145.159 li
50.853 145.219 li
50.673 145.039 li
50.733 145.099 li
50.613 144.859 li
50.613 144.919 li
50.553 144.679 li
50.553 144.799 li
50.553 144.499 li
50.553 144.559 li
f
49.953 138.379 mo
49.953 139.159 50.613 139.819 51.393 139.819 cv
52.173 139.819 52.773 139.159 52.773 138.379 cv
52.773 137.599 52.173 136.999 51.393 136.999 cv
50.613 136.999 49.953 137.599 49.953 138.379 cv
ef
49.473 138.379 mo
49.533 138.799 li
49.593 139.159 li
50.284 140.695 52.456 140.723 53.133 139.159 cv
53.253 138.799 li
53.313 138.379 li
53.132 136.485 51.012 135.785 49.773 137.299 cv
49.593 137.659 li
49.533 138.019 li
cp
50.493 138.139 mo
50.493 138.259 li
50.553 138.019 li
50.493 138.079 li
50.673 137.839 li
50.613 137.899 li
50.793 137.719 li
50.733 137.779 li
50.913 137.599 li
50.853 137.659 li
51.093 137.539 li
50.973 137.539 li
51.273 137.479 li
51.153 137.479 li
51.453 137.479 li
51.333 137.479 li
51.633 137.479 li
51.513 137.479 li
51.813 137.539 li
51.693 137.539 li
51.933 137.659 li
51.873 137.599 li
52.053 137.779 li
51.993 137.719 li
52.173 137.899 li
52.113 137.839 li
52.233 138.079 li
52.233 138.019 li
52.293 138.259 li
52.293 138.139 li
52.293 138.439 li
52.293 138.319 li
52.293 138.619 li
52.293 138.559 li
52.233 138.799 li
52.233 138.739 li
52.113 138.979 li
52.173 138.859 li
51.993 139.099 li
52.053 138.979 li
51.873 139.159 li
51.933 139.099 li
51.693 139.279 li
51.813 139.219 li
51.513 139.279 li
51.633 139.279 li
51.333 139.339 li
51.453 139.339 li
51.153 139.279 li
51.273 139.279 li
50.973 139.219 li
51.093 139.279 li
50.853 139.099 li
50.913 139.159 li
50.673 138.979 li
50.793 139.099 li
50.613 138.859 li
50.673 138.919 li
50.493 138.679 li
50.553 138.799 li
50.493 138.559 li
50.493 138.619 li
50.493 138.319 li
50.493 138.439 li
f
49.713 131.779 mo
49.713 132.559 50.373 133.219 51.153 133.219 cv
51.933 133.219 52.533 132.559 52.533 131.779 cv
52.533 130.999 51.933 130.399 51.153 130.399 cv
50.373 130.399 49.713 130.999 49.713 131.779 cv
ef
49.233 131.779 mo
49.233 132.199 li
49.353 132.559 li
50.018 134.064 52.24 134.095 52.893 132.559 cv
53.013 132.199 li
53.073 131.779 li
52.892 129.885 50.772 129.185 49.533 130.699 cv
49.353 131.059 li
49.233 131.419 li
cp
50.253 131.539 mo
50.253 131.659 li
50.313 131.359 li
50.253 131.479 li
50.373 131.239 li
50.373 131.299 li
50.493 131.119 li
50.433 131.179 li
50.673 130.999 li
50.553 131.059 li
50.793 130.939 li
50.733 130.939 li
50.973 130.879 li
50.913 130.879 li
51.213 130.879 li
51.093 130.879 li
51.393 130.879 li
51.273 130.879 li
51.513 130.939 li
51.453 130.939 li
51.693 131.059 li
51.633 130.999 li
51.813 131.179 li
51.753 131.119 li
51.933 131.299 li
51.873 131.239 li
51.993 131.479 li
51.993 131.359 li
52.053 131.659 li
52.053 131.539 li
52.053 131.839 li
52.053 131.719 li
52.053 132.019 li
52.053 131.899 li
51.993 132.199 li
51.993 132.079 li
51.873 132.319 li
51.933 132.259 li
51.753 132.439 li
51.813 132.379 li
51.633 132.559 li
51.693 132.499 li
51.453 132.679 li
51.513 132.619 li
51.273 132.679 li
51.393 132.679 li
51.093 132.679 li
51.213 132.679 li
50.913 132.679 li
50.973 132.679 li
50.733 132.619 li
50.853 132.679 li
50.613 132.499 li
50.673 132.559 li
50.433 132.379 li
50.493 132.499 li
50.373 132.259 li
50.373 132.319 li
50.253 132.079 li
50.313 132.199 li
50.253 131.899 li
50.253 132.019 li
50.193 131.719 li
50.193 131.839 li
f
58.413 131.539 mo
58.413 132.319 59.013 132.919 59.793 132.919 cv
60.573 132.919 61.233 132.319 61.233 131.539 cv
61.233 130.759 60.573 130.099 59.793 130.099 cv
59.013 130.099 58.413 130.759 58.413 131.539 cv
ef
57.873 131.539 mo
57.933 131.899 li
58.053 132.259 li
58.779 133.831 60.866 133.83 61.593 132.259 cv
61.713 131.899 li
61.713 131.539 li
61.806 129.651 59.26 128.853 58.233 130.459 cv
58.053 130.759 li
57.933 131.119 li
cp
58.953 131.299 mo
58.893 131.359 li
59.013 131.119 li
58.953 131.239 li
59.073 130.999 li
59.013 131.059 li
59.193 130.819 li
59.133 130.879 li
59.373 130.759 li
59.253 130.759 li
59.493 130.639 li
59.433 130.699 li
59.673 130.639 li
59.613 130.639 li
59.853 130.579 li
59.793 130.579 li
60.033 130.639 li
59.973 130.639 li
60.213 130.699 li
60.153 130.639 li
60.393 130.759 li
60.273 130.759 li
60.513 130.879 li
60.453 130.819 li
60.633 131.059 li
60.573 130.939 li
60.693 131.179 li
60.633 131.119 li
60.753 131.359 li
60.693 131.299 li
60.753 131.599 li
60.753 131.479 li
60.693 131.779 li
60.753 131.659 li
60.633 131.899 li
60.693 131.839 li
60.573 132.079 li
60.633 132.019 li
60.453 132.199 li
60.513 132.139 li
60.273 132.319 li
60.393 132.259 li
60.153 132.379 li
60.213 132.379 li
59.973 132.439 li
60.033 132.439 li
59.793 132.439 li
59.853 132.439 li
59.613 132.439 li
59.673 132.439 li
59.433 132.379 li
59.493 132.379 li
59.253 132.259 li
59.313 132.319 li
59.133 132.139 li
59.193 132.199 li
59.013 132.019 li
59.073 132.079 li
58.953 131.839 li
59.013 131.899 li
58.893 131.659 li
58.953 131.779 li
58.893 131.479 li
58.893 131.599 li
f
58.353 125.779 mo
58.353 126.559 59.013 127.219 59.793 127.219 cv
60.573 127.219 61.173 126.559 61.173 125.779 cv
61.173 124.999 60.573 124.339 59.793 124.339 cv
59.013 124.339 58.353 124.999 58.353 125.779 cv
ef
57.873 125.779 mo
57.873 126.139 li
57.993 126.499 li
58.629 128.065 60.896 128.067 61.533 126.499 cv
61.653 126.139 li
61.713 125.779 li
61.565 123.735 59.174 123.231 58.173 124.699 cv
57.993 125.059 li
57.873 125.419 li
cp
58.893 125.539 mo
58.833 125.659 li
58.953 125.359 li
58.893 125.479 li
59.013 125.239 li
58.953 125.299 li
59.133 125.119 li
59.073 125.179 li
59.313 124.999 li
59.193 125.059 li
59.433 124.939 li
59.373 124.939 li
59.613 124.879 li
59.553 124.879 li
59.793 124.879 li
59.733 124.879 li
59.973 124.879 li
59.913 124.879 li
60.153 124.939 li
60.093 124.939 li
60.333 125.059 li
60.213 124.999 li
60.453 125.179 li
60.393 125.119 li
60.573 125.299 li
60.513 125.239 li
60.633 125.479 li
60.573 125.359 li
60.693 125.659 li
60.633 125.539 li
60.693 125.839 li
60.693 125.719 li
60.633 126.019 li
60.693 125.899 li
60.573 126.199 li
60.633 126.079 li
60.513 126.319 li
60.573 126.259 li
60.393 126.439 li
60.453 126.379 li
60.213 126.559 li
60.333 126.499 li
60.093 126.619 li
60.153 126.619 li
59.913 126.679 li
59.973 126.679 li
59.733 126.679 li
59.793 126.679 li
59.553 126.679 li
59.613 126.679 li
59.373 126.619 li
59.433 126.619 li
59.193 126.499 li
59.313 126.559 li
59.073 126.379 li
59.133 126.439 li
58.953 126.259 li
59.013 126.319 li
58.893 126.079 li
58.953 126.199 li
58.833 125.899 li
58.893 126.019 li
58.833 125.719 li
58.833 125.839 li
f
67.173 125.239 mo
67.173 126.019 67.833 126.619 68.613 126.619 cv
69.393 126.619 69.993 126.019 69.993 125.239 cv
69.993 124.459 69.393 123.799 68.613 123.799 cv
67.833 123.799 67.173 124.459 67.173 125.239 cv
ef
66.693 125.239 mo
66.813 125.959 li
67.518 127.516 69.661 127.547 70.353 125.959 cv
70.473 125.599 li
70.533 125.239 li
70.469 123.335 68.083 122.547 66.993 124.159 cv
66.813 124.459 li
66.753 124.819 li
cp
67.713 124.999 mo
67.713 125.119 li
67.773 124.819 li
67.713 124.939 li
67.893 124.699 li
67.833 124.759 li
68.013 124.519 li
67.953 124.579 li
68.133 124.459 li
68.073 124.519 li
68.313 124.339 li
68.193 124.399 li
68.493 124.339 li
68.373 124.339 li
68.673 124.279 li
68.553 124.279 li
68.853 124.339 li
68.733 124.339 li
69.033 124.399 li
68.913 124.339 li
69.153 124.519 li
69.093 124.459 li
69.273 124.579 li
69.213 124.519 li
69.393 124.759 li
69.333 124.699 li
69.453 124.939 li
69.453 124.819 li
69.513 125.119 li
69.513 124.999 li
69.513 125.299 li
69.513 125.179 li
69.513 125.479 li
69.513 125.359 li
69.453 125.659 li
69.453 125.539 li
69.333 125.779 li
69.393 125.719 li
69.213 125.899 li
69.273 125.839 li
69.093 126.019 li
69.153 125.959 li
68.913 126.079 li
69.033 126.079 li
68.733 126.139 li
68.853 126.139 li
68.553 126.139 li
68.673 126.139 li
68.373 126.139 li
68.493 126.139 li
68.193 126.079 li
68.313 126.079 li
68.073 125.959 li
68.133 126.019 li
67.893 125.839 li
68.013 125.899 li
67.833 125.719 li
67.893 125.779 li
67.713 125.539 li
67.773 125.659 li
67.713 125.359 li
67.713 125.479 li
67.653 125.179 li
67.653 125.299 li
f
67.053 113.479 mo
67.053 114.259 67.653 114.919 68.433 114.919 cv
69.213 114.919 69.873 114.259 69.873 113.479 cv
69.873 112.699 69.213 112.039 68.433 112.039 cv
67.653 112.039 67.053 112.699 67.053 113.479 cv
ef
66.513 113.479 mo
66.573 113.899 li
66.693 114.259 li
67.346 115.795 69.568 115.764 70.233 114.259 cv
70.353 113.899 li
70.353 113.479 li
70.43 111.783 68.092 110.779 66.873 112.399 cv
66.693 112.759 li
66.573 113.119 li
cp
67.533 113.239 mo
67.533 113.359 li
67.653 113.059 li
67.593 113.179 li
67.713 112.939 li
67.653 112.999 li
67.833 112.819 li
67.773 112.879 li
67.953 112.699 li
67.893 112.759 li
68.133 112.639 li
68.073 112.639 li
68.313 112.579 li
68.193 112.579 li
68.493 112.579 li
68.373 112.579 li
68.673 112.579 li
68.613 112.579 li
68.853 112.639 li
68.793 112.639 li
69.033 112.759 li
68.913 112.699 li
69.153 112.879 li
69.093 112.819 li
69.273 112.999 li
69.213 112.939 li
69.333 113.179 li
69.273 113.059 li
69.333 113.359 li
69.333 113.239 li
69.393 113.539 li
69.393 113.419 li
69.333 113.719 li
69.333 113.599 li
69.273 113.899 li
69.333 113.779 li
69.213 114.019 li
69.273 113.959 li
69.093 114.139 li
69.153 114.079 li
68.913 114.259 li
68.973 114.199 li
68.733 114.379 li
68.853 114.319 li
68.613 114.379 li
68.673 114.379 li
68.373 114.379 li
68.493 114.379 li
68.193 114.379 li
68.313 114.379 li
68.073 114.319 li
68.133 114.379 li
67.893 114.199 li
67.953 114.259 li
67.773 114.079 li
67.833 114.199 li
67.653 113.959 li
67.713 114.019 li
67.593 113.779 li
67.653 113.899 li
67.533 113.599 li
67.533 113.719 li
67.533 113.419 li
67.533 113.539 li
f
75.933 113.479 mo
75.933 114.259 76.593 114.919 77.373 114.919 cv
78.153 114.919 78.753 114.259 78.753 113.479 cv
78.753 112.699 78.153 112.039 77.373 112.039 cv
76.593 112.039 75.933 112.699 75.933 113.479 cv
ef
75.453 113.479 mo
75.453 113.899 li
75.573 114.259 li
76.238 115.764 78.46 115.795 79.113 114.259 cv
79.233 113.899 li
79.293 113.479 li
79.112 111.585 76.992 110.885 75.753 112.399 cv
75.573 112.759 li
75.453 113.119 li
cp
76.473 113.239 mo
76.473 113.359 li
76.533 113.059 li
76.473 113.179 li
76.593 112.939 li
76.593 112.999 li
76.713 112.819 li
76.653 112.879 li
76.893 112.699 li
76.773 112.759 li
77.013 112.639 li
76.953 112.639 li
77.193 112.579 li
77.133 112.579 li
77.433 112.579 li
77.313 112.579 li
77.613 112.579 li
77.493 112.579 li
77.733 112.639 li
77.673 112.639 li
77.913 112.759 li
77.853 112.699 li
78.033 112.879 li
77.973 112.819 li
78.153 112.999 li
78.093 112.939 li
78.213 113.179 li
78.213 113.059 li
78.273 113.359 li
78.273 113.239 li
78.273 113.539 li
78.273 113.419 li
78.273 113.719 li
78.273 113.599 li
78.213 113.899 li
78.213 113.779 li
78.093 114.019 li
78.153 113.959 li
77.973 114.139 li
78.033 114.079 li
77.853 114.259 li
77.913 114.199 li
77.673 114.379 li
77.733 114.319 li
77.493 114.379 li
77.613 114.379 li
77.313 114.379 li
77.433 114.379 li
77.133 114.379 li
77.193 114.379 li
76.953 114.319 li
77.073 114.379 li
76.833 114.199 li
76.893 114.259 li
76.653 114.079 li
76.713 114.199 li
76.593 113.959 li
76.593 114.019 li
76.473 113.779 li
76.533 113.899 li
76.473 113.599 li
76.473 113.719 li
76.413 113.419 li
76.413 113.539 li
f
76.353 106.579 mo
76.353 107.359 77.013 107.959 77.793 107.959 cv
78.573 107.959 79.173 107.359 79.173 106.579 cv
79.173 105.799 78.573 105.139 77.793 105.139 cv
77.013 105.139 76.353 105.799 76.353 106.579 cv
ef
75.873 106.579 mo
75.873 106.939 li
75.993 107.299 li
76.698 108.856 78.841 108.887 79.533 107.299 cv
79.653 106.939 li
79.713 106.579 li
79.649 104.675 77.263 103.887 76.173 105.499 cv
75.993 105.799 li
75.873 106.159 li
cp
76.893 106.339 mo
76.893 106.459 li
76.953 106.159 li
76.893 106.279 li
77.013 106.039 li
77.013 106.099 li
77.133 105.859 li
77.073 105.919 li
77.313 105.799 li
77.193 105.859 li
77.433 105.679 li
77.373 105.739 li
77.613 105.679 li
77.553 105.679 li
77.853 105.619 li
77.733 105.619 li
78.033 105.679 li
77.913 105.679 li
78.153 105.739 li
78.093 105.679 li
78.333 105.859 li
78.273 105.799 li
78.453 105.919 li
78.393 105.859 li
78.573 106.099 li
78.513 106.039 li
78.633 106.279 li
78.633 106.159 li
78.693 106.459 li
78.693 106.339 li
78.693 106.639 li
78.693 106.519 li
78.693 106.819 li
78.693 106.699 li
78.633 106.999 li
78.633 106.879 li
78.513 107.119 li
78.573 107.059 li
78.393 107.239 li
78.453 107.179 li
78.273 107.359 li
78.333 107.299 li
78.093 107.419 li
78.153 107.419 li
77.913 107.479 li
78.033 107.479 li
77.733 107.479 li
77.853 107.479 li
77.553 107.479 li
77.613 107.479 li
77.373 107.419 li
77.493 107.419 li
77.253 107.299 li
77.313 107.359 li
77.073 107.179 li
77.133 107.239 li
77.013 107.059 li
77.013 107.119 li
76.893 106.879 li
76.953 106.999 li
76.893 106.699 li
76.893 106.819 li
76.833 106.519 li
76.833 106.639 li
f
101.733 56.899 mo
101.733 57.679 102.333 58.339 103.113 58.339 cv
103.893 58.339 104.553 57.679 104.553 56.899 cv
104.553 56.119 103.893 55.519 103.113 55.519 cv
102.333 55.519 101.733 56.119 101.733 56.899 cv
ef
101.193 56.899 mo
101.253 57.319 li
101.373 57.679 li
102.026 59.215 104.248 59.184 104.913 57.679 cv
105.033 57.319 li
105.033 56.899 li
105.11 55.203 102.772 54.199 101.553 55.819 cv
101.373 56.179 li
101.253 56.539 li
cp
102.213 56.659 mo
102.213 56.779 li
102.333 56.479 li
102.273 56.599 li
102.393 56.359 li
102.333 56.419 li
102.513 56.239 li
102.453 56.299 li
102.633 56.119 li
102.573 56.179 li
102.813 56.059 li
102.753 56.059 li
102.993 55.999 li
102.873 55.999 li
103.173 55.999 li
103.053 55.999 li
103.353 55.999 li
103.293 55.999 li
103.533 56.059 li
103.473 56.059 li
103.713 56.179 li
103.593 56.119 li
103.833 56.299 li
103.773 56.239 li
103.953 56.419 li
103.893 56.359 li
104.013 56.599 li
103.953 56.479 li
104.013 56.779 li
104.013 56.659 li
104.073 56.959 li
104.073 56.839 li
104.013 57.139 li
104.013 57.019 li
103.953 57.319 li
104.013 57.199 li
103.893 57.439 li
103.953 57.379 li
103.773 57.559 li
103.833 57.499 li
103.593 57.679 li
103.653 57.619 li
103.413 57.799 li
103.533 57.739 li
103.293 57.799 li
103.353 57.799 li
103.053 57.859 li
103.173 57.859 li
102.873 57.799 li
102.993 57.799 li
102.753 57.739 li
102.813 57.799 li
102.573 57.619 li
102.633 57.679 li
102.453 57.499 li
102.513 57.619 li
102.333 57.379 li
102.393 57.439 li
102.273 57.199 li
102.333 57.319 li
102.213 57.019 li
102.213 57.139 li
102.213 56.839 li
102.213 56.959 li
f
75.933 94.159 mo
75.933 94.939 76.593 95.599 77.373 95.599 cv
78.153 95.599 78.753 94.939 78.753 94.159 cv
78.753 93.379 78.153 92.719 77.373 92.719 cv
76.593 92.719 75.933 93.379 75.933 94.159 cv
ef
75.453 94.159 mo
75.453 94.519 li
75.573 94.879 li
76.263 96.434 78.472 96.469 79.113 94.879 cv
79.233 94.519 li
79.293 94.159 li
79.191 92.118 76.746 91.609 75.753 93.079 cv
75.573 93.379 li
75.453 93.739 li
cp
76.473 93.919 mo
76.473 94.039 li
76.533 93.739 li
76.473 93.859 li
76.593 93.619 li
76.593 93.679 li
76.713 93.439 li
76.653 93.559 li
76.893 93.379 li
76.773 93.439 li
77.013 93.259 li
76.953 93.319 li
77.193 93.259 li
77.133 93.259 li
77.433 93.259 li
77.313 93.259 li
77.613 93.259 li
77.493 93.259 li
77.733 93.319 li
77.673 93.259 li
77.913 93.439 li
77.853 93.379 li
78.033 93.559 li
77.973 93.499 li
78.153 93.679 li
78.093 93.619 li
78.213 93.859 li
78.213 93.739 li
78.273 94.039 li
78.273 93.919 li
78.273 94.219 li
78.273 94.099 li
78.273 94.399 li
78.273 94.279 li
78.213 94.579 li
78.213 94.459 li
78.093 94.699 li
78.153 94.639 li
77.973 94.819 li
78.033 94.759 li
77.853 94.939 li
77.913 94.879 li
77.673 94.999 li
77.733 94.999 li
77.493 95.059 li
77.613 95.059 li
77.313 95.059 li
77.433 95.059 li
77.133 95.059 li
77.193 95.059 li
76.953 94.999 li
77.073 94.999 li
76.833 94.879 li
76.893 94.939 li
76.653 94.759 li
76.713 94.819 li
76.593 94.639 li
76.593 94.699 li
76.473 94.459 li
76.533 94.579 li
76.473 94.279 li
76.473 94.399 li
76.413 94.099 li
76.413 94.219 li
f
76.173 100.699 mo
76.173 101.479 76.833 102.079 77.613 102.079 cv
78.393 102.079 78.993 101.479 78.993 100.699 cv
78.993 99.919 78.393 99.259 77.613 99.259 cv
76.833 99.259 76.173 99.919 76.173 100.699 cv
ef
75.693 100.699 mo
75.693 101.059 li
75.813 101.419 li
76.54 102.99 78.627 102.991 79.353 101.419 cv
79.473 101.059 li
79.533 100.699 li
79.478 98.821 77.063 98 75.993 99.619 cv
75.813 99.919 li
75.693 100.279 li
cp
76.713 100.459 mo
76.653 100.579 li
76.773 100.279 li
76.713 100.399 li
76.833 100.159 li
76.773 100.219 li
76.953 99.979 li
76.893 100.039 li
77.133 99.919 li
77.013 99.979 li
77.253 99.799 li
77.193 99.859 li
77.433 99.799 li
77.373 99.799 li
77.613 99.739 li
77.553 99.739 li
77.793 99.799 li
77.733 99.799 li
77.973 99.859 li
77.913 99.799 li
78.153 99.979 li
78.033 99.919 li
78.273 100.039 li
78.213 99.979 li
78.393 100.219 li
78.333 100.159 li
78.453 100.399 li
78.393 100.279 li
78.513 100.579 li
78.453 100.459 li
78.513 100.759 li
78.513 100.639 li
78.453 100.939 li
78.513 100.819 li
78.393 101.119 li
78.453 100.999 li
78.333 101.239 li
78.393 101.179 li
78.213 101.359 li
78.273 101.299 li
78.033 101.479 li
78.153 101.419 li
77.913 101.539 li
77.973 101.539 li
77.733 101.599 li
77.793 101.599 li
77.553 101.599 li
77.613 101.599 li
77.373 101.599 li
77.433 101.599 li
77.193 101.539 li
77.253 101.539 li
77.013 101.419 li
77.133 101.479 li
76.893 101.299 li
76.953 101.359 li
76.773 101.179 li
76.833 101.239 li
76.713 100.999 li
76.773 101.119 li
76.653 100.819 li
76.713 100.939 li
76.653 100.639 li
76.653 100.759 li
f
84.933 93.859 mo
84.933 94.699 85.593 95.299 86.373 95.299 cv
87.153 95.299 87.753 94.699 87.753 93.859 cv
87.753 93.079 87.153 92.479 86.373 92.479 cv
85.593 92.479 84.933 93.079 84.933 93.859 cv
ef
84.453 93.859 mo
84.453 94.279 li
84.573 94.639 li
85.278 96.188 87.409 96.186 88.113 94.639 cv
88.233 94.279 li
88.293 93.859 li
88.12 92.03 85.922 91.186 84.753 92.839 cv
84.573 93.139 li
84.453 93.499 li
cp
85.473 93.679 mo
85.413 93.739 li
85.533 93.499 li
85.473 93.559 li
85.593 93.319 li
85.533 93.439 li
85.713 93.199 li
85.653 93.259 li
85.893 93.079 li
85.773 93.139 li
86.013 93.019 li
85.953 93.079 li
86.193 92.959 li
86.133 93.019 li
86.373 92.959 li
86.313 92.959 li
86.553 93.019 li
86.493 92.959 li
86.733 93.079 li
86.673 93.019 li
86.913 93.139 li
86.793 93.079 li
87.033 93.259 li
86.973 93.199 li
87.153 93.439 li
87.093 93.319 li
87.213 93.559 li
87.153 93.499 li
87.273 93.739 li
87.213 93.679 li
87.273 93.919 li
87.273 93.859 li
87.213 94.099 li
87.273 94.039 li
87.153 94.279 li
87.213 94.219 li
87.093 94.459 li
87.153 94.339 li
86.973 94.579 li
87.033 94.519 li
86.793 94.699 li
86.913 94.639 li
86.673 94.759 li
86.733 94.699 li
86.493 94.819 li
86.553 94.759 li
86.313 94.819 li
86.373 94.819 li
86.133 94.759 li
86.193 94.819 li
85.953 94.699 li
86.013 94.759 li
85.773 94.639 li
85.893 94.699 li
85.653 94.519 li
85.713 94.579 li
85.533 94.339 li
85.593 94.459 li
85.473 94.219 li
85.533 94.279 li
85.413 94.039 li
85.473 94.099 li
85.413 93.859 li
85.413 93.919 li
f
84.633 87.619 mo
84.633 88.399 85.293 89.059 86.073 89.059 cv
86.853 89.059 87.513 88.399 87.513 87.619 cv
87.513 86.839 86.853 86.179 86.073 86.179 cv
85.293 86.179 84.633 86.839 84.633 87.619 cv
ef
84.153 87.619 mo
84.213 87.979 li
84.333 88.339 li
84.731 89.888 87.415 89.888 87.813 88.339 cv
87.933 87.979 li
87.993 87.619 li
87.898 85.453 85.377 85.167 84.453 86.539 cv
84.333 86.839 li
84.213 87.259 li
cp
85.173 87.379 mo
85.173 87.499 li
85.233 87.199 li
85.233 87.319 li
85.353 87.079 li
85.293 87.139 li
85.473 86.959 li
85.413 87.019 li
85.593 86.839 li
85.533 86.899 li
85.773 86.779 li
85.653 86.779 li
85.953 86.719 li
85.833 86.719 li
86.133 86.719 li
86.013 86.719 li
86.313 86.719 li
86.193 86.719 li
86.493 86.779 li
86.373 86.779 li
86.613 86.899 li
86.553 86.839 li
86.733 87.019 li
86.673 86.959 li
86.853 87.139 li
86.793 87.079 li
86.913 87.319 li
86.913 87.199 li
86.973 87.499 li
86.973 87.379 li
86.973 87.679 li
86.973 87.559 li
86.973 87.859 li
86.973 87.739 li
86.913 88.039 li
86.913 87.919 li
86.793 88.159 li
86.853 88.099 li
86.673 88.279 li
86.733 88.219 li
86.553 88.399 li
86.613 88.339 li
86.373 88.459 li
86.493 88.459 li
86.193 88.519 li
86.313 88.519 li
86.013 88.519 li
86.133 88.519 li
85.833 88.519 li
85.953 88.519 li
85.653 88.459 li
85.773 88.459 li
85.533 88.339 li
85.593 88.399 li
85.413 88.219 li
85.473 88.279 li
85.293 88.099 li
85.353 88.159 li
85.233 87.919 li
85.233 88.039 li
85.173 87.739 li
85.173 87.859 li
85.173 87.559 li
85.173 87.679 li
f
84.633 75.319 mo
84.633 76.099 85.293 76.759 86.073 76.759 cv
86.853 76.759 87.513 76.099 87.513 75.319 cv
87.513 74.539 86.853 73.939 86.073 73.939 cv
85.293 73.939 84.633 74.539 84.633 75.319 cv
ef
84.153 75.319 mo
84.213 75.739 li
84.333 76.099 li
84.838 77.637 87.308 77.637 87.813 76.099 cv
87.933 75.739 li
87.993 75.319 li
87.926 73.407 85.608 72.769 84.453 74.239 cv
84.213 74.959 li
cp
85.173 75.079 mo
85.173 75.199 li
85.233 74.959 li
85.233 75.019 li
85.353 74.779 li
85.293 74.839 li
85.473 74.659 li
85.413 74.719 li
85.593 74.539 li
85.533 74.599 li
85.773 74.479 li
85.653 74.479 li
85.953 74.419 li
85.833 74.419 li
86.133 74.419 li
86.013 74.419 li
86.313 74.419 li
86.193 74.419 li
86.493 74.479 li
86.373 74.479 li
86.613 74.599 li
86.553 74.539 li
86.733 74.719 li
86.673 74.659 li
86.853 74.839 li
86.793 74.779 li
86.913 75.019 li
86.913 74.959 li
86.973 75.199 li
86.973 75.079 li
86.973 75.379 li
86.973 75.259 li
86.973 75.559 li
86.973 75.499 li
86.913 75.739 li
86.913 75.679 li
86.793 75.919 li
86.853 75.799 li
86.673 76.039 li
86.733 75.979 li
86.553 76.099 li
86.613 76.099 li
86.373 76.219 li
86.493 76.159 li
86.193 76.219 li
86.313 76.219 li
86.013 76.279 li
86.133 76.279 li
85.833 76.219 li
85.953 76.219 li
85.653 76.159 li
85.773 76.219 li
85.533 76.099 li
85.593 76.099 li
85.413 75.979 li
85.473 76.039 li
85.293 75.799 li
85.353 75.859 li
85.233 75.619 li
85.233 75.739 li
85.173 75.499 li
85.173 75.559 li
85.173 75.259 li
85.173 75.379 li
f
84.993 81.859 mo
84.993 82.639 85.653 83.299 86.433 83.299 cv
87.213 83.299 87.873 82.639 87.873 81.859 cv
87.873 81.079 87.213 80.479 86.433 80.479 cv
85.653 80.479 84.993 81.079 84.993 81.859 cv
ef
84.513 81.859 mo
84.573 82.279 li
84.693 82.639 li
85.333 84.214 87.553 84.168 88.233 82.639 cv
88.293 82.279 li
88.353 81.859 li
88.359 80.001 85.833 79.219 84.873 80.839 cv
84.693 81.139 li
84.573 81.499 li
cp
85.533 81.679 mo
85.533 81.739 li
85.593 81.499 li
85.593 81.559 li
85.713 81.319 li
85.653 81.379 li
85.833 81.199 li
85.773 81.259 li
85.953 81.079 li
85.893 81.139 li
86.133 81.019 li
86.013 81.079 li
86.313 80.959 li
86.193 81.019 li
86.493 80.959 li
86.373 80.959 li
86.673 81.019 li
86.553 80.959 li
86.853 81.079 li
86.733 81.019 li
86.973 81.139 li
86.913 81.079 li
87.093 81.259 li
87.033 81.199 li
87.213 81.439 li
87.153 81.319 li
87.273 81.559 li
87.273 81.499 li
87.333 81.739 li
87.333 81.679 li
87.333 81.919 li
87.333 81.859 li
87.333 82.099 li
87.333 82.039 li
87.273 82.279 li
87.273 82.219 li
87.153 82.459 li
87.213 82.339 li
87.033 82.579 li
87.093 82.519 li
86.913 82.699 li
86.973 82.639 li
86.733 82.759 li
86.853 82.699 li
86.553 82.819 li
86.673 82.759 li
86.373 82.819 li
86.493 82.819 li
86.193 82.759 li
86.313 82.819 li
86.013 82.699 li
86.133 82.759 li
85.893 82.639 li
85.953 82.699 li
85.773 82.519 li
85.833 82.579 li
85.653 82.339 li
85.713 82.459 li
85.593 82.219 li
85.593 82.279 li
85.533 82.039 li
85.533 82.099 li
85.533 81.859 li
85.533 81.919 li
f
93.633 69.199 mo
93.633 69.979 94.233 70.639 95.013 70.639 cv
95.793 70.639 96.453 69.979 96.453 69.199 cv
96.453 68.419 95.793 67.759 95.013 67.759 cv
94.233 67.759 93.633 68.419 93.633 69.199 cv
ef
93.093 69.199 mo
93.153 69.559 li
93.273 69.919 li
93.888 71.515 96.204 71.459 96.813 69.919 cv
96.933 69.559 li
96.933 69.199 li
97.058 67.275 94.376 66.587 93.453 68.119 cv
93.273 68.419 li
93.153 68.779 li
cp
94.173 68.959 mo
94.113 69.079 li
94.233 68.779 li
94.173 68.899 li
94.293 68.659 li
94.233 68.719 li
94.413 68.479 li
94.353 68.599 li
94.593 68.419 li
94.473 68.479 li
94.713 68.359 li
94.653 68.359 li
94.893 68.299 li
94.773 68.299 li
95.073 68.299 li
94.953 68.299 li
95.253 68.299 li
95.193 68.299 li
95.433 68.359 li
95.373 68.359 li
95.613 68.479 li
95.493 68.419 li
95.733 68.599 li
95.673 68.539 li
95.853 68.719 li
95.793 68.659 li
95.913 68.899 li
95.853 68.779 li
95.973 69.079 li
95.913 68.959 li
95.973 69.259 li
95.973 69.139 li
95.913 69.439 li
95.973 69.319 li
95.853 69.619 li
95.913 69.499 li
95.793 69.739 li
95.853 69.679 li
95.673 69.859 li
95.733 69.799 li
95.493 69.979 li
95.613 69.919 li
95.373 70.039 li
95.433 70.039 li
95.193 70.099 li
95.253 70.099 li
94.953 70.099 li
95.073 70.099 li
94.773 70.099 li
94.893 70.099 li
94.653 70.039 li
94.713 70.039 li
94.473 69.919 li
94.533 69.979 li
94.353 69.799 li
94.413 69.859 li
94.233 69.679 li
94.293 69.739 li
94.173 69.499 li
94.233 69.619 li
94.113 69.319 li
94.173 69.439 li
94.113 69.139 li
94.113 69.259 li
f
101.733 69.199 mo
101.733 69.979 102.333 70.639 103.173 70.639 cv
103.953 70.639 104.553 69.979 104.553 69.199 cv
104.553 68.419 103.953 67.759 103.173 67.759 cv
102.333 67.759 101.733 68.419 101.733 69.199 cv
ef
101.253 69.199 mo
101.253 69.559 li
101.373 69.919 li
102.009 71.485 104.276 71.487 104.913 69.919 cv
105.033 69.559 li
105.093 69.199 li
105.003 67.212 102.563 66.62 101.553 68.119 cv
101.373 68.419 li
101.253 68.779 li
cp
102.273 68.959 mo
102.213 69.079 li
102.333 68.779 li
102.273 68.899 li
102.393 68.659 li
102.333 68.719 li
102.513 68.479 li
102.453 68.599 li
102.693 68.419 li
102.573 68.479 li
102.813 68.359 li
102.753 68.359 li
102.993 68.299 li
102.933 68.299 li
103.173 68.299 li
103.113 68.299 li
103.353 68.299 li
103.293 68.299 li
103.533 68.359 li
103.473 68.359 li
103.713 68.479 li
103.593 68.419 li
103.833 68.599 li
103.773 68.539 li
103.953 68.719 li
103.893 68.659 li
104.013 68.899 li
103.953 68.779 li
104.073 69.079 li
104.013 68.959 li
104.073 69.259 li
104.073 69.139 li
104.013 69.439 li
104.073 69.319 li
103.953 69.619 li
104.013 69.499 li
103.893 69.739 li
103.953 69.679 li
103.773 69.859 li
103.833 69.799 li
103.593 69.979 li
103.713 69.919 li
103.473 70.039 li
103.533 70.039 li
103.293 70.099 li
103.353 70.099 li
103.113 70.099 li
103.173 70.099 li
102.933 70.099 li
102.993 70.099 li
102.753 70.039 li
102.813 70.039 li
102.573 69.919 li
102.693 69.979 li
102.453 69.799 li
102.513 69.859 li
102.333 69.679 li
102.393 69.739 li
102.273 69.499 li
102.333 69.619 li
102.213 69.319 li
102.273 69.439 li
102.213 69.139 li
102.213 69.259 li
f
93.633 74.959 mo
93.633 75.739 94.293 76.339 95.073 76.339 cv
95.853 76.339 96.513 75.739 96.513 74.959 cv
96.513 74.179 95.853 73.519 95.073 73.519 cv
94.293 73.519 93.633 74.179 93.633 74.959 cv
ef
93.153 74.959 mo
93.213 75.319 li
93.333 75.679 li
93.968 77.286 96.201 77.198 96.873 75.679 cv
96.993 74.959 li
97.036 72.94 94.361 72.357 93.513 73.879 cv
93.333 74.179 li
93.213 74.539 li
cp
94.173 74.719 mo
94.173 74.779 li
94.233 74.539 li
94.233 74.659 li
94.353 74.419 li
94.293 74.479 li
94.473 74.239 li
94.413 74.299 li
94.593 74.179 li
94.533 74.179 li
94.773 74.059 li
94.653 74.119 li
94.953 74.059 li
94.833 74.059 li
95.133 73.999 li
95.013 73.999 li
95.313 74.059 li
95.193 74.059 li
95.493 74.119 li
95.373 74.059 li
95.613 74.179 li
95.553 74.179 li
95.733 74.299 li
95.673 74.239 li
95.853 74.479 li
95.793 74.359 li
95.913 74.599 li
95.913 74.539 li
95.973 74.779 li
95.973 74.719 li
95.973 75.019 li
95.973 74.899 li
95.973 75.199 li
95.973 75.079 li
95.913 75.319 li
95.913 75.259 li
95.793 75.499 li
95.853 75.439 li
95.673 75.619 li
95.733 75.559 li
95.553 75.739 li
95.613 75.679 li
95.373 75.799 li
95.493 75.799 li
95.193 75.859 li
95.313 75.859 li
95.013 75.859 li
95.133 75.859 li
94.833 75.859 li
94.953 75.859 li
94.653 75.799 li
94.773 75.799 li
94.533 75.679 li
94.593 75.739 li
94.413 75.559 li
94.473 75.619 li
94.293 75.439 li
94.353 75.499 li
94.233 75.259 li
94.233 75.319 li
94.173 75.079 li
94.173 75.199 li
94.173 74.899 li
94.173 75.019 li
f
119.073 50.539 mo
119.073 51.319 119.673 51.979 120.453 51.979 cv
121.293 51.979 121.893 51.319 121.893 50.539 cv
121.893 49.759 121.293 49.159 120.453 49.159 cv
119.673 49.159 119.073 49.759 119.073 50.539 cv
ef
118.533 50.539 mo
118.593 50.959 li
118.713 51.319 li
119.417 52.866 121.548 52.868 122.253 51.319 cv
122.373 50.959 li
122.373 50.539 li
122.387 48.684 120.027 47.945 118.893 49.459 cv
118.713 49.819 li
118.593 50.179 li
cp
119.613 50.299 mo
119.553 50.419 li
119.673 50.119 li
119.613 50.239 li
119.733 49.999 li
119.673 50.059 li
119.853 49.879 li
119.793 49.939 li
120.033 49.759 li
119.913 49.819 li
120.153 49.699 li
120.093 49.699 li
120.333 49.639 li
120.273 49.639 li
120.513 49.639 li
120.453 49.639 li
120.693 49.639 li
120.633 49.639 li
120.873 49.699 li
120.813 49.699 li
121.053 49.819 li
120.933 49.759 li
121.173 49.939 li
121.113 49.879 li
121.293 50.059 li
121.233 49.999 li
121.353 50.239 li
121.293 50.119 li
121.413 50.419 li
121.353 50.299 li
121.413 50.599 li
121.413 50.479 li
121.353 50.779 li
121.413 50.719 li
121.293 50.959 li
121.353 50.839 li
121.233 51.079 li
121.293 51.019 li
121.113 51.259 li
121.173 51.139 li
120.933 51.319 li
121.053 51.259 li
120.813 51.439 li
120.873 51.379 li
120.633 51.439 li
120.693 51.439 li
120.453 51.499 li
120.513 51.499 li
120.273 51.439 li
120.333 51.439 li
120.093 51.379 li
120.153 51.439 li
119.913 51.259 li
120.033 51.319 li
119.793 51.139 li
119.853 51.259 li
119.673 51.019 li
119.733 51.079 li
119.613 50.839 li
119.673 50.959 li
119.553 50.719 li
119.613 50.779 li
119.553 50.479 li
119.553 50.599 li
f
110.793 57.199 mo
110.793 57.979 111.453 58.639 112.233 58.639 cv
113.013 58.639 113.673 57.979 113.673 57.199 cv
113.673 56.419 113.013 55.759 112.233 55.759 cv
111.453 55.759 110.793 56.419 110.793 57.199 cv
ef
110.313 57.199 mo
110.433 57.919 li
111.042 59.459 113.358 59.515 113.973 57.919 cv
114.093 57.559 li
114.153 57.199 li
114.098 55.232 111.705 54.605 110.613 56.119 cv
110.433 56.419 li
110.373 56.779 li
cp
111.333 56.959 mo
111.333 57.079 li
111.393 56.779 li
111.333 56.899 li
111.513 56.659 li
111.453 56.719 li
111.633 56.479 li
111.573 56.599 li
111.753 56.419 li
111.693 56.479 li
111.933 56.359 li
111.813 56.359 li
112.113 56.299 li
111.993 56.299 li
112.293 56.299 li
112.173 56.299 li
112.473 56.299 li
112.353 56.299 li
112.653 56.359 li
112.533 56.359 li
112.773 56.479 li
112.713 56.419 li
112.893 56.599 li
112.833 56.539 li
113.013 56.719 li
112.953 56.659 li
113.073 56.899 li
113.073 56.779 li
113.133 57.079 li
113.133 56.959 li
113.133 57.259 li
113.133 57.139 li
113.133 57.439 li
113.133 57.319 li
113.073 57.619 li
113.073 57.499 li
112.953 57.739 li
113.013 57.679 li
112.833 57.859 li
112.893 57.799 li
112.713 57.979 li
112.773 57.919 li
112.533 58.039 li
112.653 58.039 li
112.353 58.099 li
112.473 58.099 li
112.173 58.099 li
112.293 58.099 li
111.993 58.099 li
112.113 58.099 li
111.813 58.039 li
111.933 58.039 li
111.693 57.919 li
111.753 57.979 li
111.573 57.799 li
111.633 57.859 li
111.453 57.679 li
111.513 57.739 li
111.333 57.499 li
111.393 57.619 li
111.333 57.319 li
111.333 57.439 li
111.333 57.139 li
111.333 57.259 li
f
101.733 62.899 mo
101.733 63.679 102.333 64.279 103.113 64.279 cv
103.893 64.279 104.553 63.679 104.553 62.899 cv
104.553 62.119 103.893 61.459 103.113 61.459 cv
102.333 61.459 101.733 62.119 101.733 62.899 cv
ef
101.193 62.899 mo
101.253 63.259 li
101.373 63.619 li
102.065 65.207 104.208 65.176 104.913 63.619 cv
105.033 63.259 li
105.033 62.899 li
105.147 61.024 102.538 60.199 101.553 61.819 cv
101.373 62.119 li
101.253 62.479 li
cp
102.213 62.659 mo
102.213 62.719 li
102.333 62.479 li
102.273 62.599 li
102.393 62.359 li
102.333 62.419 li
102.513 62.179 li
102.453 62.239 li
102.633 62.059 li
102.573 62.119 li
102.813 61.999 li
102.753 62.059 li
102.993 61.999 li
102.873 61.999 li
103.173 61.939 li
103.053 61.939 li
103.353 61.999 li
103.293 61.999 li
103.533 62.059 li
103.473 61.999 li
103.713 62.119 li
103.593 62.059 li
103.833 62.239 li
103.773 62.179 li
103.953 62.419 li
103.893 62.299 li
104.013 62.539 li
103.953 62.479 li
104.013 62.719 li
104.013 62.659 li
104.073 62.959 li
104.073 62.839 li
104.013 63.139 li
104.013 63.019 li
103.953 63.259 li
104.013 63.199 li
103.893 63.439 li
103.953 63.379 li
103.773 63.559 li
103.833 63.499 li
103.593 63.679 li
103.653 63.619 li
103.413 63.739 li
103.533 63.739 li
103.293 63.799 li
103.353 63.799 li
103.053 63.799 li
103.173 63.799 li
102.873 63.799 li
102.993 63.799 li
102.753 63.739 li
102.813 63.739 li
102.573 63.619 li
102.633 63.679 li
102.453 63.499 li
102.513 63.559 li
102.333 63.379 li
102.393 63.439 li
102.273 63.199 li
102.333 63.259 li
102.213 63.019 li
102.213 63.139 li
102.213 62.839 li
102.213 62.959 li
f
110.793 50.839 mo
110.793 51.619 111.453 52.219 112.233 52.219 cv
113.013 52.219 113.673 51.619 113.673 50.839 cv
113.673 50.059 113.013 49.399 112.233 49.399 cv
111.453 49.399 110.793 50.059 110.793 50.839 cv
ef
110.313 50.839 mo
110.433 51.559 li
111.211 53.124 113.209 53.156 113.973 51.559 cv
114.093 51.199 li
114.153 50.839 li
114.086 48.893 111.73 48.177 110.613 49.759 cv
110.433 50.059 li
110.373 50.419 li
cp
111.333 50.599 mo
111.333 50.659 li
111.393 50.419 li
111.333 50.479 li
111.513 50.239 li
111.453 50.359 li
111.633 50.119 li
111.573 50.179 li
111.753 49.999 li
111.693 50.059 li
111.933 49.939 li
111.813 49.999 li
112.113 49.879 li
111.993 49.939 li
112.293 49.879 li
112.173 49.879 li
112.473 49.939 li
112.353 49.879 li
112.653 49.999 li
112.533 49.939 li
112.773 50.059 li
112.713 49.999 li
112.893 50.179 li
112.833 50.119 li
113.013 50.359 li
112.953 50.239 li
113.073 50.479 li
113.073 50.419 li
113.133 50.659 li
113.133 50.599 li
113.133 50.839 li
113.133 50.779 li
113.133 51.019 li
113.133 50.959 li
113.073 51.199 li
113.073 51.139 li
112.953 51.379 li
113.013 51.259 li
112.833 51.499 li
112.893 51.439 li
112.713 51.619 li
112.773 51.559 li
112.533 51.679 li
112.653 51.619 li
112.353 51.739 li
112.473 51.679 li
112.173 51.739 li
112.293 51.739 li
111.993 51.679 li
112.113 51.739 li
111.813 51.619 li
111.933 51.679 li
111.693 51.559 li
111.753 51.619 li
111.573 51.439 li
111.633 51.499 li
111.453 51.259 li
111.513 51.379 li
111.333 51.139 li
111.393 51.199 li
111.333 50.959 li
111.333 51.019 li
111.333 50.779 li
111.333 50.839 li
f
119.073 44.299 mo
119.073 45.079 119.673 45.739 120.453 45.739 cv
121.293 45.739 121.893 45.079 121.893 44.299 cv
121.893 43.519 121.293 42.859 120.453 42.859 cv
119.673 42.859 119.073 43.519 119.073 44.299 cv
ef
118.533 44.299 mo
118.593 44.659 li
118.713 45.079 li
119.396 46.626 121.68 46.585 122.253 45.019 cv
122.373 44.659 li
122.373 44.299 li
122.448 42.39 119.921 41.716 118.893 43.219 cv
118.713 43.579 li
118.593 43.939 li
cp
119.613 44.059 mo
119.553 44.179 li
119.673 43.879 li
119.613 43.999 li
119.733 43.759 li
119.673 43.819 li
119.853 43.639 li
119.793 43.699 li
120.033 43.519 li
119.913 43.579 li
120.153 43.459 li
120.093 43.459 li
120.333 43.399 li
120.273 43.399 li
120.513 43.399 li
120.453 43.399 li
120.693 43.399 li
120.633 43.399 li
120.873 43.459 li
120.813 43.459 li
121.053 43.579 li
120.933 43.519 li
121.173 43.699 li
121.113 43.639 li
121.293 43.819 li
121.233 43.759 li
121.353 43.999 li
121.293 43.879 li
121.413 44.179 li
121.353 44.059 li
121.413 44.359 li
121.413 44.239 li
121.353 44.539 li
121.413 44.419 li
121.293 44.719 li
121.353 44.599 li
121.233 44.839 li
121.293 44.779 li
121.113 44.959 li
121.173 44.899 li
120.933 45.079 li
121.053 45.019 li
120.813 45.139 li
120.873 45.139 li
120.633 45.199 li
120.693 45.199 li
120.453 45.199 li
120.513 45.199 li
120.273 45.199 li
120.333 45.199 li
120.093 45.139 li
120.153 45.139 li
119.913 45.019 li
120.033 45.079 li
119.793 44.899 li
119.853 44.959 li
119.673 44.779 li
119.733 44.839 li
119.613 44.599 li
119.673 44.719 li
119.553 44.419 li
119.613 44.539 li
119.553 44.239 li
119.553 44.359 li
f
127.773 38.059 mo
127.773 38.839 128.373 39.439 129.153 39.439 cv
129.933 39.439 130.593 38.839 130.593 38.059 cv
130.593 37.219 129.933 36.619 129.153 36.619 cv
128.373 36.619 127.773 37.219 127.773 38.059 cv
ef
127.233 38.059 mo
127.293 38.419 li
127.413 38.779 li
128.178 40.376 130.175 40.344 130.953 38.779 cv
131.073 38.419 li
131.073 38.059 li
131.187 36.184 128.578 35.359 127.593 36.979 cv
127.413 37.279 li
127.293 37.639 li
cp
128.313 37.819 mo
128.253 37.879 li
128.373 37.639 li
128.313 37.699 li
128.433 37.459 li
128.373 37.579 li
128.553 37.339 li
128.493 37.399 li
128.733 37.219 li
128.613 37.279 li
128.853 37.159 li
128.793 37.219 li
129.033 37.099 li
128.913 37.159 li
129.213 37.099 li
129.093 37.099 li
129.393 37.159 li
129.333 37.099 li
129.573 37.219 li
129.513 37.159 li
129.753 37.279 li
129.633 37.219 li
129.873 37.399 li
129.813 37.339 li
129.993 37.579 li
129.933 37.459 li
130.053 37.699 li
129.993 37.639 li
130.113 37.879 li
130.053 37.819 li
130.113 38.059 li
130.113 37.999 li
130.053 38.239 li
130.113 38.179 li
129.993 38.419 li
130.053 38.359 li
129.933 38.599 li
129.993 38.479 li
129.813 38.719 li
129.873 38.659 li
129.633 38.839 li
129.753 38.779 li
129.513 38.899 li
129.573 38.839 li
129.333 38.959 li
129.393 38.899 li
129.093 38.959 li
129.213 38.959 li
128.913 38.899 li
129.033 38.959 li
128.793 38.839 li
128.853 38.899 li
128.613 38.779 li
128.673 38.839 li
128.493 38.659 li
128.553 38.719 li
128.373 38.479 li
128.433 38.599 li
128.313 38.359 li
128.373 38.419 li
128.253 38.179 li
128.313 38.239 li
128.253 37.999 li
128.253 38.059 li
f
144.993 31.699 mo
144.993 32.479 145.593 33.139 146.373 33.139 cv
147.153 33.139 147.813 32.479 147.813 31.699 cv
147.813 30.919 147.153 30.259 146.373 30.259 cv
145.593 30.259 144.993 30.919 144.993 31.699 cv
ef
144.453 31.699 mo
144.513 32.119 li
144.633 32.479 li
145.271 34.027 147.607 33.988 148.173 32.419 cv
148.293 32.119 li
148.293 31.699 li
148.347 29.832 145.9 29.105 144.813 30.619 cv
144.633 30.979 li
144.513 31.339 li
cp
145.473 31.459 mo
145.473 31.579 li
145.533 31.279 li
145.533 31.399 li
145.653 31.159 li
145.593 31.219 li
145.773 31.039 li
145.713 31.099 li
145.893 30.919 li
145.833 30.979 li
146.073 30.859 li
146.013 30.859 li
146.253 30.799 li
146.133 30.799 li
146.433 30.799 li
146.313 30.799 li
146.613 30.799 li
146.553 30.799 li
146.793 30.859 li
146.733 30.859 li
146.973 30.979 li
146.853 30.919 li
147.093 31.099 li
147.033 31.039 li
147.153 31.219 li
147.153 31.159 li
147.273 31.399 li
147.213 31.279 li
147.273 31.579 li
147.273 31.459 li
147.333 31.759 li
147.333 31.639 li
147.273 31.939 li
147.273 31.819 li
147.213 32.119 li
147.273 31.999 li
147.153 32.239 li
147.153 32.179 li
147.033 32.359 li
147.093 32.299 li
146.853 32.479 li
146.913 32.419 li
146.673 32.599 li
146.793 32.539 li
146.553 32.599 li
146.613 32.599 li
146.313 32.599 li
146.433 32.599 li
146.133 32.599 li
146.253 32.599 li
146.013 32.539 li
146.073 32.599 li
145.833 32.419 li
145.893 32.479 li
145.713 32.299 li
145.773 32.359 li
145.593 32.179 li
145.653 32.239 li
145.533 31.999 li
145.533 32.119 li
145.473 31.819 li
145.473 31.939 li
145.473 31.639 li
145.473 31.759 li
f
127.773 44.059 mo
127.773 44.839 128.373 45.439 129.153 45.439 cv
129.933 45.439 130.593 44.839 130.593 44.059 cv
130.593 43.279 129.933 42.619 129.153 42.619 cv
128.373 42.619 127.773 43.279 127.773 44.059 cv
ef
127.233 44.059 mo
127.293 44.419 li
127.413 44.779 li
128.178 46.376 130.175 46.344 130.953 44.779 cv
131.073 44.419 li
131.073 44.059 li
131.187 42.184 128.578 41.359 127.593 42.979 cv
127.413 43.279 li
127.293 43.639 li
cp
128.313 43.819 mo
128.253 43.879 li
128.373 43.639 li
128.313 43.699 li
128.433 43.459 li
128.373 43.579 li
128.553 43.339 li
128.493 43.399 li
128.733 43.219 li
128.613 43.279 li
128.853 43.159 li
128.793 43.219 li
129.033 43.099 li
128.913 43.159 li
129.213 43.099 li
129.093 43.099 li
129.393 43.159 li
129.333 43.099 li
129.573 43.219 li
129.513 43.159 li
129.753 43.279 li
129.633 43.219 li
129.873 43.399 li
129.813 43.339 li
129.993 43.579 li
129.933 43.459 li
130.053 43.699 li
129.993 43.639 li
130.113 43.879 li
130.053 43.819 li
130.113 44.059 li
130.113 43.999 li
130.053 44.239 li
130.113 44.179 li
129.993 44.419 li
130.053 44.359 li
129.933 44.599 li
129.993 44.479 li
129.813 44.719 li
129.873 44.659 li
129.633 44.839 li
129.753 44.779 li
129.513 44.899 li
129.573 44.839 li
129.333 44.959 li
129.393 44.899 li
129.093 44.959 li
129.213 44.959 li
128.913 44.899 li
129.033 44.959 li
128.793 44.839 li
128.853 44.899 li
128.613 44.779 li
128.673 44.839 li
128.493 44.659 li
128.553 44.719 li
128.373 44.539 li
128.433 44.599 li
128.313 44.359 li
128.373 44.419 li
128.253 44.179 li
128.313 44.239 li
128.253 43.999 li
128.253 44.059 li
f
136.113 32.239 mo
136.113 33.019 136.773 33.679 137.553 33.679 cv
138.333 33.679 138.933 33.019 138.933 32.239 cv
138.933 31.459 138.333 30.859 137.553 30.859 cv
136.773 30.859 136.113 31.459 136.113 32.239 cv
ef
135.633 32.239 mo
135.633 32.659 li
135.753 33.019 li
136.444 34.555 138.616 34.583 139.293 33.019 cv
139.413 32.659 li
139.473 32.239 li
139.292 30.345 137.172 29.645 135.933 31.159 cv
135.753 31.519 li
135.633 31.879 li
cp
136.653 31.999 mo
136.653 32.119 li
136.713 31.819 li
136.653 31.939 li
136.833 31.699 li
136.773 31.759 li
136.953 31.579 li
136.833 31.639 li
137.073 31.459 li
137.013 31.519 li
137.253 31.399 li
137.133 31.399 li
137.433 31.339 li
137.313 31.339 li
137.613 31.339 li
137.493 31.339 li
137.793 31.339 li
137.673 31.339 li
137.973 31.399 li
137.853 31.399 li
138.093 31.519 li
138.033 31.459 li
138.213 31.639 li
138.153 31.579 li
138.333 31.759 li
138.273 31.699 li
138.393 31.939 li
138.393 31.819 li
138.453 32.119 li
138.453 31.999 li
138.453 32.299 li
138.453 32.179 li
138.453 32.479 li
138.453 32.419 li
138.393 32.659 li
138.393 32.539 li
138.273 32.779 li
138.333 32.719 li
138.153 32.959 li
138.213 32.839 li
138.033 33.019 li
138.093 32.959 li
137.853 33.139 li
137.973 33.079 li
137.673 33.139 li
137.793 33.139 li
137.493 33.199 li
137.613 33.199 li
137.313 33.139 li
137.433 33.139 li
137.133 33.079 li
137.253 33.139 li
137.013 32.959 li
137.073 33.019 li
136.833 32.839 li
136.953 32.959 li
136.773 32.719 li
136.833 32.779 li
136.653 32.539 li
136.713 32.659 li
136.653 32.419 li
136.653 32.479 li
136.593 32.179 li
136.593 32.299 li
f
135.993 37.519 mo
135.993 38.299 136.593 38.959 137.433 38.959 cv
138.213 38.959 138.813 38.299 138.813 37.519 cv
138.813 36.739 138.213 36.079 137.433 36.079 cv
136.593 36.079 135.993 36.739 135.993 37.519 cv
ef
135.513 37.519 mo
135.513 37.879 li
135.633 38.239 li
136.269 39.805 138.536 39.807 139.173 38.239 cv
139.293 37.879 li
139.353 37.519 li
139.263 35.532 136.822 34.94 135.813 36.439 cv
135.633 36.739 li
135.513 37.099 li
cp
136.533 37.279 mo
136.473 37.399 li
136.593 37.099 li
136.533 37.219 li
136.653 36.979 li
136.593 37.039 li
136.773 36.799 li
136.713 36.919 li
136.953 36.739 li
136.833 36.799 li
137.073 36.679 li
137.013 36.679 li
137.253 36.619 li
137.193 36.619 li
137.433 36.619 li
137.373 36.619 li
137.613 36.619 li
137.553 36.619 li
137.793 36.679 li
137.733 36.679 li
137.973 36.799 li
137.853 36.739 li
138.093 36.919 li
138.033 36.859 li
138.213 37.039 li
138.153 36.979 li
138.273 37.219 li
138.213 37.099 li
138.333 37.399 li
138.273 37.279 li
138.333 37.579 li
138.333 37.459 li
138.273 37.759 li
138.333 37.639 li
138.213 37.939 li
138.273 37.819 li
138.153 38.059 li
138.213 37.999 li
138.033 38.179 li
138.093 38.119 li
137.853 38.299 li
137.973 38.239 li
137.733 38.359 li
137.793 38.359 li
137.553 38.419 li
137.613 38.419 li
137.373 38.419 li
137.433 38.419 li
137.193 38.419 li
137.253 38.419 li
137.013 38.359 li
137.073 38.359 li
136.833 38.239 li
136.953 38.299 li
136.713 38.119 li
136.773 38.179 li
136.593 37.999 li
136.653 38.059 li
136.533 37.819 li
136.593 37.939 li
136.473 37.639 li
136.533 37.759 li
136.473 37.459 li
136.473 37.579 li
f
145.113 25.879 mo
145.113 26.659 145.773 27.319 146.553 27.319 cv
147.333 27.319 147.933 26.659 147.933 25.879 cv
147.933 25.099 147.333 24.439 146.553 24.439 cv
145.773 24.439 145.113 25.099 145.113 25.879 cv
ef
144.633 25.879 mo
144.633 26.239 li
144.753 26.599 li
145.362 28.139 147.678 28.195 148.293 26.599 cv
148.413 26.239 li
148.473 25.879 li
148.316 23.783 145.917 23.36 144.933 24.799 cv
144.753 25.159 li
144.633 25.519 li
cp
145.653 25.639 mo
145.653 25.759 li
145.713 25.459 li
145.653 25.579 li
145.833 25.339 li
145.773 25.399 li
145.953 25.219 li
145.833 25.279 li
146.073 25.099 li
145.953 25.159 li
146.193 25.039 li
146.133 25.039 li
146.373 24.979 li
146.313 24.979 li
146.613 24.979 li
146.493 24.979 li
146.793 24.979 li
146.673 24.979 li
146.913 25.039 li
146.853 25.039 li
147.093 25.159 li
147.033 25.099 li
147.213 25.279 li
147.153 25.219 li
147.333 25.399 li
147.273 25.339 li
147.393 25.579 li
147.393 25.459 li
147.453 25.759 li
147.453 25.639 li
147.453 25.939 li
147.453 25.819 li
147.453 26.119 li
147.453 25.999 li
147.393 26.299 li
147.393 26.179 li
147.273 26.419 li
147.333 26.359 li
147.153 26.539 li
147.213 26.479 li
147.033 26.659 li
147.093 26.599 li
146.853 26.719 li
146.913 26.719 li
146.673 26.779 li
146.793 26.779 li
146.493 26.779 li
146.613 26.779 li
146.313 26.779 li
146.373 26.779 li
146.133 26.719 li
146.253 26.719 li
146.013 26.599 li
146.073 26.659 li
145.833 26.479 li
145.953 26.539 li
145.773 26.359 li
145.833 26.419 li
145.653 26.179 li
145.713 26.299 li
145.653 25.999 li
145.653 26.119 li
145.593 25.819 li
145.593 25.939 li
f
153.453 25.279 mo
153.453 26.059 154.113 26.719 154.893 26.719 cv
155.673 26.719 156.333 26.059 156.333 25.279 cv
156.333 24.499 155.673 23.839 154.893 23.839 cv
154.113 23.839 153.453 24.499 153.453 25.279 cv
ef
152.973 25.279 mo
153.033 25.699 li
153.153 26.059 li
153.587 27.592 156.314 27.542 156.633 25.999 cv
156.753 25.699 li
156.813 25.279 li
156.729 23.143 154.218 22.848 153.273 24.199 cv
153.033 24.919 li
cp
153.993 25.039 mo
153.993 25.159 li
154.053 24.859 li
154.053 24.979 li
154.173 24.739 li
154.113 24.799 li
154.293 24.619 li
154.233 24.679 li
154.413 24.499 li
154.353 24.559 li
154.593 24.439 li
154.473 24.439 li
154.773 24.379 li
154.653 24.379 li
154.953 24.379 li
154.833 24.379 li
155.133 24.379 li
155.013 24.379 li
155.313 24.439 li
155.193 24.439 li
155.433 24.559 li
155.373 24.499 li
155.553 24.679 li
155.493 24.619 li
155.673 24.799 li
155.613 24.739 li
155.733 24.979 li
155.733 24.859 li
155.793 25.159 li
155.793 25.039 li
155.793 25.339 li
155.793 25.219 li
155.793 25.519 li
155.793 25.399 li
155.733 25.699 li
155.733 25.579 li
155.613 25.819 li
155.673 25.759 li
155.493 25.939 li
155.553 25.879 li
155.373 26.059 li
155.433 25.999 li
155.193 26.179 li
155.313 26.119 li
155.013 26.179 li
155.133 26.179 li
154.833 26.179 li
154.953 26.179 li
154.653 26.179 li
154.773 26.179 li
154.473 26.119 li
154.593 26.179 li
154.353 25.999 li
154.413 26.059 li
154.233 25.879 li
154.293 25.939 li
154.113 25.759 li
154.173 25.819 li
154.053 25.579 li
154.053 25.699 li
153.993 25.399 li
153.993 25.519 li
153.993 25.219 li
153.993 25.339 li
f
153.453 19.159 mo
153.453 19.939 154.053 20.539 154.893 20.539 cv
155.673 20.539 156.273 19.939 156.273 19.159 cv
156.273 18.379 155.673 17.719 154.893 17.719 cv
154.053 17.719 153.453 18.379 153.453 19.159 cv
ef
152.973 19.159 mo
152.973 19.519 li
153.093 19.879 li
153.82 21.45 155.907 21.451 156.633 19.879 cv
156.753 19.519 li
156.813 19.159 li
156.758 17.281 154.343 16.46 153.273 18.079 cv
153.093 18.379 li
152.973 18.739 li
cp
153.993 18.919 mo
153.933 19.039 li
154.053 18.739 li
153.993 18.859 li
154.113 18.619 li
154.053 18.679 li
154.233 18.439 li
154.173 18.499 li
154.413 18.379 li
154.293 18.439 li
154.533 18.259 li
154.473 18.319 li
154.713 18.259 li
154.653 18.259 li
154.893 18.199 li
154.833 18.199 li
155.073 18.259 li
155.013 18.259 li
155.253 18.319 li
155.193 18.259 li
155.433 18.439 li
155.313 18.379 li
155.553 18.499 li
155.493 18.439 li
155.673 18.679 li
155.613 18.619 li
155.733 18.859 li
155.673 18.739 li
155.793 19.039 li
155.733 18.919 li
155.793 19.219 li
155.793 19.099 li
155.733 19.399 li
155.793 19.279 li
155.673 19.579 li
155.733 19.459 li
155.613 19.699 li
155.673 19.639 li
155.493 19.819 li
155.553 19.759 li
155.313 19.939 li
155.433 19.879 li
155.193 19.999 li
155.253 19.999 li
155.013 20.059 li
155.073 20.059 li
154.833 20.059 li
154.893 20.059 li
154.653 20.059 li
154.713 20.059 li
154.473 19.999 li
154.533 19.999 li
154.293 19.879 li
154.413 19.939 li
154.173 19.759 li
154.233 19.819 li
154.053 19.639 li
154.113 19.699 li
153.993 19.459 li
154.053 19.579 li
153.933 19.279 li
153.993 19.399 li
153.933 19.099 li
153.933 19.219 li
f
162.393 19.159 mo
162.393 19.939 162.993 20.539 163.773 20.539 cv
164.553 20.539 165.213 19.939 165.213 19.159 cv
165.213 18.379 164.553 17.719 163.773 17.719 cv
162.993 17.719 162.393 18.379 162.393 19.159 cv
ef
161.853 19.159 mo
161.913 19.519 li
162.033 19.879 li
162.725 21.467 164.868 21.436 165.573 19.879 cv
165.693 19.159 li
165.743 17.247 163.233 16.473 162.213 18.079 cv
162.033 18.379 li
161.913 18.739 li
cp
162.873 18.919 mo
162.873 19.039 li
162.933 18.739 li
162.933 18.859 li
163.053 18.619 li
162.993 18.679 li
163.173 18.439 li
163.113 18.499 li
163.293 18.379 li
163.233 18.439 li
163.473 18.259 li
163.353 18.319 li
163.653 18.259 li
163.533 18.259 li
163.833 18.199 li
163.713 18.199 li
164.013 18.259 li
163.893 18.259 li
164.193 18.319 li
164.073 18.259 li
164.313 18.439 li
164.253 18.379 li
164.433 18.499 li
164.373 18.439 li
164.553 18.679 li
164.493 18.619 li
164.673 18.859 li
164.613 18.739 li
164.673 19.039 li
164.673 18.919 li
164.673 19.219 li
164.673 19.099 li
164.673 19.399 li
164.673 19.279 li
164.613 19.579 li
164.673 19.459 li
164.493 19.699 li
164.553 19.639 li
164.373 19.819 li
164.493 19.759 li
164.253 19.939 li
164.313 19.879 li
164.073 19.999 li
164.193 19.999 li
163.893 20.059 li
164.013 20.059 li
163.713 20.059 li
163.833 20.059 li
163.533 20.059 li
163.653 20.059 li
163.353 19.999 li
163.473 19.999 li
163.233 19.879 li
163.293 19.939 li
163.113 19.759 li
163.173 19.819 li
162.993 19.639 li
163.053 19.699 li
162.933 19.459 li
162.933 19.579 li
162.873 19.279 li
162.873 19.399 li
162.873 19.099 li
162.873 19.219 li
f
171.153 18.859 mo
171.153 19.639 171.753 20.299 172.593 20.299 cv
173.373 20.299 173.973 19.639 173.973 18.859 cv
173.973 18.079 173.373 17.419 172.593 17.419 cv
171.753 17.419 171.153 18.079 171.153 18.859 cv
ef
170.673 18.859 mo
170.673 19.219 li
170.793 19.579 li
171.429 21.145 173.696 21.147 174.333 19.579 cv
174.453 19.219 li
174.513 18.859 li
174.365 16.815 171.974 16.311 170.973 17.779 cv
170.793 18.139 li
170.673 18.499 li
cp
171.693 18.619 mo
171.633 18.739 li
171.753 18.439 li
171.693 18.559 li
171.813 18.319 li
171.753 18.379 li
171.933 18.199 li
171.873 18.259 li
172.113 18.079 li
171.993 18.139 li
172.233 18.019 li
172.173 18.019 li
172.413 17.959 li
172.353 17.959 li
172.593 17.959 li
172.533 17.959 li
172.773 17.959 li
172.713 17.959 li
172.953 18.019 li
172.893 18.019 li
173.133 18.139 li
173.013 18.079 li
173.253 18.259 li
173.193 18.199 li
173.373 18.379 li
173.313 18.319 li
173.433 18.559 li
173.373 18.439 li
173.493 18.739 li
173.433 18.619 li
173.493 18.919 li
173.493 18.799 li
173.433 19.099 li
173.493 18.979 li
173.373 19.279 li
173.433 19.159 li
173.313 19.399 li
173.373 19.339 li
173.193 19.519 li
173.253 19.459 li
173.013 19.639 li
173.133 19.579 li
172.893 19.699 li
172.953 19.699 li
172.713 19.759 li
172.773 19.759 li
172.533 19.759 li
172.593 19.759 li
172.353 19.759 li
172.413 19.759 li
172.173 19.699 li
172.233 19.699 li
171.993 19.579 li
172.113 19.639 li
171.873 19.459 li
171.933 19.519 li
171.753 19.339 li
171.813 19.399 li
171.693 19.159 li
171.753 19.279 li
171.633 18.979 li
171.693 19.099 li
171.633 18.799 li
171.633 18.919 li
f
179.013 19.159 mo
179.013 19.939 179.673 20.539 180.453 20.539 cv
181.233 20.539 181.833 19.939 181.833 19.159 cv
181.833 18.379 181.233 17.719 180.453 17.719 cv
179.673 17.719 179.013 18.379 179.013 19.159 cv
ef
178.533 19.159 mo
178.533 19.519 li
178.653 19.879 li
179.38 21.45 181.467 21.451 182.193 19.879 cv
182.313 19.519 li
182.373 19.159 li
182.318 17.281 179.903 16.46 178.833 18.079 cv
178.653 18.379 li
178.533 18.739 li
cp
179.553 18.919 mo
179.493 19.039 li
179.613 18.739 li
179.553 18.859 li
179.673 18.619 li
179.613 18.679 li
179.793 18.439 li
179.733 18.499 li
179.973 18.379 li
179.853 18.439 li
180.093 18.259 li
180.033 18.319 li
180.273 18.259 li
180.213 18.259 li
180.453 18.199 li
180.393 18.199 li
180.633 18.259 li
180.573 18.259 li
180.813 18.319 li
180.753 18.259 li
180.993 18.439 li
180.873 18.379 li
181.113 18.499 li
181.053 18.439 li
181.233 18.679 li
181.173 18.619 li
181.293 18.859 li
181.233 18.739 li
181.353 19.039 li
181.293 18.919 li
181.353 19.219 li
181.353 19.099 li
181.293 19.399 li
181.353 19.279 li
181.233 19.579 li
181.293 19.459 li
181.173 19.699 li
181.233 19.639 li
181.053 19.819 li
181.113 19.759 li
180.873 19.939 li
180.993 19.879 li
180.753 19.999 li
180.813 19.999 li
180.573 20.059 li
180.633 20.059 li
180.393 20.059 li
180.453 20.059 li
180.213 20.059 li
180.273 20.059 li
180.033 19.999 li
180.093 19.999 li
179.853 19.879 li
179.973 19.939 li
179.733 19.759 li
179.793 19.819 li
179.613 19.639 li
179.673 19.699 li
179.553 19.459 li
179.613 19.579 li
179.493 19.279 li
179.553 19.399 li
179.493 19.099 li
179.493 19.219 li
f
187.593 18.919 mo
187.593 19.699 188.193 20.359 188.973 20.359 cv
189.753 20.359 190.413 19.699 190.413 18.919 cv
190.413 18.139 189.753 17.539 188.973 17.539 cv
188.193 17.539 187.593 18.139 187.593 18.919 cv
ef
187.053 18.919 mo
187.113 19.339 li
187.233 19.699 li
187.91 21.263 190.082 21.235 190.773 19.699 cv
190.893 19.339 li
190.893 18.919 li
190.97 17.223 188.632 16.219 187.413 17.839 cv
187.233 18.199 li
187.113 18.559 li
cp
188.073 18.679 mo
188.073 18.799 li
188.133 18.559 li
188.133 18.619 li
188.253 18.379 li
188.193 18.439 li
188.373 18.259 li
188.313 18.319 li
188.493 18.139 li
188.433 18.199 li
188.673 18.079 li
188.613 18.139 li
188.853 18.019 li
188.733 18.019 li
189.033 18.019 li
188.913 18.019 li
189.213 18.019 li
189.153 18.019 li
189.393 18.139 li
189.333 18.079 li
189.573 18.199 li
189.453 18.139 li
189.693 18.319 li
189.633 18.259 li
189.813 18.439 li
189.753 18.379 li
189.873 18.619 li
189.813 18.559 li
189.873 18.799 li
189.873 18.679 li
189.933 18.979 li
189.933 18.859 li
189.873 19.159 li
189.873 19.099 li
189.813 19.339 li
189.873 19.279 li
189.753 19.519 li
189.813 19.399 li
189.633 19.639 li
189.693 19.579 li
189.453 19.699 li
189.513 19.699 li
189.273 19.819 li
189.393 19.759 li
189.153 19.819 li
189.213 19.819 li
188.913 19.879 li
189.033 19.879 li
188.733 19.819 li
188.853 19.819 li
188.613 19.759 li
188.673 19.819 li
188.433 19.699 li
188.493 19.699 li
188.313 19.579 li
188.373 19.639 li
188.193 19.399 li
188.253 19.519 li
188.133 19.279 li
188.133 19.339 li
188.073 19.099 li
188.073 19.159 li
188.073 18.859 li
188.073 18.979 li
f
196.353 18.859 mo
196.353 19.639 196.953 20.299 197.733 20.299 cv
198.513 20.299 199.173 19.639 199.173 18.859 cv
199.173 18.079 198.513 17.419 197.733 17.419 cv
196.953 17.419 196.353 18.079 196.353 18.859 cv
ef
195.813 18.859 mo
195.873 19.219 li
195.993 19.579 li
196.608 21.175 198.924 21.119 199.533 19.579 cv
199.653 19.219 li
199.653 18.859 li
199.724 16.875 197.081 16.281 196.173 17.779 cv
195.993 18.139 li
195.873 18.499 li
cp
196.893 18.619 mo
196.833 18.739 li
196.953 18.439 li
196.893 18.559 li
197.013 18.319 li
196.953 18.379 li
197.133 18.199 li
197.073 18.259 li
197.313 18.079 li
197.193 18.139 li
197.433 18.019 li
197.373 18.019 li
197.613 17.959 li
197.493 17.959 li
197.793 17.959 li
197.673 17.959 li
197.973 17.959 li
197.913 17.959 li
198.153 18.019 li
198.093 18.019 li
198.333 18.139 li
198.213 18.079 li
198.453 18.259 li
198.393 18.199 li
198.573 18.379 li
198.513 18.319 li
198.633 18.559 li
198.573 18.439 li
198.693 18.739 li
198.633 18.619 li
198.693 18.919 li
198.693 18.799 li
198.633 19.099 li
198.693 18.979 li
198.573 19.279 li
198.633 19.159 li
198.513 19.399 li
198.573 19.339 li
198.393 19.519 li
198.453 19.459 li
198.213 19.639 li
198.333 19.579 li
198.093 19.699 li
198.153 19.699 li
197.913 19.759 li
197.973 19.759 li
197.673 19.759 li
197.793 19.759 li
197.493 19.759 li
197.613 19.759 li
197.373 19.699 li
197.433 19.699 li
197.193 19.579 li
197.253 19.639 li
197.073 19.459 li
197.133 19.519 li
196.953 19.339 li
197.013 19.399 li
196.893 19.159 li
196.953 19.279 li
196.833 18.979 li
196.893 19.099 li
196.833 18.799 li
196.833 18.919 li
f
196.353 13.039 mo
196.353 13.819 196.953 14.479 197.733 14.479 cv
198.513 14.479 199.173 13.819 199.173 13.039 cv
199.173 12.259 198.513 11.659 197.733 11.659 cv
196.953 11.659 196.353 12.259 196.353 13.039 cv
ef
195.813 13.039 mo
195.873 13.459 li
195.993 13.819 li
196.67 15.383 198.842 15.355 199.533 13.819 cv
199.653 13.459 li
199.653 13.039 li
199.73 11.343 197.392 10.339 196.173 11.959 cv
195.993 12.319 li
195.873 12.679 li
cp
196.893 12.799 mo
196.833 12.919 li
196.953 12.679 li
196.893 12.739 li
197.013 12.499 li
196.953 12.559 li
197.133 12.379 li
197.073 12.439 li
197.313 12.259 li
197.193 12.319 li
197.433 12.199 li
197.373 12.259 li
197.613 12.139 li
197.493 12.199 li
197.793 12.139 li
197.673 12.139 li
197.973 12.199 li
197.913 12.139 li
198.153 12.259 li
198.093 12.199 li
198.333 12.319 li
198.213 12.259 li
198.453 12.439 li
198.393 12.379 li
198.573 12.619 li
198.513 12.499 li
198.633 12.739 li
198.573 12.679 li
198.693 12.919 li
198.633 12.799 li
198.693 13.099 li
198.693 12.979 li
198.633 13.279 li
198.693 13.219 li
198.573 13.459 li
198.633 13.399 li
198.513 13.639 li
198.573 13.519 li
198.393 13.759 li
198.453 13.699 li
198.213 13.819 li
198.333 13.819 li
198.093 13.939 li
198.153 13.879 li
197.913 13.999 li
197.973 13.939 li
197.673 13.999 li
197.793 13.999 li
197.493 13.939 li
197.613 13.999 li
197.373 13.879 li
197.433 13.939 li
197.193 13.819 li
197.253 13.819 li
197.073 13.699 li
197.133 13.759 li
196.953 13.519 li
197.013 13.639 li
196.893 13.399 li
196.953 13.459 li
196.833 13.219 li
196.893 13.279 li
196.833 12.979 li
196.833 13.099 li
f
206.853 12.859 mo
206.853 13.639 207.513 14.299 208.293 14.299 cv
209.073 14.299 209.733 13.639 209.733 12.859 cv
209.733 12.079 209.073 11.419 208.293 11.419 cv
207.513 11.419 206.853 12.079 206.853 12.859 cv
ef
206.373 12.859 mo
206.493 13.579 li
207.102 15.12 209.418 15.175 210.033 13.579 cv
210.153 13.219 li
210.213 12.859 li
210.056 10.763 207.657 10.34 206.673 11.779 cv
206.493 12.139 li
206.433 12.499 li
cp
207.393 12.619 mo
207.393 12.739 li
207.453 12.439 li
207.393 12.559 li
207.573 12.319 li
207.513 12.379 li
207.693 12.199 li
207.633 12.259 li
207.813 12.079 li
207.753 12.139 li
207.993 12.019 li
207.873 12.019 li
208.173 11.959 li
208.053 11.959 li
208.353 11.959 li
208.233 11.959 li
208.533 11.959 li
208.413 11.959 li
208.713 12.019 li
208.593 12.019 li
208.833 12.139 li
208.773 12.079 li
208.953 12.259 li
208.893 12.199 li
209.073 12.379 li
209.013 12.319 li
209.133 12.559 li
209.133 12.439 li
209.193 12.739 li
209.193 12.619 li
209.193 12.919 li
209.193 12.799 li
209.193 13.099 li
209.193 12.979 li
209.133 13.279 li
209.133 13.159 li
209.013 13.399 li
209.073 13.339 li
208.893 13.519 li
208.953 13.459 li
208.773 13.639 li
208.833 13.579 li
208.593 13.699 li
208.713 13.699 li
208.413 13.759 li
208.533 13.759 li
208.233 13.759 li
208.353 13.759 li
208.053 13.759 li
208.173 13.759 li
207.873 13.699 li
207.993 13.699 li
207.753 13.579 li
207.813 13.639 li
207.573 13.459 li
207.693 13.519 li
207.513 13.339 li
207.573 13.399 li
207.393 13.159 li
207.453 13.279 li
207.393 12.979 li
207.393 13.099 li
207.393 12.799 li
207.393 12.919 li
f
216.813 13.099 mo
216.813 13.879 217.413 14.479 218.193 14.479 cv
218.973 14.479 219.633 13.879 219.633 13.099 cv
219.633 12.319 218.973 11.659 218.193 11.659 cv
217.413 11.659 216.813 12.319 216.813 13.099 cv
ef
216.273 13.099 mo
216.333 13.459 li
216.453 13.819 li
217.274 15.404 219.173 15.403 219.993 13.819 cv
220.113 13.459 li
220.113 13.099 li
220.206 11.211 217.66 10.413 216.633 12.019 cv
216.453 12.319 li
216.333 12.679 li
cp
217.353 12.859 mo
217.293 12.919 li
217.413 12.679 li
217.353 12.739 li
217.473 12.499 li
217.413 12.619 li
217.593 12.379 li
217.533 12.439 li
217.773 12.259 li
217.653 12.319 li
217.893 12.199 li
217.833 12.259 li
218.073 12.139 li
218.013 12.199 li
218.253 12.139 li
218.193 12.139 li
218.433 12.199 li
218.373 12.139 li
218.613 12.259 li
218.553 12.199 li
218.793 12.319 li
218.673 12.259 li
218.913 12.439 li
218.853 12.379 li
219.033 12.619 li
218.973 12.499 li
219.093 12.739 li
219.033 12.679 li
219.153 12.919 li
219.093 12.859 li
219.153 13.099 li
219.153 13.039 li
219.093 13.279 li
219.153 13.219 li
219.033 13.459 li
219.093 13.399 li
218.973 13.639 li
219.033 13.519 li
218.853 13.759 li
218.913 13.699 li
218.673 13.879 li
218.793 13.819 li
218.553 13.939 li
218.613 13.879 li
218.373 13.999 li
218.433 13.939 li
218.193 13.999 li
218.253 13.999 li
218.013 13.939 li
218.073 13.999 li
217.833 13.879 li
217.893 13.939 li
217.653 13.819 li
217.773 13.879 li
217.533 13.699 li
217.593 13.759 li
217.413 13.579 li
217.473 13.639 li
217.353 13.399 li
217.413 13.459 li
217.293 13.219 li
217.353 13.279 li
217.293 13.039 li
217.293 13.099 li
f
125.013 120.139 mo
165.693 120.139 li
165.693 98.299 li
125.013 98.299 li
cp
.135653 .0995193 .100282 0 cmyk
f
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /TimesNewRomanPSMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3213555865000000cc000000606376
7420fe30def00000012c000007da6670676dc3a61d010000090800000631
676c79666dd9a1b100009454000926ec68656164e4fcfcc500000f3c0000
00366868656112ef167d00000f7400000024686d7478c2a5316900000f98
000035646c6f636140d23072000044fc0000356c6d617870142e06ad0000
7a68000000206e616d65331cebd100007a8800000a847072657039e6c80d
0000850c00000f4567646972000000000000000000000000000303350190
00050008059a053300000125059a0533000003a000660212010502020603
050405020304e0002affc00078410000000900000000544d432000400020
fffc058cfe460133072101bb400001ffffff00000394054c000000200004
058e0000054c001f054c001c0394001b0000ffe10000ffe40000ffe8fe4a
fffc056b0023fe6affe00313000000ad000000ad0000000000250096009f
002400f0013100c200c0004a00a6004100500094004700cf00af000e0079
01cb00040023004400a80025011f0002004600170105009900d9005c0072
00e500e00028004b00de011200240045007000160039ffe90016004b0088
ffb900d9000a004300ae00ba016c0153002f00430048022c012b0025008f
ffc000170028ffcdffd80025009d00e50124ffb10048009d00e600110027
007f00910012006a00cafffc00000024006200a7017c01e900210060008b
0434048aff6b003b00b500d5014bff6b004d007905d809b5006c009100a3
011701c0ffdfffe700be04010065007f00820088009900b200c0022e0343
05a000200026003d004e00610065007b00d9011301310340ff27ff42ff99
004e00a700f2022b02c603070011002b0049005f008d00a100af00d600e4
00f5010b0135019d01ab01ab01d101ee05d80000004b0075007a0080009d
00a600a700ac00b9013101310217021700020017002900550080008f00a5
00b200b300d0014b015901c001c103a50530fe3fff14ff15ffe7ffff002a
00580099009f00c100e400f40130015901ab01ab03220374041e04740532
fd81004d0064009c00d000d100d600de00e500f500f8012a012a01e1027e
027fff57ffa8ffe500000008001f00380051005a006f0076007700a200c0
00c200c400f101fb0209027e02cf04c5057a05f0ff92001200260042004b
004f005100530064008b00ae00b200b800b800d600f50111012001310138
014e01520167018f019601b801d901d902060221027102ea03b003cb03dc
04360505ff3a00120016001e001f002300570068006c007e0088009200a5
00a800c500c901150126012d013001d601d901f6023b0244024402a302cf
02de0385038f04fc0586fee0feebfefbff8a0007004400470058007500aa
00e400ef011601200129016a017301e3027e029002b4030e031003230335
0341035403590388039403c803ce047204ab04da0549056105ab0761fe6e
fed1ff4bff84000000010006001e0027002c0034003700620066006a006b
006c007000700072007c0081008a008e0091009200a000ab00b800bf00c9
00d500dd00ec00f40100012101300169016a016d017c0185018e018e0199
01ac01c101c501c901e101f601f601f60222022202280236023f02430246
026702850285029402d002d602e8031c0363037f03800380039e03b603d9
0400040404ff053205320548058b05a706cb07280748076208ccfcedfd2a
fd59fddefe00fe1afe5bfe96fec1fee7ff56ff7900010025002d002e007c
00870091009900a100a500a500aa00af00b600c600cc00d700dd00ec00f2
01020105011701180123012a012c0131013f014701490149014d01510151
015501550157015a015a0161016201680168017f0180018201830184018d
0195019501950198019901a501a901b601b601b701ba01ba01d501df01e6
01ea01f2020002000203021702250227022f0239024302430247024f0252
02520267026f026f027002720276027e02a702b302b902d603130325032d
03610371039903ae03c203d403f90402042c042f043c04560467048304cf
04d104d804fb051f05450568059e05c2061b06340655066a069806af06e8
06fc070607500762077c07d407ff082500ad00c700aa00b5000000000000
000000000000002f06cf01730514047802df009c00180370058701550025
00060254036c038e03d2056601f0032001da018a0369036bffa3034602f8
036f015602bf0122031f053a0366008c00ff01ab02e102f402e704150154
02e90128049101b7026f034302060000000005d30415048305e8000002d7
003a027d01c002c503830383ffbd003a059e01df059e02d1002004e00213
00df01c001870297000000ce0269028b0058043405fb0069015a01a90578
0182013e0288012a03d4049e00e5032302f301f00196007a00cd014a0424
025e023901ab00cf00fd011e00ed017100700195004001bb01dd01b80001
01a803a7014c020c018d01b0020d0137010000cd032101d4030a00590000
000001260215015002f0025503bc06d00335010100d000d2007a01030130
007c000000000000000000fe006e006600940227002b0045004d00d30132
00180097004100f4febcffe9001605d8058b009100a1032c00520030005d
02cb003a009200e500e500580086003200ba0099008800300298007cff80
01640028004d0065000200b8016a002f010b001100170100007f00040016
022200a6005f000000f8000a00ca0043004b01ee0077012000f401c00028
045f0000008c044500c20060007b008b008b0064005d00c2009c009206b5
05d3004f011700000420fe9e00cc00dc005e004600e30032001a003c0091
005a00a1042c0041002000490071009c009cfe4800400040008600cb0102
007d003a003e006a0050044800290096ff6a0097006900e0004c001b00c9
0069ff970043ffbd0052ff83ff8b005fffa1ff5c00670053ffa8002a0076
ffb20036008705590256052b043400de00c901c4004800db018b00b30048
00da01160125011800ea00ea00ae0000003e05bb008a04d70053003fff8c
ffd500150028002200990062004a00e4006d00ee00e5004803c00033fe4e
02b1ff460370007905df0051ffa7ff1f010a0068ff6c004f00bc00a50705
00ab0080001e05a50025008b04660230006900290016012f0080005c059f
000040425554403f3e3d3c3b3a393837363534333231302f2e2d2c2b2a29
2827262524232221201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a
090807060504030201002c4523466020b02660b004262348482d2c452346
236120b02661b004262348482d2c45234660b0206120b04660b004262348
482d2c4523462361b0206020b02661b02061b004262348482d2c45234660
b0406120b06660b004262348482d2c4523462361b0406020b02661b04061
b004262348482d2c0110203c003c2d2c20452320b0cd442320b8015a5158
2320b08d44235920b0ed51582320b04d44235920b09051582320b00d4423
5921212d2c20204518684420b001602045b04676688a4560442d2c01b10b
0a432343650a2d2c00b10a0b4323430b2d2c00b0172370b101173e01b017
2370b10217453ab10200080d2d2c45b01a234445b01923442d2c2045b003
25456164b050515845441b2121592d2cb00143632362b0002342b00f2b2d
2c2045b0004360442d2c01b00643b00743650a2d2c2069b04061b0008b20
b12cc08a8cb8100062602b0c642364615c58b00361592d2c45b0112bb017
2344b0177ae4182d2c45b0112bb01723442d2cb01243588745b0112bb017
2344b0177ae41b038a45186920b01723448a8a8720b0a05158b0112bb017
2344b0177ae41b21b0177ae45959182d2cb0022546608a46b040618c482d
2c4b53205c58b002855958b00185592d2c20b0032545b019234445b01a23
444565234520b00325606a20b009234223688a6a606120b01a8ab0005279
21b21a1a40b9ffe0001a45208a54582321b03f1b235961441cb114008a52
79b31940201945208a54582321b03f1b235961442d2cb110114323430b2d
2cb10e0f4323430b2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb1
0e0f432343650b2d2cb11011432343650b2d2c4b525845441b2121592d2c
0120b003252349b04060b0206320b000525823b002253823b00225653800
8a63381b212121212159012d2c4bb06451584569b00943608a103a1b2121
10592d2c01b005251023208af500b0016023edec2d2c01b005251023208a
f500b0016123edec2d2c01b0062510f500edec2d2c20b001600110203c00
3c2d2c20b001610110203c003c2d2cb02b2bb02a2a2d2c00b00743b00643
0b2d2c3eb02a2a2d2c352d2c76b802b023701020b802b04520b0005058b0
0161593a2f182d2c21210c6423648bb84000622d2c21b08051580c642364
8bb82000621bb200402f2b59b002602d2c21b0c051580c6423648bb81555
621bb200802f2b59b002602d2c0c6423648bb84000626023212d2cb40001
00000015b00826b00826b00826b008260f10161345683ab001162d2cb400
0100000015b00826b00826b00826b008260f1016134568653ab001162d2c
4b53234b515a5820458a60441b2121592d2c4b545820458a60441b212159
2d2c4b53234b515a58381b2121592d2c4b5458381b2121592d2c014b5323
4b515ab00225b00425b006254923451869525a58b00225b00225b0052546
2345696048592121212d2cb0134358031b02592d2cb0134358021b03592d
2c4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c
6423646164b807085158b00425b00425012046b01060482046b010604859
0a21211b2121592d2cb012435c580cb00425b00425060c6423646164b807
085158b00425b00425012046b8fff060482046b8fff06048590a21211b21
21592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b
1b2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54
b00426024b545a8a8a0ab012435c5a58381b2121592d2c462346608a8a46
2320468a608a61b8ff8062232010238ab9035803588a70456020b0005058
b00161b8ffba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1
400188535a58b910000020885458b202010243604259b12401885158b920
000040885458b2020202436042b12401885458b2022002436042004b014b
5258b2020802436042591bb940000080885458b202040243604259b94000
008063b80100885458b202080243604259b94000010063b80200885458b2
02100243604259b94000020063b80400885458b202400243604259595959
592d2cb0024354584b53234b515a58381b2121591b21212121592d000000
00010000000533333d41125a5f0f3cf50819080000000000a2e31dc20000
0000cf756137fb74fd8c1000080e00000009000100010000000000010000
0721fe4500571000fb74fadf100000010000000000000000000000000000
0d580639011c00000000020000000200000002aa00e40344008504000025
0400006c06aa00480639004b0171005102aa005402aa002e040000910483
00250200006e02aa005302000091023900030400004a040000f00400002c
040000530400002004000062040000580400004c0400007c040000510239
00b00239008e048300250483002504830025038d005c075e006105c70010
055600220556004a05c7002304e3002a0473002105c7004805c7002302aa
0033031d002a05c7002204e30029071d002205c7ffe505c7004804730022
05c70048055600230473008004e3003e05c7000b05c70012078d001b05c7
000f05c7001304e3001a02aa00a80239000302aa004b03c100250400ffef
02aa0076038d00490400fffb038d004604000044038d004c02aa004f0400
003d0400000d0239003c0239ff63040000110239003d063900110400000c
040000450400fff90400004402aa000d031d006402390014040000020400
001105c7000d0400001b0400000c038d002903d7011b019a00a103d700b1
0454001405c7001005c7000e0556004a04e3002a05c7ffe505c7004805c7
000b038d0049038d0049038d0049038d0049038d0049038d0049038d0046
038d004c038d004c038d004c038d004c0239003c0239003c0239000d0239
00020400000c040000450400004504000045040000450400004504000002
0400000204000002040000020400006503330062040000810400003d0400
009c02cd007003a0fff204000023061400450614004507d7001e02aa00ec
02aa003904640019071dffe805c7004905b4003504640008046400180464
001804000002049c008603f4004005b4002b0696002e0464003e02310000
0235fffa027b001d062500470556004904000027038d005902aa00e40483
002404640053040000020464001e04e5001a0400004004000040080000e6
05c7000e05c7000e05c70048071d004b05c700430400ffee0800ffed038d
0043038d004302aa00b902aa00c10464001703f4002f0400000c05c70013
0156feab0400ffe902aa007702aa007304730019047300170400008b0200
009102aa00c1038d00430800004105c7000e04e3002a05c7001004e3002a
04e3002a02aa003302aa003202aa003202aa003205c7004805c7004805c7
004805c7000b05c7000b05c7000b0239003c02aa003c02aa001602aa0017
02aa003702aa00e902aa009602aa00bb02aa004e02aa001d02aa003c04e3
00160239001e0473007e031d006404e3001a038d0029019a00a105c70023
0400004405c700130400000c047300240400fff904830025048300a50266
0088026600140266002c06000086060000860600002a0400002105c70048
0400003d02aa003304730080031d00640556004a038d00460556004a038d
0046040000260400ffef02aa00ec05c70010038d004905c70010038d0049
05c70023052c004405c7002304e3002a038d004c04e3002a038d004c04e3
00290239003d04e300290340003c04e3002902c0003d05c7ffe50400000c
05c7ffe50400000c05c70048040000450556002302aa000d0556002302aa
000d04730080031d006404e3003e0239001404e3003e036b001305c7000b
0400000205c7000b0400000204e3001a038d002904e3001a038d002904a0
002505c7004c05d900470431005703c50046035c0047045000460337000c
049e00450400ffef049500e40285000207c0002c0800004f040000990800
004f040000990800004f040000980400009807d5016a05c700c004830026
04cd00990483002604d5022204d5010505abffe905ab027e05ab027e05ab
ffe905ab027e05abffe905ab027e05abffe905abffe905abffe905abffe9
05abffe905ab01c005ab027e05ab01c005ab01c005abffe905abffe905ab
ffe905ab027e05ab01c005ab01c005abffe905abffe905abffe905ab027e
05ab01c005ab01c005abffe905abffe905abffe905abffe905abffe905ab
ffe905abffe905abffe905abffe905abffe905abffe905abffe905abffe9
05abffe905abffe905abffe905ab02d605ab006605abffea05d5ffff04d5
00920800000007eb013007eb012007eb013007eb012004d500b204d50080
04d5002a082b0198086b01b807550010060000f40600006f0440003a0540
003704c0003f04150040040000250600005505ab002f046b003b04d50003
01c00089035500a206ab003403d5006404d5009202d6008302d6008304d5
00b202d6007005c70010038d00490556004a038d00460556004a038d0046
04e3002a038d004c04e3002a038d004c04e3002a038d004c05c700480400
003d05c700480400003d05c700480400003d05c700230400000d05c70023
0400000d02aa00160239ffde02aa00170239ffdf02aa00330239fffe02aa
00330239003c031d002a0239ff6305c70022040000110400001104e30029
0239003d05c7ffe50400000c059d002603f5000c05c700480400004505c7
0048040000450556002302aa000d04730080031d006404e3003b02390010
05c7000b0400000205c7000b0400000205c7000b0400000205c7000b0400
0002078d001b05c7000d05c700130400000c0239001605c7000f038d0049
071dffe80556004905c7004904000027023900b2078d001b05c7000d078d
001b05c7000d078d001b05c7000d05c700130400000c02aa00b802aaffdb
0400003d04cd005a060000860600002a060000310600002502aa00c302aa
00bb02aa00ec02aaffea05c70010058dff5c0677ff5c034aff5c05c7ffb6
0687ff5c05f2ffb30227ffb105c70010055600220525003204e3002a04e3
001a05c7002302aa003305c7002205cd001c071d002205c7ffe50525004f
05c7004805c700250473002204a8002004e3003e05c7001305c7000f05e7
001805f2003c02aa003205c7001304310057035c0047042f000b02270025
03f6fffa0412006e0389000003500046042f000b03d50051022700250408
001503e10019044a0074039effd3039100460400004503fe0059032b0046
03f6fffa038d00180502001c0544004b0227000003f6fffa0400004503f6
fffa0544004b04e3002a0604003704a000250548004b0473008002aa0033
02aa0032031d002a06fa000d06fa002705ee00360556002505aa001a05c7
002505c70010049800240556002204a000250575001a04e3002a072b0012
0402002b05c7002505c7002505560025056d0012071d002205c7002305c7
004805c70025047300220556004a04e3003e05aa001a0652004c05c7000f
05c700250533fffa081200390812003905a6003606fa0025049800240548
003a083900260556ffee038d00490412004e03c700300348001f0412001a
038d004c05870017032900180448002e0448002e03e3002e03fe000c0510
002e0448002e040000450448002e0400fff9038d0046037f000c0400000c
052f00570400001b0448002e0406001e0629002e0629002e0423000c0560
002d03a6002e036f001b05fa002d03aeffff038d004c03dd00110348001f
036f0046031d00640239003c023900020239ff6305d1000c05c9002d0400
000d03e3002e0400000c0448002e039a002502cf001f0800004107a20010
040a000d000001010000001c0000003200000012000001020000008f0000
008f0000008f00000090000001020000001c000001020000012102d90056
0000008f025400e0000002af0000ff6b023900b003da005f03a4003302af
0021035a004303c5004e023b0043024a004e03d0005803ce004302220043
039e0043037600330374000f040f006403e2004e023200430270002103cd
005f03a2004303a200430386005803dc004303ae003d03ca006903c00043
04e200430400002104750043045d00430444004301ac006b02f9006b0636
0096023bff9d039e0043039e00430374ff5b0374ff5b03a2003304e20043
04e2004304e2004304e2004303da005f03da005f03da005f03a4003302af
0021035a004303c5004e023b00430279000c03ce004302220043039e0043
037600330374000f03e2004e0270002103cd005f03a200430386005803ae
003d03ca006903c0004304e2004304000021023b004303a4003303760033
038600580404000f0000ffdc0000ff250000ffdc0000fe51028d00ab028d
00a002da0043034d007901a8ffba00000046000000460000004600000046
000000480000004600000046000000460435017c0435012e043500b70435
00810435012c043500be043500af043500810435009a043500db04350085
028d00c1043500b3060001000600010002420036060001000435009e0435
0098043500cb060001000600010006000100060001000600010000000046
060001000600010006000100060001000600010006000100060001000600
0100051bffba06000100060001000600010005b5003a05b5003a01f4ffba
01f4ffba060001000600010006000100060001000481003604350036043d
ffba043dffba03e9004a03e9004a067f0014077600140327ffba041effba
067f0014077600140327ffba041effba051b003204b500240300fff70600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000000
003000000046000000460000004000000046060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
0400001b0800000006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
028d007f028d005d0600010004ee0015034d007901a8000e01d6ffdc01a8
005601d60010037500320375003201a8002d01d60013051b003204b50024
01f4ffba01f4ffba01a8009301d6001305b5003a05b5003a01f4ffba01f4
ffba024200000300fff705b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
02b3005f02b3005f02b3005f02b3005f03e9004a03e9004a03e9004a03e9
004a0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba08c9003e08c9003e06c5ffba06c5ffba08c9003e08c9003e06c5
ffba06c5ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba04a7ffba
04a7ffba04a7ffba045a002a039a00360435ffba0327ffba045a002a039a
00360435ffba0327ffba064f0027064f00270224ffba021affba04a70046
04a700460224ffba021affba04cf002d04cf002d0327ffba0327ffba040d
0047040d004701a8ffba01a8ffba02b4002302b400230327ffba0327ffba
043500450435004501f4ffba01f4ffba024200360300fff7039affba0327
ffba0375003203750032051b003204b50024051b003204b5002401f4ffba
01f4ffba045a004004ce0040045a002604ce0030045a005304ce0041045a
005304ce0041060001000600010000000046000000460600010006000100
060001000000004600000046060001000600010000000048000000460600
010006000100060001000000004600000046000000460000004600000040
000000300600010000000046000000460600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
01000600010006000100060001000600010006000100028d00ca028d00c7
028d00c60600010006000100060001000600010006000100060001000600
010006000100060001000600010006000100060001000600010006000100
060001000600010006000100060001000600010006000100060001000600
010006000100060001000100ffba0800ffba1000ffba05c70048043b0045
0635000b045600020000fdcc0000fc140000fd130000fe420000fce00000
fdd40000fe620000fe2b0000fdb70000fc980000fd880000fc080000fcfe
0000feff0000ff030000fe9e041a00a206000088060000140000fe700000
fdd40000fdf60000fd770000fe620000fdbb0000fbd80000fbd80000fb74
0000fcfe0000fc8c0000fc460000fd270000fcb40000fca80000fcae0000
fc440000fe140000fe700000fd910000fc710000fdc30000fe470000fe62
0000fcc30000fde10000fd870000fd4b0000fd970000fd4b0000fc8a0000
fc620000fc090000fbd70239003c05c70010038d004905c70010038d0049
05c70010038d004905c70010038d004905c70010038d004905c70010038d
004905c70010038d004905c70010038d004905c70010038d004905c70010
038d004905c70010038d004905c70010038d004904e3002a038d004c04e3
002a038d004c04e3002a038d004c04e3002a038d004c04e3002a038d004c
04e3002a038d004c04e3002a038d004c04e3002a038d004c02aa00330239
003c02aa00330239003c05c700480400004505c700480400004505c70048
0400004505c700480400004505c700480400004505c700480400004505c7
00480400004505c70048043b004505c70048043b004505c70048043b0045
05c70048043b004505c70048043b004505c7000b0400000205c7000b0400
00020635000b045600020635000b045600020635000b045600020635000b
045600020635000b0456000205c700130400000c05c700130400000c05c7
00130400000c05c70010038d004902aa00330239000605c7004804000045
05c7000b0400000205c7000b0400000205c7000b0400000205c7000b0400
000205c7000b040000020000ff090000ff090000ff090000ff0904a00023
0348001f072b0012058700170556002503e3002e0556002503e3002e05c7
00230448002e05c700130400000205c700130400000205c7000f0400001b
0533fffa0406001e053300250400000d05c7002b038d004c05c700480400
004505b5003a01f4ffba0224ffba021affba04a7004601f4009e01f40010
01f4001b01f4001001f4006b01f4fff90227ffce0000000f01a8fff502aa
00a402aa00a40000000e01a80056000000560000ffcf01a8000f01d6ffbf
01a8fff501d6ffcd01a8001d01d6fff501a8009301d60013037500320375
00320375003203750032051b003204b5002405b5003a05b5003a01f4ffba
01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4
ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5003a
01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5003a05b5
003a01f4ffba01f4ffba0481003604350036043dffba043dffba04810036
04350036043dffba043dffba0481003604350036043dffba043dffba0481
003604350036043dffba043dffba0481003604350036043dffba043dffba
0481003604350036043dffba043dffba02b3003202b3003202b3005f02b3
005f02b3005f02b3005f02b3003202b3003202b3005f02b3005f02b3005f
02b3005f02b3005f02b3005f02b3003802b3003802b3004902b3004903e9
004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a
03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9004a03e9
004a0692003e0692003e043fffba043fffba0692003e0692003e043fffba
043fffba0692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba08c9003e08c9003e06c5ffba06c5ffba04a7ffba04a7ffba
045a002a039a00360435ffba0327ffba064f0027064f0027064f00270224
ffba021affba064f0027064f00270224ffba021affba064f0027064f0027
0224ffba021affba064f0027064f00270224ffba021affba064f0027064f
00270224ffba021affba04a7004604a7004604a7004604a70046093e0032
093e00320740ffba0740ffba067f0014077600140327ffba041effba04cf
002d04cf002d0327ffba0327ffba04cf002d04cf002d0327ffba0327ffba
04cf002d04cf002d0327ffba0327ffba067f0014077600140327ffba041e
ffba067f0014077600140327ffba041effba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba040d0047040d004701a8ffba01a8ffba040d0047040d0047
01a8ffba01a8ffba040d0047040d004701a8ffba01a8ffba040d0047040d
004701a8ffba01a8ffba043500450435004501f4ffba01f4ffba04350045
043500450435004504350045043500450435004501f4ffba01f4ffba0435
0045043500450481003604350036043dffba043dffba024200360300fff7
031a001a031a001a031a001a037500320375003203750032037500320375
003203750032037500320375003203750032037500320375003203750032
03750032037500320375003203750032051bffba04b5ffba051b003204b5
002401f4ffba01f4ffba0375003203750032051b003204b5002401f4ffba
01f4ffba051b003204b50024067f0045067f0045067f0045067f004501a8
00280000fe290000fea20000ff300000ff1d0000ff120000ff920000fe7e
08fc003208ad00320000ffb50000ffb60000feed0000ff640000fe7e0000
ff9f018d000002f6fffd0000fe820000ff1004cd00320000ff580000ff58
0000ff640692003e0692003e043fffba043fffba08c9003e08c9003e06c5
ffba06c5ffba045a002a039a00360435ffba0327ffba034d007902b40023
0242003601f4ffba0290ffba01f4002f01f4003b01f4001201f400b101f4
006d067f001407760014022200430000fee702bc000004440043045afff5
04cefff5045a005304ce0041045a005304ce0041045a005304ce0041045a
005304ce0041045a005304ce0041045a005304ce004104350071043500ad
045a000f04ce000f0400fffb061400000498002404000096049800240400
00000556004a0556004a038d004605c70023068500000498004404000044
03c5004604e3002f040200550473ff6d05c7004805c700120629000d0207
fffe02aa002305c70022040000110239002d03e100190688002305c7ff7a
0400000c05c700480766004a05880045053300000400fff9047300240473
006e031d004804a8002002c000040239001404e300000239001404e3003e
05f2003c05c7000b063f00440400000c04e3001a038d00290450002b0450
003f038d0046038d00500400002c0400002a038c0034036000140400fff9
019a00a1023f00a101fe000a02aa00e40aaa002309540023078d00440800
0029071c00290472003d08e4ffe50800ffe50639000c038d004c05c70010
038d00490000ff0905c70010038d0049071dffe80556004905c700480400
000005c700480400003d05c700220400001105c700480400004505c70048
040000450450002b038d00210239ff630aaa002309540023078d004405c7
00480400003d07990023047b002205c7ffe50400000c05c70010038d0049
05c70010038d004904e3002a038d004c04e3002a038d004c02aaffd30239
ffa102aa00330239fffe05c700480400004505c700480400004505560023
02aa000d0556002302aa000d05c7000b0400000205c7000b040000020473
0080031d006404e3003e023900140481004b0329005405c700230400000d
0533002504d400480400004504e3001a038d002905c70010038d004904e3
002a038d004c05c70048040000450000feec05c700480400004505c70048
0400004505c700480400004505c700130400000c038d0004042f0044042f
fff704000096038d0043038d00460400004404000044038d003a0504004c
035c0047035c004004b40040038b004502aaff30040000440400004403a0
004504000011038d00000400000d0400001b0400001b0239002d02270025
02390036023900280239003d0239003d049f003d06390009063900090639
00110400ff300400000c03fa000c04000045050a00450544004b046d0045
02aafff302aafff302aafff302aa000c02aa000d02aa001702aafff303e7
003603e70036031d006402aaff3002aaff30037dff9402aaffe302390014
02390014040000020464006603c200020400001105c7000d0400000c03f1
0004038d002903f70029038d0021038d003c038d005d038d0046038d005d
038d004605c7004803c70030038b004503a000450448002e0239ff7f0400
fff40370003604000044038d005d038d0046066b004406c2004406d30044
0485001403ae001405310014064d004f0487003d047a003d041d001403d9
003c0292001e02920026013effd201bd001e01bd000501bd00050259001e
036d00040260000401c0008902ec008902aa00b902aa00c102aa00b802aa
00f702aa00f701fc001e01fc001e04830027048300250483005304830053
02aa012102aa00ec02aa007602aa012102aa001d02aa007602aa00ec0239
00b6023900b602aa00f702aa00f702aa00a602aa00a602aa00a602aa001d
02aaffef030e002d025800040154001e01b3001e0250000401fc001e0310
00960310009603100096031000960310009602aa006202aa006202aa003c
02aa0017038d004304570096045700960457009604570096045700430457
0043045700430457004304570043031000430457002f0457002f0457002f
0457002f0457002f0310002f045700250457002504570025045700250457
00250310002f0457001a0457001a0457001a0457001a0457001a0310001a
045700420457004204570042045700420457004203100042045700960457
009604570096045700960457004204570042045700420457004204570042
031000420457002f0457002f0457002f0457002f0457002f0310002f0457
002f0457002f0457002f0457002f0457002f0310002f0457002604570026
045700260457002604570026031000260457004204570042045700420457
004204570042031000420457009604570096045700960457009604570042
045700420457004204570042045700420310004204570026045700260457
002604570026045700260310002604570023045700230457002304570023
04570023031000230457002f0457002f0457002f0457002f0457002f0310
002f0457004b0457004b0457004b0457004b0457004b0310004b04570096
045700960457009604570096045700420457004204570042045700420457
0042031000420457001a0457001a0457001a0457001a0457001a0310001a
0457002404570024045700240457002404570024031000240457002f0457
002f0457002f0457002f0457002f0310002f0457004e0457004e0457004e
0457004e0457004e0310004e045700960457009604570096045700960000
fee60000febf0000fdee0000fee00000ff940000fee60000ff440000fee3
0000fee50000ffce0000ff660000fee30000fee00000fee00000ff880000
ff880000ff88000000000000ff5b0000ff5d0000ff440000ff5f0000fe87
0000ffec0000ffa40000ff510000ff510000ff510000fec10000fe8a0000
00000000fee60000ff440000ff860000ff650000ff580000ffce0000fe87
0000febb0000fee50000fee60000fee00000fee00000fec10000febf0000
fdee0000fec10000fec10000febf0000fdee0000fe160000feb50000ffa4
0000fe870000ff440000feba0000ff230000ff9a0000fdee0000feb70000
00000000fec20000ff880000fe980000ff820000fe870000fde40000ff66
0000ff440000fec20000fec20000fec20000ff030000ff520000fd1f0000
ffb70000ffcb0000ff530000ff070000ff150000ff770000fef90000fecf
0000ff190000fede0000fed40000fe2a0000ff350000ff5b0000fed90000
fedc02aa00ec02aa007602aa00da0412005103f6000005c70013071f0000
05c700130436004505440000047b000a05c70048040000450556006e035c
001d0473002103930017049b0014039c001405da000a046e000006a00023
0639001104ed0046042b0045054a001e038d001d04560046045600460540
004504a60014059800480412004e03cd001e03160014047b000a0412004e
038d00460239ff6305c70048033d0046033d002804e3002a05c70025038d
004c0448002e0961004805110023055e00140458001e07be0027056b002d
05c7000004b800000843002306ac002d072b00120587001709ab0023077b
002d040200090329000005e700120502001c05c70048040000450682003a
04b600390682003a04b6003908c30048070a0045061a002a0487004509b4
0048065600460000fe3709610048051100230556004a038d004602ac001e
0000fea60000febc0000ff860000ff860000fc2b0000fc4c05c700250448
002e0498002403c3002e047300220400fff9050d0025041f001f0402002b
032900180556002503e3001f064900360496000c06ce002304fc002e0842
00250650002e0556004b038d00460556004a038d004604e3003e037f000c
0660003604d3000c0533fffa0406001e0707000a045f000a0707000a045f
000a02aa0033072b00120587001705560025041f002e056d001203fe000c
05c700230448002e05c700230448002e0533fffa0406001e071d00220510
002e044800dc05c70010038d004905c70010038d0049071dffe805560049
04e3002a038d004c05c7002b038d004c072b0012058700170402002b0329
00180402002b038d002105c700250448002e05c700250448002e05c70048
0400004505c70048040000450548003b036f001b05aa001a0400000c05aa
001a0400000c05aa001a0400000c0533fffa0406001e06fa00250560002d
0498004404000044066e0044062a0044066b006605a5005404970066039f
0054074100120604000c07990023064d002e05c7004803a000450591003e
04d0000c0000ff430000fec90000ff770000ffb00000ff470000ff560000
ff740000fed70000feac000000000000ff520000ff56000000000000feac
0000fd9a000000000000ff6a0000ff7c0000ff690000ff560000feac0000
ff7f0000ff560000fdef0000ff430000ff690000ff7c000000000000fdae
0000ff8c000001020000ff090000ff090000fee20000fee20000ff8f0000
ff210000ff0905c70010038d0049055600220400fffb055600220400fffb
055600220400fffb0556004a038d004605c700230400004405c700230400
004405c700230400004405c700230400004405c700230400004404e3002a
038d004c04e3002a038d004c04e3002a038d004c04e3002a038d004c04e3
002a038d004c0473002102aa004f05c700480400003d05c700230400000d
05c700230400000d05c700230400000d05c700230400000d05c700230400
000d02aa001b0239ffea02aa00330239000205c700220400001105c70022
0400001105c700220400001104e300290239003d04e300290239ffe904e3
00290239ffe704e300290239000f071d002206390011071d002206390011
071d00220639001105c7ffe50400000c05c7ffe50400000c05c7ffe50400
000c05c7ffe50400000c05c700480400004505c700480400004505c70048
0400004505c7004804000045047300220400fff9047300220400fff90556
002302aa000d0556002302aa000d0556002302aa000d0556002302aa000d
04730080031d006404730080031d006404730080031d006404730080031d
006004730080031d006404e3003e0239001404e3003e0239001404e3003e
0239fff504e3003e0239001405c7000b0400000205c7000b0400000205c7
000b0400000205c7000b0400000205c7000b0400000205c7001204000011
05c7001204000011078d001b05c7000d078d001b05c7000d05c7000f0400
001b05c7000f0400001b05c700130400000c04e3001a038d002904e3001a
038d002904e3001a038d00290400000d0239ffff05c7000d0400000c038d
004902390016043100570431005704310057043100570431005704310057
043100570431005705c7001005c700100654000006540000065400000654
00000654000006540000035c0047035c0047035c0047035c0047035c0047
035c004705fc000005fc0000073c0000073c0000073c0000073c0000042f
000b042f000b042f000b042f000b042f000b042f000b042f000b042f000b
06e0000006e0000008200000082000000820000008200000082000000820
000002270025022700250227ffaf0227ffaf0227ffff0227ffff0227ffd3
0227ffd303c3000003c30000050300000503000005030000050300000503
000005030000040000450400004504000045040000450400004504000045
065400000654000007f8000007f80000073000000730000003f6fffa03f6
fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa06e00000
082a0000082a0000082a00000544004b0544004b0544004b0544004b0544
004b0544004b0544004b0544004b067f0000067f000007fb000007fb0000
076f0000076f0000076f0000076f00000431005704310057035c0047035c
0047042f000b042f000b0227002502270025040000450400004503f6fffa
03f6fffa0544004b0544004b043100570431005704310057043100570431
005704310057043100570431005705c7001005c700100654000006540000
06540000065400000654000006540000042f000b042f000b042f000b042f
000b042f000b042f000b042f000b042f000b06e0000006e0000008200000
08200000082000000820000008200000082000000544004b0544004b0544
004b0544004b0544004b0544004b0544004b0544004b067f0000067f0000
07fb000007fb0000076f0000076f0000076f0000076f0000043100570431
0057043100570431005704310057043100570431005705c7001005c70010
05c7001005c7001005c7001002aa00db02aa00d802aa00db02aa001602aa
0016042f000b042f000b042f000b042f000b042f000b05fc000006130000
06e1000006f7000005c7002302aa002702aa002702aa00160227fff10227
ffd10227fff30227fff30227ffd00227ffd002aa003302aa001603c40000
03da000002aa002702aa002702aa001603f6fffa03f6fffa03f6fffa03f6
fffa03fe005903fe005903f6fffa03f6fffa05c7001305c7001307090000
07330000058c000002aaffea02aaffea02aa00760544004b0544004b0544
004b0544004b0544004b06cd0000062f000006e400000632000005f2003c
02aa00ec02aa00db04ef00460556004a0556004a0639001105c7ffe508d0
0023078d001b05c7002204e3003e080000290400003004c100660000ffcb
0000ffcb0000ffb70000ffb70239002d0239ff630400000f047300220400
00440239003d0400000c0289001404ff001e04ed001e02aa009202aa0092
02aa00d102aa00d102aa009702aa007602aa004e02aa004e02aa00150239
00b002aa00a902aa00a902aa00a902aa00a9032e001e032e001e02aa003a
0000ff7b0000ffa00000fee00000ff230000ff7b0000ff7b0000feb20000
ffa00000ffcb0000ffcb0000ffcb047300240400fff90405000505290005
0556004903b8002d03d300450432002d0432002d038e002d032900180239
003c025f00190451002d038f00230510002e0448002e0400004503d3002d
04550045044d00450455002105c7003e037e0045040000450400004503a6
002e03aeffff03aeffff037f000c044c002d040a002d053d002d0409002d
0400001105c7000d038d002903290018032e0045044f000f0348001f0400
00110448002e03a6002e043a000f03fe000c03600000044e00000318001e
0318001e0370001e02f6001e02f6001e0376001e0386001e0199001e01f9
001e03aa001e02f8001e0452001e03b3001e0387001e0358001e02b0001e
02a7001e0347001e02e6001e03a0001e046e00000230001e0230001e0283
001e031f001e027a001e027d001e020d001e020d001e01ef001e01ef001e
0268001e014f001e0286001e03e9001e0241001e024e001e020c001e024e
001e024e001e027d001e0188001e029f001e0272001e03e9001e025a0005
028d00050242001e021f0005022b001e02ad001e02420005014f001e01d6
001e029f001e025a00050242001e021f0005025e001e02ad001e02420005
05ed00460a66004606130046075b00460541ffba01e9003c045a00110000
ff0d0000ff350000fece0000feb70000fec90000ffcf0000ff4f0000ff9e
0000feca02b3005f02b3005f03e9004a03e9004a039affba0327ffba039a
ffba0327ffba0506005f0486004304f1004e04a2003304a0000f053b0064
04ec0043052c0021048300250000fe4b0000fe4c0000fe4c0400ffee038d
00430355000701a8ffba01a8ffba01a8ffba01a8ffba0658001509c50047
0400000008000000040000000800000002ab000002000000015500000400
000002000000019a000000ab0000000000000556004a071d00220510002e
0616000206310044062e004405c700100556004a0400008104e3002904e3
003e031d0064038d00290445005d000001020000ff420000fea40000ff3a
0000ffcb03fe000a055600470556004a0556004704a000250348001f0000
ff430000ff6b0000ffae027000580000ff39021affba0250001e0000ff3a
0000ff5b0000ff5f0000ff7e0000ff940000ff4a0000fe9c05b5003a05b5
003a01f4ff9601f4ff9605b5003a05b5003a01f4ffba01f4ffba05b5003a
05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba05b5
003a05b5003a01f4ffba01f4ffba05b5003a05b5003a01f4ffba01f4ffba
05b5003a05b5003a01f4ffba01f4ffba0481003604350036043dffba043d
ffba0481003604350036043dffba043dffba02b3003202b3003202b3005f
02b3005f03e9004a03e9004a0692003e0692003e043fffba043fffba045a
002a039a00360435ffba0327ffba045a002a039a00360435ffba0327ffba
045a002a039a00360435ffba0327ffba064f0027064f00270224ffba021a
ffba064f0027064f00270224ffba021affba067f0014077600140327ffba
041effba067f0014077600140327ffba041effba067f0014077600140327
ffba041effba02b4002302b400230327ffba0327ffba02b4002302b40023
0327ffba0327ffba043500450435004501f4ffba01f4ffba043500450435
004501f4ffba01f4ffba043500450435004501f4ffba01f4ffba040d0047
040d004701a8ffba01a8ffba03e9004a03e9004a03e9004a03e9004a0692
003e0692003e043fffba043fffba0400ffa80400004402aa001406390011
0400000c0400ffae02aaffbc02aaffbc031d001e0239ffbd038d00290400
003d0296001e03c50041062100140239002c022700250400fff9044c002d
046400190400fffb0400004402aa004f04c6003d040000110239003d0639
00110400000c0400fff902aa000d031d00640365ff30040000110400001b
038d0029038d0049042f004404000044038d004c035c0047035c0040038d
004c0239003c038d00430384000a04000002038d002102830005020c001e
020c001e024d001e01ef001e01ab001e01abffa60221001e0292001e014f
00150175001e0151001e0151001a018b0000014f001e014f001e022a001e
0395001e03e9001e029fffa4029f001e0293001e024e001e0291001e01b3
001e01b9ff920188001e029f001f0289001e029a001e0253001e025a0005
0231001e0231001e026e001e0220001e0228001e0000fe930000fe930000
ff730000febc023900b00230001e020d001e024e001e02520005020d001e
05c7004805c700100473003c0556004a02aa005304310057043100570431
005704310057043100570431005704310057043100570227ffcd0227ffd1
0227ffd10227ffd10227ffcd0227fff10227ffcd0227fff103f6fffa03f6
fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa03f6fffa0227ffd1
0227ffd10227fff10227fff103f6fffa03f6fffa03f6fffa03f6fffa045a
005304ce004a032e00130556002205c7000b05cd001c04e3002a038d004c
031d002a0239ff63059e004a040000440556002302aa000d05c700130400
000c038d0043038d0046038d00430239003d04a000230348001f05c7000f
0400001b05c7000f0400001b0402005503290042056d001203fe000c0000
fec60000fed40000fec60000fed40000fe5f0000fe5f0000ff350000ff7b
0000feb2070e000503550045038d004304e300290239002d04e3000a0473
002205560023038d00490239000e05c700230400000d05c7002204000011
04e3001a038d002903c60041054600230409002e049e00450000ff3b0000
ff510000ff080000fef90000fea40000fea40239003c059d002605c7ffe5
059d00260000fee00000ff590000feeb0000ff0f0000fee60000ff090000
feed0000fef50000ff0e0000feed0000fdcc05c7004804000044078d001b
05c7000d05b500230000fe9205c9004804c6001107fc001b0697000d0239
00b002f300260171005101710051040000990400009902aa00e402aa00e4
02aa00e402aa003c04e30037040000650019002200000000000000760000
007600000076000000760000013000000228000003f60000062e0000083a
00000a6e00000af200000b7600000bf800000dd000000ea000000f3e0000
0f9800000ff0000010620000119400001278000014480000162600001738
000018c400001a3e00001b3400001d4800001ece00001f5e0000202c0000
214a000021ec0000231c0000248c0000276e000029f600002d1a00002e94
00003006000031d80000338800003582000037bc000038de00003a320000
3da800003ebe0000411a00004354000044700000466a000047f200004a92
00004d8c00004ee2000050ea0000536c0000574200005b3a00005da00000
5eea00005f9200006014000060be000061a6000061e20000623800006632
0000687600006ad400006da6000071860000740a000078a200007bd20000
7e88000080ca000085340000871000008bda00008f42000091ae0000947a
000096d40000990400009dc80000a01e0000a2c20000a5f00000aa520000
aeec0000b1aa0000b3a60000b49a0000b5080000b5fa0000b6b80000b708
0000b73a0000b7860000b7bc0000b7f80000b82e0000b8780000b8ae0000
b8ee0000b9360000b9760000b9a40000b9da0000ba060000ba3a0000ba76
0000bab80000baee0000bb280000bb580000bb900000bbc80000bc040000
bc3c0000bc6e0000bcac0000bce80000bd260000bd600000bd960000bddc
0000be200000bf7c0000c0540000c24a0000c4b40000c71c0000c7780000
c8140000c9b00000ccc80000ceca0000d1360000d18e0000d2240000d388
0000d5a40000d7480000d89c0000d99e0000dada0000dc360000de6c0000
dfee0000e1160000e1f00000e2da0000e4040000e4ea0000e6800000e76e
0000e9020000ec6c0000ee8e0000efea0000f0920000f0ea0000f1b00000
f3320000f49a0000f5480000f5e00000f67c0000f77e0000f7ba0000f7f8
0000f82e0000fa6e0000fe020000fe3a0000fe720000ff780000ff9e0001
004a000100ec000101d0000102e20001032c0001035e000103ba00010520
00010584000105e40001084800010a7000010d0a00010d5a00010d7c0001
0e9000011168000111b0000112040001124200011282000112b2000112e6
0001133a00011380000113b2000113e60001141e00011450000114800001
14c6000114f600011664000116e0000117a2000117de0001185a000118b4
000119ce00011aa400011b4200011bc000011c2a00011da200011fa80001
1fe6000120240001205c000120a60001212a00012270000124b4000124e4
00012526000126a200012896000128dc000129fe00012ab600012bd40001
2cfa00012ef800013088000132760001343a00013474000134b0000134e0
000135260001357a000135b6000135f600013632000136660001390a0001
39480001398c000139ca00013a0c00013a3200013a5800013a9000013d3e
00013e6800013e9000013eb600013eee00013f2c00013f5c00013f900001
40be0001426200014296000142cc000143020001434000014382000143be
000143f0000144360001446c000144a2000144e000014514000145580001
4594000145ba000145de000146220001486e000148b0000148e20001491a
0001494c0001497c000149b2000149f200014a3200014ad400014c9c0001
4e2400014f34000150d60001523a00015324000154300001559600015608
0001563c0001578800015aaa00015b5600015c1a00015cc800015d860001
5ea200015fba0001611600016172000162ae0001639400016472000164d0
00016554000165da0001661c00016658000166a8000166f8000167480001
679a000167fa0001685a000168bc00016922000169ac00016a1400016a7a
00016af000016b6600016bf400016c6a00016cde00016d6a00016de00001
6e5a00016ee800016f6000016fd600017064000170e80001716c0001722a
000172b200017342000173fc0001748a00017514000175d2000176620001
76ee000177ac000178860001796600017a8800017acc00017b0800017b46
00017b8a00017bce00017ff60001878a00018eb800018ef400018f320001
8f7800018fc0000190060001904c00019134000191bc0001928a00019436
00019598000197d0000198be000199e800019ae200019bfa00019c980001
9d1c00019dca00019e9800019ef200019fa00001a0220001a08e0001a0c2
0001a24c0001a3a60001a41e0001a46c0001a4ec0001a5500001a5d60001
a6120001a6440001a67a0001a6b80001a6fa0001a7280001a76c0001a79a
0001a7d40001a8020001a83a0001a8680001a8b40001a8fc0001a93c0001
a96c0001a9920001a9c80001a9f80001aa2e0001ac1c0001aed00001af00
0001af4a0001af7c0001afc20001aff20001b02c0001b0520001b0760001
b0b40001b2560001b28c0001b2bc0001b4de0001b5040001b5540001b57e
0001b5ae0001b6f80001b89c0001b8d20001b9080001b93c0001b9800001
b9a60001b9d60001ba060001ba380001bb900001bd7c0001bdac0001bde0
0001be120001be460001be760001bea60001becc0001bef20001bf220001
bf560001bf860001bfb60001c0a40001c0e40001c1240001c1540001c184
0001c1b40001c1e40001c22e0001c25e0001c28e0001c2be0001c2ee0001
c3220001c3560001c38c0001c3c60001c43c0001c4760001c64e0001c71c
0001c9260001cba60001cdf40001cffa0001d0740001d10e0001d11e0001
d2320001d25e0001d3e00001d5460001d6080001d6420001d7b60001d7f0
0001d82c0001d83c0001d84c0001d9640001d9740001d9840001d9940001
d9a40001d9b40001db1e0001db2e0001db3e0001dcc20001dcd20001ddd8
0001dde80001def00001df000001df100001df200001e08e0001e2480001
e27c0001e2ae0001e2de0001e30e0001e33e0001e36c0001e3a20001e53e
0001e6340001e7d40001e8fa0001ea2c0001eb2a0001ecd80001ee1a0001
ef800001f0860001f2800001f2900001f3ea0001f5380001f6580001f7dc
0001f9680001fafa0001fb320001fb680001fba00001fbd00001fc000001
fc340001fda60001fdd60001fefc0001ff0c0001ff1c0001ff500001ff60
000200c6000202a20002043000020460000206400002079e000207ae0002
08d0000208e00002098200020ab000020ac000020d6800020f040002107c
0002125c000213d6000214c8000214d8000214e8000214f8000215080002
15180002152800021538000216a200021850000218600002199400021ae4
00021ccc00021ed8000220140002218c00022284000222be000224200002
245000022460000225cc000227680002284e000229c4000229d400022c9c
00022dfc00022fdc0002323200023444000235a8000237f00002399c0002
39ac00023b0e00023b1e00023b2e00023c3800023c4800023e6000023e70
00023ffc00024174000243560002456e000246f0000248e800024a2a0002
4a6400024c1e00024dcc00024e12000250220002505000025192000251a2
000251b2000251ee000251fe000253dc000255f20002583a0002586a0002
5ad600025c7600025d1400025df200025e3800025ff6000261800002621e
00026380000264480002656c000265c20002665c000267480002677c0002
68220002687800026970000269c600026a0600026a4800026a8400026ab6
00026b0000026b4800026bd000026dc000026e9600026fa40002707a0002
71a0000272340002730200027424000275b00002764a00027704000277b8
000278ea000279ce00027b1c00027bca00027ca400027d9400027f4c0002
806200028188000283400002850a0002864a000286f40002891200028a34
00028b5000028c7600028d9c00028df600028ea600028fde000290100002
9056000290a4000290e800029158000292d6000293040002933200029360
0002938e000293bc000293ea00029692000296ca00029718000297560002
97a2000298020002990c0002994000029a4200029a7a00029ab400029afa
00029b3e00029b8200029bb000029d4a00029ef200029f3800029f8e0002
9fc60002a24e0002a2820002a2b00002a2de0002a30a0002a33c0002a586
0002a5b00002a6cc0002a77e0002a82a0002a8ac0002a9680002aa800002
ab8e0002abc20002ac480002ada40002ae260002ae700002af7a0002afc2
0002b0c60002b1420002b19a0002b21c0002b3080002b41e0002b50c0002
b5b60002b6b60002b7960002b8860002b96e0002ba1e0002baa00002bcfe
0002bd280002bd520002be0a0002be340002bf760002c07c0002c1660002
c1900002c1ba0002c1e40002c20e0002c2380002c3b80002c3e20002c40c
0002c4360002c4600002c48a0002c4b40002c4de0002c5080002c53c0002
c5660002c5900002c5ba0002c7340002c7440002c85e0002c86e0002c898
0002c8c20002c8ec0002c9160002cabe0002ccce0002cdfc0002ce0c0002
cf880002cf980002d0de0002d2aa0002d3b00002d5300002d6d80002d904
0002da660002dc500002dd940002dec20002dfb00002dfda0002e0040002
e02e0002e0580002e0820002e0ac0002e0d60002e1000002e12a0002e154
0002e17e0002e1a80002e1d20002e1fc0002e2260002e4620002e5de0002
e7220002e90a0002ea520002ea7c0002eaa60002ead00002eafa0002eb24
0002eb4e0002eb780002eba20002ebcc0002ebf60002ec200002ec4a0002
ec740002ec9e0002ecc80002ecf20002ed1c0002ed460002ef820002f2c8
0002f2f20002f31c0002f3460002f3700002f39a0002f3c40002f3ee0002
f4180002f4420002f46c0002f4960002f4c00002f4ea0002f5140002f53e
0002f5680002f5920002f5bc0002f5e60002f6100002f63a0002f6640002
f68e0002f6b80002f6e20002f70c0002f7360002f7600002f7fa0002f810
0002f83a0002fb1a0002fb2a0002fc440002fd660002fea40002ffe60003
018c0003019c000302de0003042e0003061e000307f20003090a0003091a
0003099c00030a2a00030b2a00030b3a00030bda00030bea00030d000003
0e5400030f8400030f940003106200031072000311e8000311f80003130c
0003131c00031450000315e6000316a2000316b2000317b00003190a0003
1996000319a600031ad000031c5c00031d1800031d2800031dc000031dd0
00031e9c00031eac00031f8400031f940003209c000320ac000322720003
2282000323da000323ea00032654000326640003285e0003286e000329d8
000329e800032ad800032ae800032c8000032c9000032dae00032dbe0003
2efe00032f0e00032f1e00032f2e000330a6000330b6000330c6000330d6
0003322800033378000334460003352a000336aa0003382e0003392e0003
3a4200033b8600033b9600033c8400033d5e00033efa00033f0a00034028
0003412e00034326000343360003434600034356000344a0000344b00003
45680003457800034686000346960003478200034792000348b0000348c0
0003495e0003496e0003497e00034a6c00034be000034d0c00034e060003
4e1600034e2600034e3600034fd40003518e0003525c0003526c000354cc
000357160003599c00035c0400035e8a00036100000362d00003648a0003
64b4000364de000364ee000364fe00036528000365520003657c0003658c
0003659c000365c6000365f000036600000366100003663a000366640003
668e0003669e000366ae000366be000366ce000366de000366ee00036718
0003672800036738000367620003678c000367b6000367e00003680a0003
68340003685e00036888000368b2000368dc00036906000369300003695a
00036984000369ae000369d800036a0200036a2c00036a5600036a800003
6aaa00036ad400036afe00036b2800036b5200036b7c00036ba600036bd0
00036bfa00036c2400036c4e00036c7800036ca200036ccc00036cf60003
6d2000036d4a00036d7400036d9e00036dc800036df200036e1c00036e46
00036e7000036e9a00036ec400036eee00036f1800036f4200036f6c0003
6f9600036fc000036fea00037014000370b4000370f80003716e00037198
000371c2000371ec00037216000372400003726a00037294000372be0003
72e8000373120003733c0003736600037390000373ba000373e40003740e
00037438000374620003748c000374b6000374e00003750a000375340003
755e00037592000375c6000375fa000377a8000379b800037ba800037db6
00037e4800037ea200037f0c00037fa600038036000380a60003817a0003
82680003833c0003842c000384c60003859a00038634000386e200038788
000387da0003893800038986000389d400038a2c00038a8400038ad60003
8b2800038be400038ca000038d3600038dcc00038e6200038efe00038f9a
00039036000390480003905a0003906c0003907e00039090000390ea0003
914a000391e6000391f80003920a0003921a0003922a0003923c0003924e
0003926000039272000392840003929600039332000393c8000394640003
94fa000396160003963c0003966200039688000396b2000396ee0003975c
000397a40003981a0003985a000398c600039902000399660003999e0003
9a0200039a4200039a9800039ad800039b4400039b8e00039be600039c1e
00039c7000039ca800039cfc00039d2a00039d5000039d7a00039db40003
9de400039e1400039e6a00039ecc00039f3000039f980003a0000003a060
0003a0b20003a10a0003a1640003a1bc0003a1ec0003a22a0003a2500003
a2840003a2ae0003a2d40003a2fa0003a3200003a35c0003a3b40003a410
0003a4720003a4c40003a5220003a55a0003a5aa0003a5e60003a6360003
a6660003a69e0003a6ce0003a7020003a7280003a74e0003a77e0003a7ae
0003a7d40003a7fa0003a8240003a8500003a8760003a8b20003a8e20003
a9120003a9420003a9720003a9980003a9d40003aa040003aa440003aa6e
0003aa9a0003aacc0003aaf60003ab220003ab500003ab860003abc40003
ac0c0003ac4a0003ac7a0003acca0003ad040003ad460003ad760003adcc
0003adf60003aec20003aeec0003afac0003afd60003b08c0003b0b60003
b17a0003b26e0003b39c0003b5040003b6340003b7100003b8340003baf0
0003bde40003bf940003c1c60003c3e80003c6d80003c8840003ca800003
ca900003cbf40003ce620003cfe80003d3dc0003d6f20003d8a00003da94
0003dbfc0003dc0c0003dd720003dee60003dff60003e1680003e2420003
e2b80003e36e0003e4140003e5840003e5bc0003e6360003e6f80003e7b2
0003e81a0003e9200003ea560003eb340003ec920003ed0c0003ed860003
ee4e0003ef080003efbc0003f0180003f0720003f0ba0003f12a0003f1a6
0003f1f00003f22a0003f2700003f2b40003f3060003f3580003f3da0003
f45c0003f49e0003f4de0003f5140003f54a0003f5780003f5a60003f5da
0003f60e0003f6500003f6920003f6ce0003f70a0003f7440003f77e0003
f7b00003f7e20003f8140003f8460003f8800003f8ba0003f8fc0003f93e
0003f9800003f9c20003fa100003fa5e0003faa00003fae20003fb220003
fb620003fb9c0003fbd60003fc220003fc6e0003fcac0003fcec0003fd32
0003fd780003fdb40003fe0a0003fe460003fe820003fec20003ff020003
ff3e0003ff7a0003ffba0003fffa0004003e00040082000400d600040164
000401a6000401e800040250000402b8000402ea0004031c000403540004
038c00040422000404b8000405020004054c00040588000405c40004061a
00040670000406ba000407040004075c000407b4000407f4000408340004
086c000408a4000408ee0004093800040976000409b4000409f600040a38
00040a8c00040ae000040b2600040b6c00040bb200040bf800040c4e0004
0ca400040cfa00040d5000040d9c00040de800040e3400040e8000040ef4
00040f6800040fdc000410500004108e000410cc0004110a000411480004
1186000411c4000412080004124c00041298000412e40004134400041390
000413ce0004141c0004152c0004157c000415cc000416040004163c0004
1692000416e80004175c000417c000041802000418440004189a000418e8
0004193400041980000419c000041a0000041a4800041a9000041afc0004
1b5600041b8e00041bc600041c0600041c4600041d1600041e1200041ed2
00041fc0000420160004206c000420be0004211200042176000421da0004
223000042286000422fc00042372000423b4000423f6000424380004247a
000424bc000424fe00042554000425aa000425fc00042650000426d80004
275a000427fa0004289c000428da000429180004295600042992000429d0
00042a0e00042a4c00042a8800042b6c00042c5800042d6e00042e8a0004
2f540004301e0004311800043212000433100004340e0004352c0004364a
00043770000438960004399800043a9a00043b2c00043bbe00043bfc0004
3c3a00043c9400043cee00043d2600043d5e00043e6e00043e7e00043ec6
00043f0e00043f6600043fbe00043ff00004402200044064000440a60004
40e00004411a0004415e000441a20004421a000442940004432400044368
000443a80004442a000444ac000446040004461400044662000446b00004
46ec000447280004476e000447b40004480200044850000448a0000448f0
0004494c000449a800044b1e00044c8600044cbe00044cf800044d440004
4d9000044de200044e3400044e8600044edc00044f1800044f5400044faa
00044ffe00045136000451d600045224000452640004529e000454340004
569c00045760000458f600045a5400045b2200045cc800045f1c00046154
0004619a000461cc000462760004639a000463be00046458000465640004
6674000467840004689200046a1800046a4a00046aec00046b1400046b76
00046bd800046c3a00046c9c00046cda00046d1800046d5200046d8c0004
6db800046e0400046e3e00046e7800046fd40004712800047138000471f6
0004732c0004738a000474a200047630000476d60004781c0004785a0004
7898000478d0000479280004795400047996000479fa00047a4200047aa4
00047b0400047b7600047bf200047c6e00047cf000047d7c00047e080004
7e9200047f1200047f4c00047f88000480ec000481b6000481e600048216
0004838400048520000485300004864c0004875e0004888a0004899e0004
8ae600048c6600048c7600048d9a00048ee40004900600049178000492c2
0004944e000495960004971c000498ea00049a5000049b0000049bcc0004
9e720004a0a80004a15a0004a3820004a5580004a6a80004a7a80004a7b8
0004a8dc0004aa0a0004ab480004acca0004aede0004b08e0004b27e0004
b28e0004b39c0004b5000004b5ea0004b75e0004b8640004b9ba0004bae6
0004bc060004bd740004bebe0004c0160004c1520004c2ac0004c3f40004
c5980004c7220004c8820004ca080004cbd60004ccc80004cd060004cd5c
0004ce040004ce140004ce660004cebe0004cf1c0004cf400004cf780004
cfc80004cff80004d0320004d0800004d1ac0004d1d60004d2540004d30c
0004d3340004d3b40004d3ee0004d42a0004d5d20004d8c40004d9020004
d9380004d9760004d9c40004d9ea0004da100004da580004da9c0004dae2
0004db2a0004dc180004dc3c0004dc680004dca00004dcdc0004dd180004
de7e0004dfbc0004dffe0004e03a0004e0740004e0c20004e1060004e13a
0004e1840004e1cc0004e2120004e2460004e27e0004e2b60004e2ee0004
e34e0004e3940004e3dc0004e4100004e44a0004e4900004e4d40004e512
0004e5480004e5600004e5a80004e5dc0004e62c0004e65e0004e6940004
e8040004ea160004eb700004eca60004ecdc0004ed300004ee660004f046
0004f1980004f2780004f39c0004f3d00004f4020004f5e40004f7900004
f7ba0004f8300004f9740004f99c0004fa140004fa480004fa7c0004faa4
0004fb180004fb500004fb8a0004fd320004fe760004ffd40005011a0005
0252000503ca0005051800050670000507b00005097800050aea00050c50
00050e3400050f54000510720005120a0005134600051484000516540005
18500005198600051ae800051c9600051d9000051da000051e7000051f8e
000520780005217600052328000524f6000526c4000528ca00052a040005
2b3e00052c9000052ca000052e7a00052f9600053116000531ea000532be
000533c8000534a8000535ba0005368c000537500005392200053af80005
3d3e00053e5a00053fb2000540ae000542120005432a0005444e0005457c
0005467c000547a2000548d800054aa000054bf600054d1000054e960005
502e000551620005531a000554140005552000055622000556fe00055840
000558500005597c00055b1800055b2800055c6200055e4e00055f080005
60a2000561da0005631e000564f200056774000569cc00056bfe00056dfc
00056fe60005722800057492000575ac000577ba0005782c000579a00005
7b2600057c3600057d4200057e6200057fb40005814c0005832a00058494
0005851000058610000586a20005872e000587ba00058860000589060005
89fc00058af200058b0200058b1200058bfc00058cea00058d2000058d78
00058dce00058e3000058e5e00058e9a00058ed800058f5800058fb40005
9052000590f000059174000591f800059290000592be0005935a0005940c
00059620000596c8000598f000059aca00059c0600059c3c00059c800005
9cc400059d0800059d3e00059d7000059db200059e0a00059e4e00059f54
00059fcc0005a0520005a0c20005a1240005a1aa0005a20a0005a2740005
a2e80005a3580005a3b60005a45c0005a4f40005a5600005a5ee0005a648
0005a6b60005a7600005a8060005a89c0005a90c0005a98e0005a9f20005
aa9e0005ab5c0005ac080005ac9a0005acf80005ad640005adba0005ae3c
0005aeba0005af400005afcc0005b0260005b0920005b1020005b1700005
b1e00005b2640005b2f40005b35a0005b3d40005b4500005b4c80005b56e
0005b6060005b6960005b6f40005b7920005b80e0005b8a00005b9440005
b9ee0005ba860005bae20005bb360005bb9e0005bc440005bcee0005bdb8
0005be5e0005bec00005bf180005bf780005c0060005c08c0005c11a0005
c17a0005c1de0005c2480005c2b00005c3180005c3900005c4180005c4ac
0005c5180005c5800005c5e40005c6900005c7500005c7fe0005c88c0005
c8ea0005c9560005c9c60005ca6a0005cb100005cbd40005cc760005ccda
0005cd6a0005cddc0005ce740005cef20005cf6c0005cfd80005d0660005
d0c20005d1200005d1a60005d2220005d28a0005d2ee0005d3420005d3b0
0005d4180005d4960005d50c0005d5860005d6060005d6620005d6c80005
d72c0005d7cc0005d86e0005d92c0005d9dc0005da380005dab00005db0e
0005db980005dc300005dcbe0005dd240005dd820005de100005de820005
df1c0005dfb00005e0200005e0900005e1080005e1660005e1c60005e240
0005e29a0005e2fa0005e3540005e3b00005e4180005e4760005e4a60005
e4ee0005e5620005e5b60005e62e0005e71c0005e7ac0005e8100005e844
0005e8920005e90e0005e9d80005ea680005eae20005eb680005ebe20005
ec580005ec920005ecd00005ed500005edd00005ee060005eeb20005ef6c
0005eff60005f07e0005f10e0005f13a0005f1c40005f2500005f2bc0005
f3de0005f45c0005f4ee0005f56a0005f5ca0005f6180005f6b80005f714
0005f7700005f7d80005f8440005f8d00005f8fe0005f92a0005f97e0005
fa0c0005fa360005fa5e0005faae0005fafe0005fbb80005fc040005fc42
0005fcf20005fd660005fdd20005fe400005fe7c0005febc0005ff520005
ffde000600d00006012c0006016e000601c20006023e000602b2000603d2
000605280006062e00060698000606f200060a2000060ac200060b320006
0b8a00060cd000060e0400060ed600060fc0000611040006120a00061336
0006149000061660000617540006180c0006194a00061b3000061b880006
1bc400061c1000061d2600061e4a00061f8e00061fe00006201200062136
0006229200062496000625c0000626e2000627a8000628ae000629be0006
2abe00062bee00062c8c00062dcc00062f02000631220006335800063482
00063588000636dc0006382c000639d000063b3a00063cb400063e860006
3fa6000640c600064200000642c20006446a000645a6000646d8000646e8
000646f8000647a40006485400064884000648d000064900000649440006
4b2600064cc400064e6e00064fd60006517600065330000654a000065614
0006581c000659fa00065bb200065d9600066006000662b2000664ac0006
667a00066846000669d600066b3400066c7200066d7e00066e860006700a
00067174000672f4000674aa000676040006775e000679a400067b700006
7be400067c1800067c5200067d6e00067e9600067fd60006805000068098
0006810e000681840006836200068576000687580006899400068aca0006
8bd200068d6e00068f0600069050000691b4000693b8000695a40006977a
0006995a00069b0e00069ce200069e1600069f7a0006a1040006a28a0006
a3ea0006a5680006a70a0006a89c0006a9a00006aa8e0006abfa0006ad36
0006aeb20006b0180006b1680006b3040006b4680006b59c0006b5ac0006
b5e00006b6060006b7e60006b9840006bab80006bc0e0006bd8e0006bef0
0006c04a0006c1c40006c3440006c4ac0006c6780006c8620006c8e60006
c91a0006c93e0006c98e0006c9ce0006c9de0006c9ee0006ca300006ca58
0006ca9a0006cad00006cb080006cb440006cb860006cbbc0006cd240006
cd340006cd680006cd9c0006cdd40006ce120006ce4e0006ce8a0006cec6
0006cf020006cf400006cf8a0006cfc20006cffa0006d03e0006d08c0006
d0e00006d1240006d1660006d19e0006d1d60006d20e0006d3140006d324
0006d4e80006d6de0006d8c20006da600006dbd60006dd4a0006ded80006
e0620006e1fc0006e3700006e4be0006e5d20006e7340006e8620006e918
0006e9ca0006eaa20006eb200006ebce0006ec460006ecb60006edc80006
ee2a0006eed80006efbc0006f0200006f0860006f1340006f30c0006f408
0006f4880006f4c20006f56e0006f5e60006f6b00006f7380006f79c0006
f8920006f94e0006fa080006fa4a0006fac40006fbd00006fc680006fcb4
0006fd9a0006fe7a0006ffde0007016e0007028200070396000704900007
04b8000704e2000705160007054a0007057000070596000705be000705e4
0007065c000706b6000706ea000707300007075a00070786000707ac0007
07d8000707fe000708280007084e000708760007089e0007090a00070932
0007098e000709b4000709dc00070a0a00070a3000070a6400070a960007
0aca00070b0200070b3a00070b6e00070ba200070bd000070bfa00070c20
00070c5800070c9000070cbe00070cf200070d1800070d3e00070d640007
0d8a00070db400070e1200070e4600070e8400070eb800070ee200070f08
00070f3600070f5c00070f8600070fd40007102e0007105a000710800007
10ac000710d20007110a0007113e00071172000711a6000711cc000711f2
0007122c000712600007128a000712b0000712d6000712fc000713220007
1348000713700007142600071450000714f00007151800071586000715ae
0007160c000716400007167c000716bc000716f20007172e000717600007
1788000717ae000717fa0007183c000718540007187a000718ae000718e0
000719080007193000071966000719ca000719f200071a4c00071a940007
1ada00071b0e00071b5000071b7600071b9c00071bc200071be800071c0e
00071c3400071c5c00071c8600071cac00071cd200071cf800071d1e0007
1d4600071e0c00071e3600071ea000071ed400071f0800071f4000071f74
00071fa800071fdc000720060007202c0007206000072096000720ce0007
210e0007214a0007218e000721e20007222c00072252000722780007229e
000722c4000722ea000723340007236c000723a4000723f20007242e0007
246a000724aa000724e80007252600072564000725a2000725e000072622
0007265600072694000726ce000727080007274800072788000727bc0007
27f00007283e0007287a000728bc000728fe000729360007296e000729b6
000729fe00072a5600072aae00072b1400072b7a00072bb000072be60007
2c2000072c5a00072c9200072cca00072d1000072d5600072db600072e16
00072e6e00072ec600072f2000072f7a00072fc20007300a000730440007
307e000730bc000730fa0007313000073166000731a4000731e20007322a
00073272000732ba00073302000733500007339e000733e0000734220007
34560007348a000734c4000734fe0007353800073572000735d200073632
0007366c000736a6000737040007376200073798000737d8000738100007
384800073882000738bc000738f60007393a000739a200073a0e00073a7a
00073ac400073af800073b2c00073b6600073ba000073be400073c280007
3c6000073c9800073cde00073d2000073d5800073d9000073de000073e30
00073e8000073ed000073f0600073f4a00073f8400073fc4000740080007
404000074078000740ae000740f2000741360007416c000741b600074202
0007423e0007428c000742de0007432c0007437a000743c8000744160007
4466000744ba000745000007454e0007459a000745e6000746380007468a
000746d0000747160007475e000747a6000747f20007483e000748860007
48ce000749240007497a000749ec00074a5e00074ac800074b3200074b9e
00074c0a00074c6400074cbe00074d0200074d4600074d9200074dde0007
4e3200074e8600074ece00074f1600074f6e00074fc20007500c00075056
000750c00007512a00075194000751fe0007523200075266000752ae0007
52d40007532a0007535e000753a2000753d60007540a000754480007548e
000754b40007552c0007557c000755f4000756820007578e000757e20007
58080007585000075888000758d000075924000759a0000759f000075a76
00075a9c00075b4c00075bfe00075d1800075d4a00075d7c00075e000007
5e6e00075ea000075f0a00075f3e00075f7200075fbc00076026000760d4
00076182000762ac000762ea000763260007639c000764020007643e0007
6474000764aa000765100007654400076578000765d60007664a000766a8
0007676e000768340007687c000768da000769000007694e000769820007
69c600076a1400076a7000076ac200076b1c00076b4200076b9a00076c10
00076e040007705c00077228000774560007764000077666000779960007
7be800077d8a00077f9c000780da000782f0000783460007839a00078416
0007847c0007852c000785dc000787c40007898400078aee00078bb00007
8ce000078dac00078eac00078fc2000790080007904e00079096000790da
000791fc0007923a000792ac00079338000793c40007942c0007945e0007
948e000794be000794ee0007953a0007956c000795d40007961600079660
000796e600079764000797aa000797ec00079864000798ae000799140007
99420007996e0007997e0007998e00079aa000079c1e00079db800079ede
00079f9c0007a0420007a1140007a1fa0007a2d60007a37e0007a40a0007
a5620007a6420007a6520007a6620007a6720007a7200007a7d60007a886
0007a98a0007aae60007abb80007ac380007acbc0007ad740007ad840007
ae980007af3a0007b0040007b0b40007b1ba0007b3140007b3240007b334
0007b3440007b41e0007b5080007b5ec0007b5fc0007b60c0007b61c0007
b62c0007b78a0007b79a0007b8e00007bab00007bc0c0007bd820007be7c
0007bf860007c0920007c1b60007c2c00007c3440007c3d00007c51e0007
c5b40007c74a0007c8560007c94c0007ca280007cb580007cc4e0007cdc4
0007ce660007cf880007d1bc0007d2a60007d3940007d47a0007d5f40007
d6fc0007d8180007d9260007da1e0007daf60007dbd20007dd1c0007ddc0
0007df3c0007e0840007e17a0007e2700007e3520007e3d80007e4680007
e5940007e6140007e6d60007e78e0007e8ce0007ea260007ead60007ebd0
0007ec780007edd40007eeca0007efd20007f09e0007f18c0007f2460007
f39c0007f48c0007f52a0007f6840007f7740007f8740007f8d20007f9d8
0007fa6e0007fb300007fbd80007fc180007fdb60007fe620007ff1a0008
0042000801d0000802dc00080326000804b60008053e0008055000080580
000805b0000805e8000806200008065600080692000806c8000807040008
086c00080900000809e200080a6600080b4e00080bea00080c5c00080d24
00080d6600080e9600080f4600081030000810680008108e000810c80008
11c2000812e0000813e20008142000081446000814a4000814b4000814c4
000814d4000814e4000814f4000815040008151400081524000815340008
154400081554000815540008162800081766000819ac00081adc00081c4c
00081de800081fb000082134000821440008220c0008232e0008251e0008
260c000826d400082716000827ce000828940008292c0008298c00082a8e
00082b6200082c5600082d5600082dfa00082e9200082ee800082f300008
2f72000830120008307200083164000831f200083228000832a20008331a
0008336a000834760008356c00083616000836400008366a000836940008
36be000836fe0008373e00083776000837ae000837f80008384200083882
000838c20008390c0008395600083996000839d600083a3000083a8a0008
3ac400083afe00083b4200083b8600083bca00083c0e00083c6200083cb6
00083d0200083d4e00083d8c00083dd000083e2000083e7000083eca0008
3f2800083f5200083f7c00084016000840b0000840f4000841380008424e
0008425e000842a6000842ee0008434000084392000843fc000844500008
449c000844fa00084584000845e80008462c00084676000846de00084728
00084768000847b0000847ec00084828000848640008489e000848e00008
492200084962000849a2000849ec00084a3600084a8c00084ae400084b32
00084b8000084bc200084c1000084c5200084c9c00084cde00084d220008
4d7e00084dda00084e2600084e7200084ebc00084f0600084f4400084f82
000850000008507e000850b8000850f20008518c00085226000852fa0008
53ce0008542a00085486000854fa0008556e000856cc000856dc000857c6
000857d60008580c000858420008587c000858b6000858f20008592e0008
5974000859ba00085b2a00085cce00085e220008602e000861aa0008635a
0008649a000865980008675e00086892000869e000086b7a00086ca40008
6dc400086fc200087066000871080008728200087380000874dc00087606
000877440008783600087a3600087bb400087c5e00087df400087f160008
80a40008818800088332000884340008855c0008870c000887dc0008891c
00088a3c00088b6600088c8400088dae00088ee000089016000890fa0008
922e0008930e000894160008951e000896220008972a000898400008997c
00089a5800089b0e00089bd000089d1400089dfa00089ef000089f640008
9fea0008a0b00008a17e0008a2040008a2ae0008a3420008a4ce0008a61a
0008a71a0008a81a0008a9240008aa1c0008ab500008ad440008adee0008
aea80008afa60008b0e00008b19e0008b2540008b37a0008b4160008b4fa
0008b6060008b7040008b78a0008b82a0008b8ca0008b9c80008ba120008
badc0008bbbc0008bcc80008bdc60008bfb00008c0b40008c2a80008c442
0008c5e80008c6fc0008c7720008c7d20008c8320008c8920008c8f20008
c9520008c9b20008ca120008ca720008cad00008cb2e0008cb8c0008cbea
0008cc480008cca60008cd040008cd620008cdc20008ce220008ce820008
cee20008cf420008cfa20008d0020008d0620008d0ee0008d17a0008d20a
0008d29a0008d32a0008d3ba0008d44c0008d4de0008d6f20008d8a40008
d98c0008db0e0008dc340008dc440008ddee0008df6e0008e0280008e10c
0008e2100008e30a0008e43c0008e5260008e6bc0008e83e0008e90c0008
e9460008e9800008e9900008ea780008eb660008ed120008ee900008f048
0008f2000008f2100008f2e80008f3cc0008f4a40008f4e60008f52a0008
f56c0008f5b00008f6220008f68e0008f7240008f76a0008f7e20008fa7a
0008fb420008fb520008fc380008fcf60008fdf80008ff1c000900620009
024e000903520009036200090486000906020009076a000907ec00090876
000909f800090ab800090b6800090c4400090c9200090d4200090d920009
0dc200090e0600090e4800090e7600090f9a000910b2000911d400091240
000912ac0009135c00091432000914aa0009156200091650000916a60009
179800091884000918f60009190600091916000919260009193600091a66
00091a7800091b6200091c3400091e0200091f6600091fd00009201a0009
205a0009209a000920ea0009213a000921b20009222a000922a2000922fa
0009235200092454000925ee000926ec000100000d5a00f2003c009d0007
00020010002f00560000062504eb0005000200>
<0000003a02be0000000300000000006a00000000000300000001001e006a
0000000300000002000e01120000000300000003007200e0000000030000
0004001e006a00000003000000050018015200000003000000060022016a
00000003000000070076006a0000000300000008003000ae000000030000
00090086018c000000030000000d029a02120001000000000000003504ac
0001000000000001000f04e1000100000000000200070535000100000000
00030039051c0001000000000004000f04e10001000000000005000c0555
0001000000000006001105610001000000000007003b04e1000100000000
000800180503000100000000000900430572000100000000000d014d05b5
0003000104030002000c0702000300010405000200100712000300010406
0002000c072200030001040700020010072e00030001040800020010073e
0003000104090000006a00000003000104090001001e006a000300010409
0002000e01120003000104090003007200e00003000104090004001e006a
00030001040900050018015200030001040900060022016a000300010409
00070076006a0003000104090008003000ae00030001040900090086018c
000300010409000d029a021200030001040a0002000c070200030001040b
00020010074e00030001040c0002000c070200030001040e0002000c075e
0003000104100002000e076e00030001041300020012077c000300010414
0002000c07020003000104150002001007020003000104160002000c0702
0003000104190002000e078e00030001041b00020010075e00030001041d
0002000c070200030001041f0002000c07020003000104240002000e079c
00030001042a0002000e07aa00030001042d0002000e07b800030001080a
0002000c07020003000108160002000c0702000300010c0a0002000c0702
000300010c0c0002000c070200a900200032003000310034002000540068
00650020004d006f006e006f007400790070006500200043006f00720070
006f0072006100740069006f006e002e00200041006c006c002000520069
0067006800740073002000520065007300650072007600650064002e0054
0069006d006500730020004e0065007700200052006f006d0061006e0020
0069007300200061002000740072006100640065006d00610072006b0020
006f006600200054006800650020004d006f006e006f0074007900700065
00200043006f00720070006f0072006100740069006f006e002e004d006f
006e006f0074007900700065003a00540069006d006500730020004e0065
007700200052006f006d0061006e00200052006500670075006c00610072
003a00560065007200730069006f006e00200035002e0031003100200028
004d006900630072006f0073006f00660074002900560065007200730069
006f006e00200035002e0032003000540069006d00650073004e00650077
0052006f006d0061006e00500053004d0054004d006f006e006f00740079
0070006500200054007900700065002000440072006100770069006e0067
0020004f006600660069006300650020002d0020005300740061006e006c
006500790020004d006f007200690073006f006e002c0020005600690063
0074006f00720020004c0061007200640065006e00740020003100390033
00320059006f00750020006d006100790020007500730065002000740068
0069007300200066006f006e00740020006100730020007000650072006d
006900740074006500640020006200790020007400680065002000450055
004c004100200066006f00720020007400680065002000700072006f0064
00750063007400200069006e002000770068006900630068002000740068
0069007300200066006f006e007400200069007300200069006e0063006c
007500640065006400200074006f00200064006900730070006c00610079
00200061006e00640020007000720069006e007400200063006f006e0074
0065006e0074002e002000200059006f00750020006d006100790020006f
006e006c0079002000280069002900200065006d00620065006400200074
00680069007300200066006f006e007400200069006e00200063006f006e
00740065006e00740020006100730020007000650072006d006900740074
00650064002000620079002000740068006500200065006d006200650064
00640069006e00670020007200650073007400720069006300740069006f
006e007300200069006e0063006c007500640065006400200069006e0020
007400680069007300200066006f006e0074003b00200061006e00640020
0028006900690029002000740065006d0070006f0072006100720069006c
007900200064006f0077006e006c006f0061006400200074006800690073
00200066006f006e007400200074006f002000610020007000720069006e
0074006500720020006f00720020006f00740068006500720020006f0075
0074007000750074002000640065007600690063006500200074006f0020
00680065006c00700020007000720069006e007400200063006f006e0074
0065006e0074002ea9203230313420546865204d6f6e6f7479706520436f
72706f726174696f6e2e20416c6c20526967687473205265736572766564
2e54696d6573204e657720526f6d616e20697320612074726164656d6172
6b206f6620546865204d6f6e6f7479706520436f72706f726174696f6e2e
4d6f6e6f747970653a54696d6573204e657720526f6d616e20526567756c
61723a56657273696f6e20352e313120284d6963726f736f667429566572
73696f6e20352e323054696d65734e6577526f6d616e50534d544d6f6e6f
7479706520547970652044726177696e67204f6666696365202d20537461
6e6c6579204d6f7269736f6e2c20566963746f72204c617264656e742031
393332596f75206d617920757365207468697320666f6e74206173207065
726d6974746564206279207468652045554c4120666f7220746865207072
6f6475637420696e207768696368207468697320666f6e7420697320696e
636c7564656420746f20646973706c617920616e64207072696e7420636f
6e74656e742e2020596f75206d6179206f6e6c792028692920656d626564
207468697320666f6e7420696e20636f6e74656e74206173207065726d69
747465642062792074686520656d62656464696e67207265737472696374
696f6e7320696e636c7564656420696e207468697320666f6e743b20616e
6420286969292074656d706f726172696c7920646f776e6c6f6164207468
697320666f6e7420746f2061207072696e746572206f72206f7468657220
6f75747075742064657669636520746f2068656c70207072696e7420636f
6e74656e742e004e006f0072006d0061006c006e0079006f00620079010d
0065006a006e00e9006e006f0072006d0061006c005300740061006e0064
006100720064039a03b103bd03bf03bd03b903ba03ac004e006f0072006d
00610061006c0069004e006f0072006d00e1006c006e0065004e006f0072
006d0061006c0065005300740061006e00640061006100720064041e0431
044b0447043d044b0439004e0061007600610064006e006f0074006801b0
01a10300006e00670041007200720075006e00740061b9005403ecb3032a
1f3f411503e4006003e9009f03e500df03e50004001003e4001003e5003f
03e5007003e400ff03e40005ffc003e1b345453240b803e1b32b2e3240b8
03e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001fffc003dfb216
1b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003deb32a2d32df
410a03de00ef03de000203de03df0028001fffc003dfb3282e32f0410d03
df0001037e000f0101001f00a003dd00b003dd0002004003dab32426329f
bf03cc000103ca03c90064001fffc003c9b20d1132410a03c703b7001200
1f03b603b50064001fffc003b5b30e1132004173038d000100c0038d00d0
038d00e0038d00f0038d0004006f03a7007f03a7008f03a700af03a70004
000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef03a50001000f
03a5002f03a5006f03a5008f03a50004005403aa0001006b03aa000103a8
036a0022001f038c03940015001f038b03930015001f03a40393001a001f
03a20394001e001f03a10393001e001f039f0394001e001f039b0394001a
001f039a0393001e001f039903940016001f039803940016001f03970393
001b001f03960394001b001f03950393001b001f03760375001a001f0374
0375001a001f03a00373b21e1f10411e0393002003930030039300030020
0394003003940040039400030000039400010383036c001e001f03b1036c
0032001f036d036c0032001fffc0037db2212332b9ffc0037db3171932a0
410a037d00b0037d00c0037d00d0037d0004ffc0037cb2212332b9ffc003
7cb3171932a0412d037c00b0037c00c0037c00d0037c0004003003730040
03730002000003730010037300200373000300e0037300f00373000200b0
037300c0037300d003730003008403730090037300a0037300030377036a
0029001f0389036ab2281f40b80367b33940323fbb0366000100400366b3
191d328fbb0366000100400366b3090a3240b80366b3090e3240b80366b3
090f323fbb0365000100400365b3090c3240b80365b31a1d3240b80365b3
090e326b410e0363007b0363000200140363002403630034036300440363
00040363b2242f1fba034e006d0800400e1f7f027f037f047f0504304401
12bf033200500800001f0012032d003c080040291f5f3c01376009700980
090310092009300940095009056f037f038f03031f032f033f034f035f03
05b8ffc0b2073a33b8ffc04047063a33900ba00bb00bc00bd00b05b006c0
06d006e006f0060520063006400650066006700680069006a00609900690
0702600b700b800b03100b200b300b400b500b051f0701a0418503620001
00000362001003620070036200900362000400f0035f00010020035e0020
035f0030035f0040035e00040000035e0000035f0010035f00d0035e00e0
035f00050010030f0020030f0030030f00d0030f00e0030f00050000030f
0010030f0050030f0060030f0070030f00d0030f00060000030f0010030f
0020030f0030030f00e0030f00f0030f0006030f00270000030e0030030e
000200e0030e00f0030e0002030e004a00e0030d00f0030d0002030d0027
00d002fc0001001002fc002002fc005002fc000300d002fc00e002fc0002
000002fc001002fc002002fc003002fc005002fc006002fc000600e002fc
00f002fc0002002002fc003002fc004002fc000302fc406127c02901b029
01a02901902901403c3f413240223f41321212125f235f255f285fa5046f
236f256f286fa5044f234f254f284fa5043f233f253f283fa5042f232f25
2f282fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f4c6f4c7f4c03
37b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a32370f413b02
af0001005f02af009f02af00df02af0003001f02af002f02af003f02af00
6f02af000402af02af001f02ad002f02ad003f02ad004f02ad005f02ad00
0500df02ad0001000f02ad001f02ad003f02ad005f02ad009f02ad000500
5f02ad00df02ad0002000f02ad001f02ad003f02ad0003004002acb23a33
4f414a02ac005f02ac009f02ac0003002f02ac003f02ac0002000f02ac00
3f02ac00af02ac000300b002ac00e002ac0002004f02ac005f02ac00a002
ac0003001f02ac002f02ac003f02ac0003000f035a0001000f035a001f03
5a003f035a005f035a0070035a000500cf035700df03570002000f035700
1f03570070035700af03570004035a035a0357035702ad02ad02ac02ac03
2c400d31151f001616000000121108104110020c004a000d01a8004a000d
0198004a000d0189004a000d013f004a000d0124400e4a0df64a0dbe4a0d
864a0d274a0dbe02280041000d01940041000d0121400b410db4410d4f41
0d29410d411002170021000d02150021000d02060021000d01eb0021000d
014e0021000d012c4014210df9210df3210df1210d9d210d71210d3d210d
4110021c001f000d0214001f000d020b001f000d0196001f000d014a001f
000d0126400b1f0dc61f0d571f0d371f0d410d019e0141000d0042014100
0d001e0141000d001b0141000d01f2b40f440f0009bb01f20044000d0201
b23c291fb80200b23c291fb801ffb23c411fb801feb23c471fb801fdb23c
9e1fb801fab23c931fbc01f9010f0101001f01f6b224e41f411501f40149
0401001f01f301490401001f01f1014900ab001f01f001490067001f01a6
003c0125001f01a4b23c811f411501a3010f019a001f01a200220801001f
01a100500401001f019f0149019a001f019d01490067001f019cb22c621f
b8019bb22c791fbc019a002c0101001f0197b22ce41fb80193b22c891fb8
0192b22c6c1fb8018fb2259e1fb8016ab23c2a1f4111016700240201001f
0163002502ab001f014c010f019a001f01480149006c001f0147b22c891f
b80145b22c9e1fb80144b22c791fb80143b223311fb80127b23c811fbc01
2300500101001f011fb223e41f4115011d0023019a001f011c0023080100
1f011b00250801001f010e010f0401001f010d00220401001f0108b22381
1fb80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc01490156001f
00e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524b801
56b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b901490201b61faf
2c671fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925b802
01b21f812cbc0401001f006d010f0156400b1f592c3e1f4c3cab1f4625b8
0101b21f403cb80125400a1f3a23721f393cab1f38b80149b3ab1f3124b8
0401b21f3025b802abb61f2a24e41f2623b80156b21f5537ba0235000701
75402c0774076207560751073b0733072d0720071d071c07140812081008
0e080c080a080808060804080208000814b8ffe0402b0000010014061000
000100060400000100041000000100100200000100020000000100000201
0802004a00b013034b024b534201b0124b004b5442b0372b4bb807ff52b0
382b4bb008505b58b101018e59b0382bb00288b801005458b801ffb10101
8e851bb0124358b90001012f858d1bb90001017c858d5959014bb0c06300
4b6220b0f65323b8010a515ab0052342180016763f183f123e113946443e
113946443e113946443e113946443e11394660443e11394660442b2b2b2b
2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358b0aa
1d59b0324b5358b0ff1d594bb04753205c58b90271026f4544b90270026f
45445958b9017a0271455258b90271017a4459594bb04753205c58b90022
02704544b9003c027045445958b901b30022455258b9002201b34459594b
b04c53205c58b9014900224544b1222245445958b901c20149455258b901
4901c24459594bb06753205c58b9002402714544b90050027145445958b9
021e0024455258b90024021e4459594bb8020153205c58b9010f00224544
b1222245445958b90c00010f455258b9010f0c004459594bb01c53205c58
b125254544b12c2545445958b13725455258b125374459594bb0ab53205c
58b125254544b1232545445958b901590025455258b9002501594459594b
b8010153205c58b125254544b1282545445958b902080025455258b90025
02084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b01b361dc6463456523456023456560234560b08b766818
b080622020b164dc4565234520b003266062636820b003266165b0dc2365
44b064234420b161634565234520b003266062636820b003266165b06323
6544b0612344b10063455458b163406544b26140614523614459b3a67f43
4b456523456023456560234560b089766818b080622020b1437f45652345
20b003266062636820b003266165b07f236544b043234420b1a64b456523
4520b003266062636820b003266165b04b236544b0a62344b1004b455458
b14b406544b2a640a645236144594b5242014b5058b108004259435c58b1
08004259b3020b0a124358601b2159421610703eb0124358b93b21187e1b
ba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba0400
0400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a8040000
0b2b59b0102342b0112342002b0018456944456944456944456944737373
747373737475752b7373747475184569447373742b4bb021534bb046515a
58b03cb03c45b040604459012b2b2b2b757575757575757543584010bf3c
cf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf22025f226f22
7f228f229f22af2206757559435c58b6403c9f22ef220375592b2b017474
747445447373747475754544734544737445447374757373737373007575
75737575752b2b757575752b752b435841220063032d00010003032d0013
032d0023032d0033032d0053032d000500c3032d00d3032d00e3032d00f3
032d00040083032d0093032d00a3032d00b3032d0004032d032d45186944
74747575592b4358b900180332b330353238b80332b361663238b80332b3
535a3238b80332b3454e3238b80332b33c413218b80332b23f330a410f03
32000100ba033200ca033200da033200ea033200fa033200050332033245
18694474752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b2b73
2b74012b002b2b017373737474732b2b00732b2b002b2b2b017374732b01
2b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b00017375007373004569440073
730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73742b
2b00000000>
[15785 11565 15133 15893 15981 14937 16337 15645 16353 14921 16353 16373 16237
16209 16373 15753 16373 16249 16273 16177 15933 15953 16221 16017 15885 15209
16261 15725 15813 16357 16209 16073 16169 16181 15929 16321 16045 12605 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
2 10094 36 <00020010000005b0056b001c001f0218b102024354584012011f1e021e1d
001c1e1c001d1f011e1c0214be03e2001703e2000703e2000a03e2401708
021c1e030f081c161d001f70018001020101080f0208002f3f12392f5dcd
d0cd2f2f1112173910ededeeec012f2f2f2f2f2f2f107d87c4c41087c4c4
31301b401b080e0f0f0d100a1e091f502106150f13101a111a1b1b1c181d
0621b8ffc0b2253521b8ffc0b330583421b8ffc0b32b2e3421b8ffc0b229
3521b8ffc0b320263421b8ffc0b31a1e3421b8ffc0b2173521b8ffc0b215
3521b8ffc040971013340d0f0b100a1e390f4a0f4610491e4f21590f5710
5514581e6a0f6710681e76108004870e8a0f87108712891e881f9b0f9b10
99119b1eb90fb910bd1ab91ecb0fca10c81dca1edb0fd810eb0fe810e81e
f90ff810f91df91e2c090f4b1b021f1e01011f1e02001d1e1e1c090e0a1b
09161c171b160802071b081511141b15781e0f1020101e1c1c2211101411
70110111100f0e0eb802c94011021e1402021e1f1da50000700180010201
b801b5400c08100f03151616080809081cb801fa40090f11011102a50e40
11b80230b34f1e011eb802ec400e20400e500ef00e030ea7206b8a182b10
f65d191afd5ded181a10ed105ded003f3c103c103c3f3c10f45d3c10fd3c
870e2e2b057d10c4875d0e2e182b87057dc42b180010ed0110c00010ed01
10c00010ed0110c00010ed0110c087107dc43c073c3c073c313001715d2b
2b2b2b2b2b2b2b2b01725d59012107061514161715213536373637013301
16161715213536363534270b0203a9fdf35c223b62fe555519333e01dd23
01d8395d53fde95139286ee6ec01c6d64f271f2f0725250f183093045cfb
988851052525042e212c5f010d0224fddc00>TimesNewRomanPSMT AddT42Char 
2 11546 38 <0001004affe1050f056b002401024042091e2f012f022f032f1f960f991e
a30fa312b60fb7120b081e011617017d037b1578168d038a169d03961aac
03bb03090c030e04021d48035903052f081011241b00b80105b5021b0101
ba00b8034bb6209a05281c0301b802dfb5112bb0100110b80341b58f0d9f
0d020db8032f402f140902ac000101013210acaf11011f113f1102111a40
260126093c2018010f181f1802180c0d0d02551849256463182b4e10f42b
5d724ded4e105df672714dedf471ed003ffd71f45df4e63fedecf4ed0110
edf4ed10c9313043794020151b060c07251a260b261625061b092d000c15
092d000819052d010a170d2d00002b2b012b2b2b2b2b2b818101715d0072
715d01132326262322060215141216333236371706042320272635341224
33321716333237363704d11f1f3ee6a187da7d76ed9884ca791f66fef0bb
feafb98ab6013fbd938f2a121b141a0b056bfe33cfb689fed4dfb8fef290
71a814b5a8fabafccb0154bb4816131b3000>TimesNewRomanPSMT AddT42Char 
3 4410 56 <0001000bffe005b1054c002e0183b90030ffc0b32a2f3430b8ffc0b32024
3430b8ffc04054161c3428063a064c06790f042523252732233227452345
27a5270729273927025030740b7b0f9a27bf27f826063c0e081f1b022122
1f1f1b1921222a1f1b012123131f1b1821231918180202010225280d092a
29b8fff1b41010025529b8ffe6b40f0f025529b8ffe6b40d0d025529b802
c94010090908400c3908403f35200830080208b8fff4401114140255080c
1313025508061010025508b8fff4b60f0f0255081a30b8ffc040443f3510
30017030a030b030e03004301f200613130255200c0f0f0255200c0d0d02
55202212127f13016f1301130c10100255130e0f0f0255131e0d0d025513
192ff4a2182b4e10f42b2b2b5d5d3c4d10fd2b2b2b3c4e105d712bf62b2b
2b2b5d2b2b3c4d10fd2b2b2b3c003fed3f3c103c103c2b2b2b2b31304b51
79b137084379402621280a112221232102060f252725240e202d00101126
0c292d010b0a2110252d00280b252d002b2b01103c2b103c2b2b2b2a8181
015d71005d0071012b2b2b01352115232207061511140606232226272635
1134262323352115232207061511141e023332363635113427262303d101
e033502b1551edccdee63020454d33024a345424191d4c8f6885d24d1c27
4d05272525431f71fddacce1a19a8259f502127d4e2525352472fdb14fcc
724a74b5d802257f202c>TimesNewRomanPSMT AddT42Char 
2 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>TimesNewRomanPSMT AddT42Char 
TimesNewRomanPSMT /CharStrings get begin
/A 36 def
/C 38 def
/U 56 def
end
TimesNewRomanPSMT /Encoding get
dup 65 /A put
dup 67 /C put
dup 85 /U put
pop
end
%ADOEndSubsetFont
/VPYVSA+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/VPYVSA+TimesNewRomanPSMT*1 
[65{/.notdef}rp /A /.notdef /C 17{/.notdef}rp /U 170{/.notdef}rp]
VPYVSA+TimesNewRomanPSMT nf
VPYVSA+TimesNewRomanPSMT*1 [12 0 0 -12 0 0 ]msf
132.153 113.479 mo
(AUC)
[8.6328 8.63281 0 ]xsh
/VPYVSA+TimesNewRomanPSMT*1 uf
/VPYVSA+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
/VPYVRZ+STKaiti-GBK-EUC-V-Identity-H uf
/VPYVRZ+STKaiti-GBK-EUC-V /CIDFont ur
26.433 188.419 mo
26.133 188.299 li
25.893 188.179 li
25.833 188.059 li
25.593 187.939 li
25.293 187.639 li
25.173 187.399 li
24.933 187.159 li
24.753 186.499 li
24.513 185.599 li
24.393 183.859 li
24.513 183.739 li
24.513 181.939 li
24.633 181.939 li
24.633 181.399 li
24.753 181.399 li
24.753 180.919 li
24.873 180.919 li
24.873 180.559 li
24.933 180.559 li
25.173 180.379 li
25.173 180.139 li
25.293 180.139 li
25.833 179.539 li
26.133 179.419 li
26.373 179.299 li
27.753 179.239 li
27.753 179.299 li
28.053 179.419 li
28.851 179.725 29.462 181.036 29.433 181.819 cv
29.553 185.599 li
29.433 185.599 li
29.433 186.139 li
29.373 186.139 li
29.373 186.499 li
29.253 186.499 li
29.253 186.799 li
29.133 186.799 li
29.133 187.039 li
29.013 187.039 li
29.013 187.279 li
28.833 187.519 li
28.713 187.519 li
28.713 187.759 li
28.473 187.939 li
28.293 188.059 li
28.173 188.179 li
27.753 188.419 li
cp
26.553 188.059 mo
26.373 187.939 li
25.893 187.519 li
25.593 186.799 li
25.473 186.499 li
25.353 183.619 li
25.473 183.559 li
25.473 181.459 li
25.593 181.459 li
25.593 180.679 li
25.713 180.679 li
25.713 180.439 li
25.833 180.439 li
25.833 180.259 li
25.893 180.259 li
25.893 180.019 li
26.013 180.019 li
26.253 179.779 li
26.433 179.659 li
26.553 179.539 li
27.513 179.419 li
27.513 179.539 li
27.933 179.779 li
28.173 180.019 li
28.293 180.259 li
28.473 180.919 li
28.593 186.379 li
28.473 186.379 li
28.473 186.919 li
28.413 186.919 li
28.413 187.159 li
28.293 187.159 li
28.293 187.399 li
28.053 187.639 li
27.933 187.639 li
27.933 187.879 li
27.513 188.059 li
.699336 .676143 .639429 .746822 cmyk
ef
233.793 188.719 mo
233.793 188.419 li
234.093 188.419 li
235.053 188.299 li
235.293 188.059 li
235.293 180.679 li
235.053 180.799 li
234.753 180.919 li
233.673 180.919 li
233.673 180.439 li
234.753 180.439 li
235.413 180.199 li
235.533 180.079 li
235.713 180.019 li
235.833 179.899 li
236.193 179.779 li
236.193 187.699 li
236.253 188.059 li
236.373 188.179 li
236.613 188.299 li
237.333 188.419 li
237.813 188.419 li
237.813 188.719 li
ef
1 /0 /CSD get_res sepcs
1 sep
%ADOBeginSubsetFont: HIBBAA+STKaiti-GBK-EUC-H-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (HIBBAA+STKaiti-GBK-EUC-H)
%%Title: (HIBBAA+STKaiti-GBK-EUC-H Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /HIBBAA+STKaiti-GBK-EUC-H def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-141 -315 1063 986} def
/FontInfo 4 dict dup begin
/FSType 8 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 17311 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 5 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
12474 <001C60D8A8C9B5EE310D747E72E5A261CEDBE861CC7AECDF4508C8C95
9FF0CD6A2BE5EBCA0A56D578D8C4DCECB798054E4BD201C3C3DAEFDD9EFC9EDD
A59A457CD72A5C37A3F19483F0A1EB81B406B07FC92F40D593C1EE15EDC27D38
F82565C8E200BF201BF66549370C3045EA8FE86331B5B1BF8A0600510F8B37EC
FBF387F1CA62DCAF93B250576D9FBAE64512EEB2F8CDF9A37A27F39BFA0882E1
29733DD8B9B0EEAD70C958C8680EC1B929980E69F4E5DD6F3057D4AFBE3EB415
E06F4AA66AF5648810255D1CB4A7FB7058A5FF67437DDCC0DFCCD796CFB7D740
2B2E8EF3BCC88DA2D1C85C33735ED44D3C46B15A0FDDF8AB4A279577210A1600
2BE79CAEBC0883FE3BFE383C28DCDF2C125FC32FB3D7A31B29D42F173BB7984E
46AF9E02CD62C596E7AAEFAE4D05D7476C3D4E99CE3F6EC0C74AD9325F05CF76
357861F9DDAD2BC85C60BDFA07D700D04F6A5DF6557CA1E844FA9C3652991BE3
5B52A53699C02A236A7B71318738046DB1580A6A1D4D232647989713BB77FCB7
42482A98A9EC8074C403BE9109F95A13C4FB4264C17FBA3208F495D07B05FFFE
878DD067C7A215046131EE4224E249E16A99776224F52F926468BF539311878A
94BC66F2B3368266F89FC97EA0045158F7A7EDF901C51593543982DFAC511762
6046F38E38F84787495A176BA90B1F9861A5A97F80E99B6C7A0B4F17E3085441
5FE0319D74153BD56ACC568B3911D67978A192FC2C96A78AA4FC5A3D6AEC0FA1
012FAD8AC8ABB1A71868FD7AB3ABF9538D673641E70EC885275419B6365A52B3
65A7DB559E6B07F2FB417DD9A9B2E84A79DECF8D9A02787C1E34A74B8F138509
2B73508030A163032BDFF232DDB0FCF8D97449229EBD2FEFF147A6092A556ABB
B403BC5F828741E24B65D4B691928112DA0339A5A930B9BD88913744F425FBCF
FC5425C6FB8E20E47961F7BD552E70C2B0058249FF6CDCAE3C78699DBB13DD33
E4D1343910A9321759B47F28730FABDD0328B364CDA97BF595DADD189B5F16FF
56FAC05B6992767EA8516F28C44C8F395DDFFE8E69428489963582A7E40C6032
CC999E092DF1AB0A19EA6DE51E63CA310BF00E54CE5E11B15E031D6CF2368C7E
438ECA7FDAA788E7F2F34FF052E47A7F9D171D6A61D7F52FD3626E742946D886
91CF2BB03343B4D9A4834FC705A097743D2B3B4E91A149862513D4494256FF45
1A27F53B2CFD082F8C589DB331B30C1B870877D6A5660A04F8C7C726CFF7AD3D
D0DA192A7B54E3C7FFCD3733F5983A287DA28A25E31EF4EEFAEFFE6C44433382
93D3A2207BCEB2A2A6D5D9CE1F931BD55A63DC1153B986B633B06> |
17310 <001C60D8A8C9B5EE3102F77FA550FB4CC68CCEE35567B40AA7FB4E453
3B18DC75078339AC3699E856970BD28D7392CFFCAC9E5DC561D5E3C2D942E301
78E1B7E123E4DFD3B32553A81C4DF0B4246EF20C769B497BCA99472088C73CAE
7831BBCC048402983B41095F4B0AE94E1CFDCEB28EF22F90ECFE9E1653B247FF
89A8E5BB7286A3C61EF11FC17E0817718874BBCB3879A661AE1044F68D0A685C
3ED7BCDF35FEFF0B5DF4B3C8A23301133820F0EE22FBA614CA94E7A1E58F0619
4DAE95E48F78C2450CC3F3AC61FDC46E995FCC9C051432AD39E42E699217ED35
2035FAF562A2D7904F5AC4D182E6FBEBA42013F3AF175821383631BC2A7D7EBE
E403D6C47A91412A870DF5F9EBD1FBBCE6DA00A950A4A41384064909BAEB5E10
4EC03A625CD2FF1D057CCFE73701749A23EA85FE8BC7DA09E6DDB393B76A3A6C
A6459266126E944C7430002CC52CB3132C4862B5D0DB6AB188669D6BAF4CA88> |
13278 <001C60D8A8C9B5EE310D62F2356602FFE00254D015B9CD93F92B72438
D0222A167C13F2F2ECF26F194C30D356D3190D0E945EAB7F6B84A865A58C57F8
5418FB3E9469C28EB8BCE79E2ED6A489792FBA89BD03AC7B06FF3D96471CB3B7
8FAC659AA936E2F7CBD6BA193151DB0D542B6AEE87715484B5939E12940D4466
E633054A1E194B43BD410F0D5B0760AEFE385CDBEE91BFE54818D22D8AF0F6E4
ADA03362149AFA7B5E5F8DD90021BC76631EC976CE2D2784759BFA1FBDD9FFA6
D15BB3B5335C5198BBF59F812BC8679CE2F5DAA3F7D7471EB87BCC9478AFCD18
A1A4DAE5ADB639ECDD22766EE7B7434C47171E752D5F6E6FBAE5B9FE09C60C4A
663AE1C8DF1BECB2556F878CE9E6E1B26BD5DA16DA57E672130DBB6BBCF9A98C
6790D684DADE0CBE35D9498384E656A0E1B696F308D995ED597D2A50E7271338
0217F85F9D25DD4C26560EC506FA94DFBD049FDFF82956E024E3B683AB8DDF36
92C06420A810C66991182D485F9F812488C4B3DD45619170564D801A4C469BB1
F05089FD274195B83CB08FAEDAC61647AADE2D1E7641BE5E073E1A86C2064966
C952DA8FE95E1EE5245905800855AF7D315C994CFAA2DBE379CA5F275A607DEB
93F1A3B0E0CCC88DCF7E5987BFF8FBD157C74728642D306AC6E94BEDAD6DFA86
589651A6B44AC5459D9CBDFD3A5C285AF6A062EEFD8B2548CDC5810D7E72D0A0
A670C7D88064B26A045F598E4101E6BE258C28EFEA9D85333E4E30B452B79CDF
6FA82081F5A2E50F7027124DEE77121552A3E0EF9A1C49B77A006F53E0B7BF84
1E59FCE0F449086B8B23E03DA5AD52B78655BF45BC806576B9ACE68478B30016
4792E5AC21F6C2CA1B8BE0C78DC3BEE496C495E2DE1CED5D05191ADD27C65169
EDCF484734BD08D07370E95CA10BC4AA46C2EB6647064817C962A0D120217760
2E6178246CA6ED8C128438C29EE64FFA7C3A1C722AF42CB2D99DC42EEE3042C4
53F7790F926F82D6865FDC7C9506FE6FB8839DF5E04D5B8A34D44443D72F9DAA
F8D> |
13611 <001C60D8A8C9B5EE3102E13CB3FB7F5E140A8785A85E60FB9ECDBEAE9
8B39273A5207EF086B9638B435761E38CA4D7CF46520108117A6866B20A4DF2D
695C8E8F3ED65CB2AFE8FC9F5BEBB7BA027C0D144E3012D26C70EE472E136813
12113116CB0D43FD450F48E6EAEC2DA0796DD64E506FF0FF1635DBE9B51969CD
2A281BDECD44651B3B594AE407FD94E71B6E30C88592B1987F351EA95BD049F2
01AD69E29EB43B9A94A6D0E15E7319A5623B212C469293D45D1BBFB5A8D560DA
0AFF11CB94AD430C2CB2CD50F26E188728936CE77A15265A672F333E68C4891A
E2E5E74B463F45569A1123703D271B71B82A214F3D9F85C8B6D1EA7CC48DF215
F47E004CF77775C41C943817C35B42F88EA3A4B3636BCFA84BACE3609BB7D82E
3FFF45BED59E9A5E8BACA71B2A646795D0E6055A5B7B515CE1ADEDDCCA216174
100F66E494B90B006DBE20CF6889D3956354999C8E1F260653DABDD0142E51C0
C3D99A6BC5F64577B70872C972A2A9C3D7E01E287681F44382B672AFF1E6A4C2
D563D81078A2D6C5B6E91C8F4C75D2333D15A7B73173D55417059B1A877991E2
54181AB3ED98E2025E30477833D2434E352EF6E23242E668DD0147E6FDE0777B
D57F687C378A4EC853CAB21CF6E786F67206C3C40AEC26BC21EA464157E93934
E7AFF1C1F217842B5C39689AAA1A05F9E4AB71FB0735724714F2DBDBEA053828
39CEE185177345B3EBAD2E9370014CB21CE54256E37D874247AECAFB807B5F23
4C95327F92F758D0460ADA8A6D841045BEA3DB03C8E1FE77F258A581278C8886
73D745276FABA1C8BA05645330EDA1922621FD8B5C245A7B91F797646F25451B
833755D806499507DE33CE0E82920EC87072F23C9875AE8252F83ADFEBCF8CFB
5E585EA411B7E60B8F9A63D03A7F73A01842BF06586FE77B4B1ADB767932D579
2A73767E5D61B5888BF3F5B3C061D34D408DF26126A8C0EF45D38AC4F0FEF361
E9F1FBF0C607F75255C3DB4FED365E7F1E08E6A9DAC1F454CFDEC6CDBD784A1D
643D5F68074EB756FF5D84F602A0393A8B49B8669458AFABAB3DC0CD036AC9B1
DF11E57A545F0BDDCC7730C630632804299B4D16AA84D01C42564AD498843196
AFFB7F71419D2F525C988BBAF15B90DE1424414F42E9D77506BB5E20B3266084
61F95BF750A61B8F178C3CFE26AB15C66B327FE23FCF9> |
0 <001C60D8A8C9B5EE31F4> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /HIBBAA+STKaiti-GBK-EUC-H-Identity-H /Identity-H 0 [/HIBBAA+STKaiti-GBK-EUC-H] ct_ComposeFont pop end end
%ADOEndSubsetFont
/VPYVSB+STKaiti-GBK-EUC-H /HIBBAA+STKaiti-GBK-EUC-H-Identity-H findfont ct_VMDictPut
VPYVSB+STKaiti-GBK-EUC-H [10.5 0 0 -10.5 0 0 ]msf
108.513 202.879 mo
(0\272C\2363\3365+)
[13.4999 13.4999 13.4999 0 ]xsh
230.853 181.459 mo
231.573 181.459 li
231.573 178.639 li
230.853 178.639 li
cp
.699336 .676143 .639429 .746822 cmyk
f
72.933 181.459 mo
73.713 181.459 li
73.713 178.639 li
72.933 178.639 li
cp
f
112.353 181.459 mo
113.073 181.459 li
113.073 178.639 li
112.353 178.639 li
cp
f
151.713 181.459 mo
152.433 181.459 li
152.433 178.639 li
151.713 178.639 li
cp
f
191.073 181.459 mo
191.853 181.459 li
191.853 178.639 li
191.073 178.639 li
cp
f
66.513 192.739 mo
66.213 192.619 li
64.984 191.778 64.972 191.462 64.593 189.919 cv
64.473 188.179 li
64.593 188.119 li
64.593 186.619 li
64.713 186.619 li
64.713 186.079 li
64.833 186.079 li
64.833 185.599 li
64.893 185.599 li
64.893 185.239 li
65.013 185.239 li
65.013 184.939 li
65.133 184.939 li
65.253 184.819 li
65.253 184.579 li
65.373 184.579 li
65.433 184.459 li
65.433 184.219 li
65.553 184.219 li
65.793 184.099 li
65.973 183.919 li
66.213 183.799 li
66.513 183.679 li
67.953 183.559 li
67.953 183.679 li
68.253 183.799 li
68.373 183.919 li
68.613 184.039 li
68.913 184.339 li
69.033 184.579 li
69.153 184.699 li
69.333 185.119 li
69.453 185.479 li
69.573 185.959 li
69.693 186.499 li
69.753 189.799 li
69.693 189.799 li
69.693 190.339 li
69.573 190.339 li
69.573 190.699 li
69.453 190.699 li
69.453 190.939 li
69.333 190.939 li
69.333 191.119 li
69.213 191.119 li
69.213 191.359 li
69.153 191.359 li
69.153 191.599 li
69.033 191.599 li
69.033 191.839 li
68.493 192.379 li
68.253 192.499 li
68.133 192.619 li
67.833 192.739 li
cp
66.753 192.379 mo
66.513 192.259 li
66.333 192.139 li
66.213 191.959 li
65.973 191.719 li
65.793 191.239 li
65.673 190.819 li
65.553 190.039 li
65.433 187.999 li
65.553 187.879 li
65.553 185.839 li
65.673 185.839 li
65.673 185.059 li
65.793 185.059 li
65.793 184.819 li
65.913 184.819 li
65.913 184.579 li
65.973 184.579 li
65.973 184.339 li
66.093 184.339 li
66.333 184.099 li
66.753 183.919 li
67.713 183.799 li
67.713 183.919 li
67.833 184.039 li
68.073 184.099 li
68.253 184.339 li
68.373 184.579 li
68.613 185.239 li
68.673 185.959 li
68.793 190.699 li
68.673 190.699 li
68.673 191.119 li
68.613 191.119 li
68.613 191.359 li
68.493 191.359 li
68.493 191.599 li
68.373 191.599 li
68.373 191.839 li
67.953 192.259 li
67.713 192.379 li
ef
71.853 192.379 mo
71.613 192.259 li
71.493 192.139 li
71.373 191.839 li
71.493 191.719 li
71.493 191.479 li
71.613 191.479 li
71.613 191.239 li
71.853 191.239 li
72.393 191.119 li
72.393 191.239 li
72.573 191.239 li
72.573 191.479 li
72.693 192.079 li
72.573 192.079 li
72.573 192.259 li
72.453 192.379 li
ef
74.433 192.499 mo
74.433 192.079 li
74.493 192.079 li
75.273 191.239 li
75.273 191.059 li
75.393 191.059 li
76.113 190.219 li
76.113 190.039 li
76.233 190.039 li
77.013 189.199 li
77.013 189.019 li
77.133 189.019 li
77.553 188.539 li
77.553 188.299 li
77.673 188.299 li
77.733 188.179 li
77.733 187.999 li
77.853 187.999 li
77.973 187.879 li
77.973 187.639 li
78.093 187.639 li
78.093 187.399 li
78.213 187.399 li
78.213 187.159 li
78.273 187.159 li
78.273 186.859 li
78.393 186.859 li
78.273 185.119 li
77.973 184.459 li
77.853 184.339 li
77.673 184.219 li
77.553 184.099 li
77.193 184.039 li
76.113 183.919 li
76.113 184.039 li
75.693 184.219 li
75.273 184.699 li
75.153 184.699 li
75.153 184.939 li
75.033 184.939 li
75.033 185.119 li
74.973 185.119 li
74.973 185.359 li
75.393 185.479 li
75.573 185.479 li
75.573 185.719 li
75.693 186.379 li
75.573 186.499 li
75.393 186.619 li
74.733 186.619 li
74.493 186.379 li
74.433 186.079 li
74.493 185.959 li
74.493 185.359 li
74.613 185.359 li
74.613 185.059 li
74.733 185.059 li
74.733 184.819 li
74.853 184.819 li
74.853 184.579 li
74.973 184.579 li
75.033 184.459 li
75.033 184.219 li
75.153 184.219 li
75.513 184.039 li
75.693 183.919 li
75.813 183.799 li
76.113 183.679 li
77.553 183.559 li
77.553 183.679 li
77.973 183.799 li
78.393 184.039 li
78.753 184.219 li
78.933 184.579 li
79.293 184.939 li
79.353 185.239 li
79.473 186.619 li
79.353 186.619 li
79.353 187.099 li
79.293 187.099 li
79.293 187.279 li
79.173 187.399 li
79.053 187.399 li
79.053 187.639 li
78.933 187.639 li
78.933 187.879 li
77.013 189.919 li
76.773 189.919 li
76.773 190.159 li
75.393 191.599 li
77.733 191.599 li
78.813 191.479 li
79.053 191.239 li
79.053 191.059 li
79.173 191.059 li
79.173 190.219 li
79.473 190.219 li
79.473 190.939 li
79.353 190.939 li
79.353 191.719 li
79.293 191.719 li
79.293 192.379 li
79.173 192.499 li
ef
106.773 192.319 mo
106.413 192.199 li
106.233 192.079 li
105.993 191.839 li
105.753 191.719 li
105.573 191.539 li
105.453 191.299 li
105.213 191.059 li
105.033 190.399 li
104.793 189.499 li
104.673 187.819 li
104.793 187.699 li
104.793 186.259 li
104.913 186.259 li
104.913 185.659 li
105.033 185.659 li
105.033 185.239 li
105.153 185.239 li
105.153 184.879 li
105.213 184.879 li
105.213 184.579 li
105.333 184.579 li
105.453 184.459 li
105.453 184.219 li
105.573 184.219 li
105.693 184.099 li
105.693 183.859 li
105.753 183.859 li
105.993 183.739 li
106.233 183.559 li
106.413 183.439 li
106.773 183.319 li
108.153 183.199 li
108.153 183.319 li
108.453 183.439 li
108.573 183.559 li
108.813 183.679 li
109.113 183.979 li
109.233 184.219 li
109.353 184.339 li
109.593 184.759 li
109.653 185.119 li
109.773 185.539 li
109.893 186.139 li
110.013 189.379 li
109.893 189.379 li
109.893 189.919 li
109.773 189.919 li
109.773 190.279 li
109.653 190.279 li
109.653 190.519 li
109.593 190.519 li
109.593 190.759 li
109.473 190.759 li
109.473 190.939 li
109.353 190.939 li
109.353 191.179 li
109.233 191.179 li
109.233 191.419 li
108.693 191.959 li
108.453 192.079 li
108.393 192.199 li
108.033 192.319 li
cp
106.953 191.959 mo
106.773 191.839 li
106.533 191.719 li
106.413 191.539 li
106.233 191.299 li
105.993 190.819 li
105.873 190.399 li
105.753 189.619 li
105.693 187.579 li
105.753 187.459 li
105.753 185.419 li
105.873 185.419 li
105.873 184.639 li
105.993 184.639 li
105.993 184.459 li
106.113 184.459 li
106.113 184.219 li
106.233 184.219 li
106.233 183.979 li
106.293 183.979 li
106.533 183.739 li
106.953 183.559 li
107.913 183.439 li
107.913 183.559 li
108.033 183.679 li
108.273 183.739 li
108.453 183.979 li
108.573 184.219 li
108.813 184.879 li
108.933 185.539 li
109.053 190.279 li
108.933 190.279 li
108.933 190.759 li
108.813 190.759 li
108.813 190.939 li
108.693 190.939 li
108.693 191.179 li
108.573 191.179 li
108.573 191.419 li
108.153 191.839 li
107.913 191.959 li
ef
112.053 191.959 mo
111.813 191.839 li
111.753 191.719 li
111.633 191.419 li
111.753 191.299 li
111.753 191.059 li
111.813 191.059 li
111.813 190.819 li
112.053 190.819 li
112.593 190.759 li
112.593 190.819 li
112.833 190.819 li
112.833 191.059 li
112.893 191.659 li
112.833 191.659 li
112.833 191.839 li
112.713 191.959 li
ef
116.613 192.079 mo
116.613 191.719 li
116.793 191.719 li
117.573 191.659 li
117.813 191.539 li
117.813 189.859 li
114.453 189.859 li
114.453 189.379 li
114.513 189.379 li
114.633 189.259 li
114.633 189.019 li
114.753 189.019 li
114.873 188.959 li
114.873 188.719 li
114.993 188.719 li
115.053 188.599 li
115.053 188.359 li
115.173 188.359 li
115.293 188.239 li
115.293 188.059 li
115.413 188.059 li
115.413 187.819 li
115.533 187.819 li
115.653 187.699 li
115.653 187.459 li
115.713 187.459 li
115.833 187.339 li
115.833 187.159 li
115.953 187.159 li
116.073 187.039 li
116.073 186.799 li
116.193 186.799 li
116.253 186.679 li
116.253 186.439 li
116.373 186.439 li
116.373 186.259 li
116.493 186.259 li
116.613 186.139 li
116.613 185.899 li
116.733 185.899 li
116.793 185.779 li
116.793 185.539 li
116.913 185.539 li
117.033 185.419 li
117.033 185.239 li
117.153 185.239 li
117.273 185.119 li
117.273 184.879 li
117.333 184.879 li
117.333 184.639 li
117.453 184.639 li
117.573 184.579 li
117.573 184.339 li
117.693 184.339 li
117.813 184.219 li
117.813 183.979 li
117.873 183.979 li
117.993 183.859 li
117.993 183.679 li
118.113 183.679 li
118.233 183.559 li
118.233 183.319 li
118.353 183.319 li
118.353 183.079 li
118.413 183.079 li
118.773 182.959 li
118.773 189.499 li
120.033 189.499 li
120.033 189.859 li
118.773 189.859 li
118.773 191.059 li
118.893 191.539 li
119.073 191.659 li
119.733 191.719 li
119.973 191.719 li
119.973 192.079 li
cp
114.753 189.499 mo
114.993 189.259 li
114.993 189.019 li
115.053 189.019 li
115.173 188.959 li
115.173 188.719 li
115.293 188.719 li
115.413 188.599 li
115.413 188.359 li
115.533 188.359 li
115.653 188.239 li
115.653 188.059 li
115.713 188.059 li
115.833 187.939 li
115.833 187.699 li
115.953 187.699 li
115.953 187.459 li
116.073 187.459 li
116.193 187.339 li
116.193 187.159 li
116.253 187.159 li
116.373 187.039 li
116.373 186.799 li
116.493 186.799 li
116.613 186.679 li
116.613 186.439 li
116.733 186.439 li
116.793 186.319 li
116.793 186.139 li
116.913 186.139 li
116.913 185.899 li
117.033 185.899 li
117.153 185.779 li
117.153 185.539 li
117.273 185.539 li
117.333 185.419 li
117.333 185.239 li
117.453 185.239 li
117.573 185.119 li
117.573 184.879 li
117.693 184.879 li
117.813 184.759 li
117.813 184.579 li
117.873 189.499 li
ef
145.953 192.139 mo
145.653 192.079 li
145.413 191.959 li
145.173 191.719 li
144.993 191.599 li
144.753 191.359 li
144.633 191.119 li
144.453 190.939 li
144.213 190.219 li
144.033 189.319 li
143.913 187.639 li
144.033 187.519 li
144.033 186.079 li
144.093 186.079 li
144.093 185.479 li
144.213 185.479 li
144.213 185.059 li
144.333 185.059 li
144.333 184.699 li
144.453 184.699 li
144.453 184.339 li
144.573 184.339 li
144.633 184.219 li
144.633 184.039 li
144.753 184.039 li
144.873 183.919 li
144.873 183.679 li
144.993 183.679 li
145.173 183.559 li
145.413 183.319 li
145.653 183.199 li
145.953 183.079 li
147.333 183.019 li
147.333 183.079 li
147.693 183.199 li
148.592 183.839 148.96 184.864 149.073 185.959 cv
149.193 189.199 li
149.073 189.199 li
149.073 189.799 li
148.953 189.799 li
148.953 190.099 li
148.893 190.099 li
148.893 190.339 li
148.773 190.339 li
148.773 190.579 li
148.653 190.579 li
148.653 190.819 li
148.533 190.819 li
148.533 191.059 li
148.413 191.059 li
148.413 191.239 li
147.873 191.839 li
147.693 191.959 li
147.573 192.079 li
147.273 192.139 li
cp
146.193 191.839 mo
145.713 191.599 li
145.653 191.359 li
145.413 191.119 li
145.173 190.699 li
145.113 190.219 li
144.993 189.439 li
144.873 187.399 li
144.993 187.279 li
144.993 185.239 li
145.113 185.239 li
145.113 184.459 li
145.173 184.459 li
145.173 184.219 li
145.293 184.219 li
145.293 184.039 li
145.413 184.039 li
145.413 183.799 li
145.533 183.799 li
145.713 183.559 li
146.193 183.319 li
147.153 183.199 li
147.153 183.319 li
148.015 183.925 147.898 184.336 148.113 185.359 cv
148.233 190.099 li
148.113 190.099 li
148.113 190.579 li
147.993 190.579 li
147.993 190.819 li
147.873 190.819 li
147.873 191.059 li
147.813 191.059 li
147.813 191.239 li
147.333 191.719 li
147.153 191.839 li
ef
151.233 191.839 mo
150.993 191.719 li
150.933 191.599 li
150.813 191.239 li
150.933 191.119 li
150.933 190.939 li
150.993 190.939 li
150.993 190.699 li
151.233 190.699 li
151.773 190.579 li
151.773 190.699 li
152.013 190.699 li
152.013 190.939 li
152.073 191.479 li
152.013 191.479 li
152.013 191.719 li
151.893 191.839 li
ef
155.853 192.139 mo
155.553 192.079 li
155.313 191.959 li
155.253 191.839 li
155.013 191.719 li
154.713 191.359 li
154.593 191.119 li
154.473 191.059 li
154.173 190.339 li
154.053 190.039 li
153.933 189.559 li
153.813 189.019 li
153.693 187.639 li
153.813 187.519 li
153.813 186.379 li
153.933 186.379 li
153.933 185.959 li
154.053 185.959 li
154.053 185.599 li
154.173 185.599 li
154.173 185.239 li
154.233 185.239 li
154.233 185.059 li
154.353 185.059 li
154.353 184.819 li
154.473 184.819 li
154.473 184.579 li
154.593 184.579 li
154.773 184.339 li
154.773 184.099 li
154.893 184.099 li
155.313 183.679 li
155.553 183.559 li
155.673 183.439 li
156.093 183.199 li
156.393 183.079 li
157.833 183.019 li
157.833 183.079 li
158.253 183.319 li
158.493 183.559 li
158.553 183.799 li
158.673 184.579 li
158.493 184.819 li
157.953 184.819 li
157.713 184.579 li
157.593 184.339 li
157.713 184.219 li
157.713 183.919 li
157.953 183.919 li
158.253 183.799 li
157.953 183.439 li
157.593 183.319 li
156.633 183.199 li
156.633 183.319 li
156.333 183.439 li
156.213 183.559 li
155.973 183.679 li
155.793 183.919 li
155.673 183.919 li
155.673 184.099 li
155.433 184.339 li
155.313 184.339 li
155.313 184.699 li
155.253 184.699 li
155.253 184.939 li
155.133 184.939 li
155.133 185.239 li
155.013 185.239 li
155.013 185.839 li
154.893 185.839 li
154.893 187.099 li
154.773 187.099 li
154.773 187.519 li
154.893 187.519 li
154.893 187.279 li
155.013 187.279 li
155.013 187.099 li
155.133 187.099 li
155.133 186.859 li
155.253 186.859 li
155.553 186.499 li
155.793 186.379 li
156.093 186.259 li
157.173 186.139 li
157.173 186.259 li
157.473 186.379 li
158.344 186.885 158.598 187.367 158.913 188.299 cv
159.033 190.039 li
158.913 190.039 li
158.913 190.339 li
158.793 190.339 li
158.793 190.579 li
158.673 190.699 li
158.553 190.699 li
158.553 190.939 li
158.493 190.939 li
158.493 191.119 li
157.953 191.719 li
157.713 191.839 li
157.593 191.959 li
157.173 192.139 li
cp
155.853 191.719 mo
155.793 191.599 li
155.553 191.479 li
155.433 191.359 li
155.313 191.119 li
155.253 191.059 li
155.133 190.819 li
154.893 189.919 li
154.773 188.899 li
154.893 188.779 li
154.893 187.999 li
155.013 187.999 li
155.013 187.639 li
155.133 187.639 li
155.133 187.399 li
155.253 187.399 li
155.253 187.099 li
155.313 187.099 li
155.793 186.619 li
155.973 186.499 li
156.933 186.379 li
156.933 186.499 li
157.413 186.739 li
157.473 186.979 li
157.593 187.099 li
157.713 187.399 li
157.833 187.879 li
157.953 190.459 li
157.833 190.459 li
157.833 190.939 li
157.713 190.939 li
157.713 191.119 li
157.293 191.599 li
156.933 191.719 li
ef
185.493 192.139 mo
185.193 192.079 li
184.953 191.959 li
184.773 191.719 li
184.533 191.599 li
184.353 191.359 li
184.233 191.119 li
183.993 190.939 li
183.813 190.219 li
183.573 189.319 li
183.453 187.639 li
183.573 187.519 li
183.573 186.079 li
183.693 186.079 li
183.693 185.479 li
183.813 185.479 li
183.813 185.059 li
183.873 185.059 li
183.873 184.699 li
183.993 184.699 li
183.993 184.339 li
184.113 184.339 li
184.233 184.219 li
184.233 184.039 li
184.353 184.039 li
184.413 183.919 li
184.413 183.679 li
184.533 183.679 li
184.773 183.559 li
184.953 183.319 li
185.193 183.199 li
185.493 183.079 li
186.933 183.019 li
186.933 183.079 li
187.233 183.199 li
187.353 183.319 li
187.593 183.439 li
187.893 183.799 li
188.013 184.039 li
188.133 184.099 li
188.313 184.579 li
188.433 184.939 li
188.553 185.359 li
188.673 185.959 li
188.733 189.199 li
188.673 189.199 li
188.673 189.799 li
188.553 189.799 li
188.553 190.099 li
188.433 190.099 li
188.433 190.339 li
188.313 190.339 li
188.313 190.579 li
188.193 190.579 li
188.193 190.819 li
188.133 190.819 li
188.133 191.059 li
188.013 191.059 li
188.013 191.239 li
187.473 191.839 li
187.233 191.959 li
187.113 192.079 li
186.813 192.139 li
cp
185.733 191.839 mo
185.493 191.719 li
185.313 191.599 li
185.193 191.359 li
184.953 191.119 li
184.773 190.699 li
184.653 190.219 li
184.533 189.439 li
184.413 187.399 li
184.533 187.279 li
184.533 185.239 li
184.653 185.239 li
184.653 184.459 li
184.773 184.459 li
184.773 184.219 li
184.893 184.219 li
184.893 184.039 li
184.953 184.039 li
184.953 183.799 li
185.073 183.799 li
185.313 183.559 li
185.733 183.319 li
186.693 183.199 li
186.693 183.319 li
186.813 183.439 li
187.053 183.559 li
187.233 183.799 li
187.353 184.039 li
187.593 184.699 li
187.653 185.359 li
187.773 190.099 li
187.653 190.099 li
187.653 190.579 li
187.593 190.579 li
187.593 190.819 li
187.473 190.819 li
187.473 191.059 li
187.353 191.059 li
187.353 191.239 li
186.933 191.719 li
186.693 191.839 li
ef
190.773 191.839 mo
190.593 191.719 li
190.473 191.599 li
190.353 191.239 li
190.473 191.119 li
190.473 190.939 li
190.593 190.939 li
190.593 190.699 li
190.773 190.699 li
191.313 190.579 li
191.313 190.699 li
191.553 190.699 li
191.553 190.939 li
191.673 191.479 li
191.553 191.479 li
191.553 191.719 li
191.433 191.839 li
ef
195.333 192.139 mo
194.913 192.079 li
194.253 191.719 li
193.713 191.119 li
193.593 190.939 li
193.473 190.819 li
193.413 190.459 li
193.293 189.919 li
193.413 189.799 li
193.413 189.199 li
193.473 189.199 li
193.473 188.899 li
193.593 188.899 li
193.713 188.779 li
193.713 188.539 li
193.833 188.539 li
194.493 187.879 li
195.093 187.519 li
195.213 187.399 li
195.033 187.159 li
194.793 187.099 li
194.553 186.859 li
194.373 186.739 li
194.133 186.499 li
193.833 185.839 li
193.713 185.119 li
193.833 185.059 li
193.833 184.579 li
193.953 184.579 li
193.953 184.099 li
194.013 184.099 li
194.253 183.919 li
194.253 183.679 li
194.373 183.679 li
194.493 183.559 li
194.913 183.319 li
195.033 183.199 li
195.453 183.079 li
196.713 183.019 li
196.713 183.079 li
197.073 183.199 li
197.493 183.439 li
198.033 184.039 li
198.153 184.459 li
198.273 185.359 li
198.153 185.359 li
198.153 185.719 li
198.033 185.839 li
197.913 185.839 li
197.913 186.079 li
197.253 186.739 li
196.653 187.099 li
196.833 187.159 li
196.953 187.279 li
197.193 187.399 li
197.253 187.519 li
197.493 187.639 li
197.793 187.999 li
198.033 187.999 li
198.033 188.179 li
198.153 188.299 li
198.333 188.659 li
198.453 189.079 li
198.573 190.339 li
198.453 190.339 li
198.453 190.699 li
198.273 190.939 li
198.153 190.939 li
198.153 191.119 li
198.033 191.239 li
197.913 191.239 li
197.913 191.479 li
197.733 191.599 li
197.613 191.719 li
197.373 191.839 li
197.253 191.959 li
197.073 192.079 li
196.653 192.139 li
cp
195.453 191.719 mo
195.093 191.599 li
194.913 191.479 li
194.793 191.359 li
194.553 191.239 li
194.373 191.059 li
194.253 190.819 li
194.133 190.699 li
194.013 190.339 li
193.953 189.919 li
194.013 189.799 li
194.013 189.199 li
194.133 189.199 li
194.133 189.019 li
194.253 189.019 li
194.253 188.779 li
194.373 188.779 li
194.373 188.539 li
194.493 188.539 li
195.093 187.879 li
195.333 187.759 li
195.633 187.639 li
195.633 187.759 li
195.873 187.879 li
195.993 187.999 li
196.413 188.179 li
196.533 188.299 li
196.953 188.539 li
197.073 188.659 li
197.253 188.779 li
197.793 189.319 li
197.913 189.559 li
198.033 190.459 li
197.913 190.459 li
197.913 190.819 li
197.373 191.359 li
196.713 191.719 li
cp
196.293 186.739 mo
196.113 186.619 li
195.993 186.499 li
195.753 186.379 li
195.633 186.259 li
195.453 186.139 li
195.333 186.079 li
194.913 185.839 li
194.673 185.599 li
194.493 185.479 li
194.373 185.239 li
194.253 185.119 li
194.133 184.699 li
194.253 184.579 li
194.253 184.219 li
194.373 184.219 li
194.373 184.039 li
194.493 184.039 li
194.913 183.559 li
195.333 183.319 li
196.533 183.199 li
196.533 183.319 li
196.833 183.439 li
196.953 183.559 li
197.193 183.679 li
197.373 184.039 li
197.493 184.099 li
197.613 184.339 li
197.733 185.479 li
197.613 185.479 li
197.613 185.719 li
197.493 185.839 li
197.373 185.839 li
197.373 186.079 li
196.953 186.499 li
196.713 186.619 li
196.653 186.739 li
ef
33.573 182.059 mo
32.493 11.959 li
33.513 11.959 li
34.533 182.059 li
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 ]]
] del_res
/VPYVSB+STKaiti-GBK-EUC-H-Identity-H uf
/VPYVSB+STKaiti-GBK-EUC-H /CIDFont ur
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
